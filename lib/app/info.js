/*** Generated by streamline 0.4.6 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var AsapListView, AsapView, InfoView, NoteView, ProjectView, ProjectsView, TaskList, TaskView, ui, _this = this, __hasProp = {

  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ui = require("./ui");

  exports.InfoView = InfoView = (function(_super) {

    __extends(InfoView, _super);

    function InfoView(_, slot, match) { var info, _this, __this = this; var __frame = { name: "InfoView", line: 13 }; return __func(_, this, arguments, InfoView, 0, __frame, function __$InfoView() { _this = __this;


        __this.slot = slot;
        __this.clean = function(force) {
          return InfoView.prototype.clean.apply(_this, arguments); };

        __this.dirty = function() {
          return InfoView.prototype.dirty.apply(_this, arguments); };

        __this.draw = function() {
          return InfoView.prototype.draw.apply(_this, arguments); };

        __this["delete"] = function() {
          return InfoView.prototype.delete.apply(_this, arguments); };

        __this.context = __this.slot.getContentNode();
        __this.id = match[1];
        __this.slot.setContent(require("./template/infoframe")());
        __this.contentNode = $(".infocontent", __this.context);
        return model.cache.getInformation(__cb(_, __frame, 20, 18, function ___(__0, __1) { __this.info = __1;
          __this.info.onChanged(__this.draw);
          __this.info.onDeleted(__this.delcb = function() {
            return _this.slot.setView("")(); });

          info = __this.info;
          $(".setStatus > button", __this.context).click(function(ev) {
            var status;
            ev.preventDefault();
            status = $(this).attr("name");
            if (!(((status === "delete") && !confirm("Really delete?")))) {
              return info.setStatus((function() {  }), status); } ; });


          (__this.savebutton = $("button[name=save]", __this.context)).hide();
          __this.delayPicker = new ui.TimePicker($(".delay"), {
            name: "Delay",
            change: function(date) {
              return info.setDelay((function() {  }), date); } });


          __this.savebutton.click(function(ev) {
            ev.preventDefault();
            return _this.clean(true); });

          new ui.Uploader($(".upload", __this.context));
          __this.refManager = new ui.ReferenceList($(".references", __this.context), __this.info);
          __this.initContent();
          __this.draw();
          new ui.Flippable($(".options", __this.context), null).addToggler($("button[name=options]", __this.context)); _(); }, true), __this.id); }); };


    InfoView.prototype["delete"] = function() {
      this.info.removeCb("changed", this.draw);
      return this.info.removeCb("deleted", this.delcb); };


    InfoView.prototype.draw = function() {
      this.drawTitle();
      this.drawFrame();
      return this.drawContent(); };


    InfoView.prototype.dirty = function() {
      this.dirtStamp = (new Date().getTime)();
      this.savebutton.show(400);
      return setTimeout(this.clean, 5000); };


    InfoView.prototype.clean = function(force) {
      if ((((this.dirtStamp != null)) && (((((new Date().getTime)() - this.dirtStamp) >= 5000) || force)))) {
        this.save();
        this.dirtStamp = null;
        return this.savebutton.hide(1000); } ; };



    InfoView.prototype.drawFrame = function() {
      $(".setStatus > button", this.context).removeClass("active");
      $(((".setStatus > button[name=" + this.info.status) + "]"), this.context).addClass("active");
      $("span.created_at", this.context).attr("x-time", this.info.createdAt);
      $("span.last_edited", this.context).attr("x-time", this.info.lastEdited);
      this.delayPicker.setDate(((this.info.delay != null) ? new Date(this.info.delay) : null));
      return this.refManager.setList(this.info.references); };


    return InfoView;

  })(ui.View);

  NoteView = (function(_super) {

    __extends(NoteView, _super);

    function NoteView() {
      return NoteView.__super__.constructor.apply(this, arguments); };


    NoteView.registerView(/^note:(.*)$/, NoteView, function __1(_, match) { var __frame = { name: "__1", line: 111 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
        return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) { var __1 = ("Note: " + (__2.content)); return _(null, __1); }, true), match[1]); }); });


    NoteView.prototype.drawTitle = function() {
      return this.slot.setTitle("Note"); };


    NoteView.prototype.drawContent = function NoteView_prototype_drawContent__2(_) { var __this = this; var __frame = { name: "NoteView_prototype_drawContent__2", line: 119 }; return __func(_, this, arguments, NoteView_prototype_drawContent__2, 0, __frame, function __$NoteView_prototype_drawContent__2() {
        __this.area.val(__this.info.content);
        return setTimeout(__cb(_, __frame, 2, 6, function __$NoteView_prototype_drawContent__2() {
          return _(null, __this.area.trigger("autosize")); }, true), 1); }); };


    NoteView.prototype.initContent = function() {
      var _this = this;
      this.contentNode.html(require("./template/note")());
      this.area = $("textarea", this.contentNode);
      this.area.autosize({
        append: "\n" });

      this.area.keyup(this.dirty);
      return this.area.change(function() {
        _this.dirty();
        return _this.clean(true); }); };



    NoteView.prototype.save = function NoteView_prototype_save__3(_) { var msg, __this = this; var __frame = { name: "NoteView_prototype_save__3", line: 139 }; return __func(_, this, arguments, NoteView_prototype_save__3, 0, __frame, function __$NoteView_prototype_save__3() { return (function __$NoteView_prototype_save__3(__then) {

          if ((__this.info.content !== __this.area.val())) {
            msg = ui.message("Savingâ€¦");
            return __this.info.setContent(__cb(_, __frame, 4, 8, function __$NoteView_prototype_save__3() {
              if (((typeof error !== "undefined") && (error !== null))) {
                return _(null, msg.html("Save failed!")); }
               else {
                return _(null, msg.html("Saved!")); } ; __then(); }, true), __this.area.val()); } else { __then(); } ; })(_); }); };




    return NoteView;

  })(InfoView);

  AsapListView = (function(_super) {

    __extends(AsapListView, _super);

    function AsapListView() {
      return AsapListView.__super__.constructor.apply(this, arguments); };


    AsapListView.registerView(/^asaplist:(.*)$/, AsapListView, function __1(_, match) { var __frame = { name: "__1", line: 164 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
        return model.cache.getInformation(__cb(_, __frame, 1, 30, function ___(__0, __2) { var __1 = ("ToDo List: " + (__2.name)); return _(null, __1); }, true), match[1]); }); });


    AsapListView.prototype.drawTitle = function() {
      return this.slot.setTitle(this.info.name); };


    AsapListView.prototype.drawContent = function AsapListView_prototype_drawContent__2(_) { var __this = this; var __frame = { name: "AsapListView_prototype_drawContent__2", line: 172 }; return __func(_, this, arguments, AsapListView_prototype_drawContent__2, 0, __frame, function __$AsapListView_prototype_drawContent__2() {
        __this.newname.val(__this.info.name);
        return model.Asap.getAllIDs(__cb(_, __frame, 2, 6, function __$AsapListView_prototype_drawContent__2() {
          return _(null, __this.list.setList(__this.info.asaps)); }, true)); }); };


    AsapListView.prototype.initContent = function() {
      var active, togglebutton, _this = this;

      this.contentNode.html(require("./template/asaplist")());
      this.contentNode.addClass("hideinactive");
      active = true;
      togglebutton = $("button[name=toggleshow]");
      togglebutton.click(function() {
        if (active) {
          active = false;
          togglebutton.html("Show only active");
          _this.contentNode.removeClass("hideinactive"); }
         else {
          active = true;
          togglebutton.html("Show all");
          _this.contentNode.addClass("hideinactive"); } ;

        return false; });

      this.newname = $("input[name=newname]", this.contentNode);
      $("form", this.contentNode).submit(function(ev) {
        ev.preventDefault();
        return _this.info.rename((function() {  }), _this.newname.val()); });

      new ui.AsapCreator($(".newtodo", this.contentNode), this.info);
      return this.list = new ui.InfoListManager($("tbody", this.contentNode), function(autocb, asap) {
        var create, deadlinePicker, delayPicker, delparent, descFlippable, descform, descinput, desclabel, donebox, entry, last, listPicker, project, refManager, set;
        entry = $(require("./template/listentry")());
        refManager = new ui.ReferenceList($(".refs", entry), asap);
        delayPicker = new ui.TimePicker($(".delay", entry), {
          name: "",
          change: function(date) {
            return asap.setDelay((function() {  }), date); } });


        deadlinePicker = new ui.TimePicker($(".deadline", entry), {
          name: "",
          change: function(date) {
            return asap.setDeadline((function() {  }), date); } });


        listPicker = new ui.ListPicker($("td.listsel", entry));
        listPicker.onChanged(function(list) {
          return asap.setList((function() {  }), list); });

        donebox = $("input[type=checkbox]", entry);
        donebox.click(function() {
          if (donebox.is(":checked")) {
            return asap.done((function() {  })); }
           else {
            return asap.undo((function() {  })); } ; });


        desclabel = $(".desc > span", entry);
        descform = $(".desc > form", entry);
        descinput = $(".desc > form > input", entry);
        descform.submit(function(ev) {
          return (function __1(_) { var __frame = { name: "__1", line: 235 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
              ev.preventDefault();
              return asap.setDescription(__cb(_, __frame, 2, 12, function __$__1() {
                return _(null, descFlippable.showFront()); }, true), descinput.val()); });
          })(); });

        descFlippable = new ui.Flippable(desclabel, descform, 0);
        descFlippable.addToggler(desclabel);
        last = $(".last", entry);
        create = $(".create", entry);
        project = $(".project", entry);
        new ui.DropArea(project, function __1(viewname, _) { var id, parent, _ref; var __frame = { name: "__1", line: 246 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) {

              if (((id = (((_ref = /project:(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
                return model.cache.getInformation(__cb(_, __frame, 3, 21, function ___(__0, __1) { parent = __1;
                  if ((parent != null)) {
                    return _(null, asap.setParent((function() {  }), parent)); } ; __then(); }, true), id); } else { __then(); } ; })(_); }); });



        $("td > button[name=delete]", entry).click(function() {
          if (confirm("Really delete?")) {
            return asap.setStatus((function() {  }), "delete"); } ; });


        delparent = function() {
          return asap.setParent((function() {  }), null); };

        asap.onChanged(set = function set__2(asap, _) { var parent; var __frame = { name: "set__2", line: 263 }; return __func(_, this, arguments, set__2, 1, __frame, function __$set__2() {

            if ((((asap.completed != null)) || !asap.active)) {
              entry.addClass("inactive"); }
             else {
              entry.removeClass("inactive"); } ;

            if ((((asap.completed == null)) && asap.overdue)) {
              $(".deadline", entry).addClass("overdue"); }
             else {
              $(".deadline", entry).removeClass("overdue"); } ;

            donebox.prop("checked", (asap.completed != null));
            desclabel.html(asap.description);
            descinput.val(asap.description);
            if ((asap.references != null)) {
              refManager.setList(asap.references); } ;

            return model.cache.getInformation(__cb(_, __frame, 18, 19, function ___(__0, __1) { parent = __1;
              project.html(((parent != null) ? ui.createInfoButton(parent, false, delparent) : ""));
              delayPicker.setDate(((asap.delay != null) ? new Date(asap.delay) : null));
              deadlinePicker.setDate(((asap.deadline != null) ? new Date(asap.deadline) : null));
              last.attr("x-time", asap.lastEdited);
              create.attr("x-time", asap.createdAt);
              return _(null, listPicker.sel(asap.asaplist)); }, true), asap.parent); }); });

        set(asap);
        return entry; }); };



    return AsapListView;

  })(InfoView);

  TaskList = (function(_super) {

    __extends(TaskList, _super);

    function TaskList(node) {
      TaskList.__super__.constructor.call(this, node, function(autocb, task) {
        var childrenList, collapsebutton, descFlippable, descform, descinput, desclabel, donebox, draw, drawboth, entry, listid;
        entry = $(require(("./template/" + task.type))());
        $("button[name=delete]", entry).click(function() {
          if (confirm("Really delete?")) {
            return task.setStatus((function() {  }), "delete"); } ; });


        donebox = $("input[name=completed]", entry);
        donebox.click(function() {
          if (donebox.prop("checked")) {
            return task.done((function() {  })); }
           else {
            return task.undo((function() {  })); } ; });


        switch (task.type) {
        case "project": collapsebutton = $("button.collapse", entry);
          collapsebutton.click(function(ev) {
            ev.preventDefault();
            if (task.collapsed) {
              return task.uncollapse((function() {
               })); } else {
              return task.collapse((function() {
               })); } ; }); childrenList = new TaskList($(".children", entry));


          desclabel = $("form > span.name", entry);
          descinput = $("form > input", entry);
          descform = $("form", entry);
          descform.submit(function(ev) {
            (function __1(_) {
              var __frame = { name: "__1", line: 335 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(__then) { if (descFlippable.flipped) {
                    return task.setDescription(__cb(_, __frame, 2, 18, __then, true), descinput.val());
                  } else { __then(); } ; })(function __$__1() { return _(null, descFlippable.toggle());

                }); }); })();
            return false;
          }); descFlippable = new ui.Flippable(desclabel, descinput);

          draw = function(project) {
            collapsebutton.html((project.collapsed ? ">" : "v"));
            childrenList.setList(((project.collapsed || ((project.children == null))) ? [] : project.children));
            desclabel.html(project.description);
            return descinput.val(project.description);
          }; new ui.DropArea($(".projecthandle", entry), function __1(viewname, _) {

            var child, id, _ref; var __frame = { name: "__1", line: 350 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) { if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {

                  return model.cache.getInformation(__cb(_, __frame, 3, 24, function ___(__0, __1) {
                    child = __1; return (function __$__1(__then) { if ((child != null)) {
                        return child.setParent(__cb(_, __frame, 5, 25, _, true), task);
                      } else { __then(); } ; })(__then); }, true), id); } else { __then(); } ; })(_); }); }); new ui.Emitter(desclabel).setViewName(("project:" + task.id));



          break;
        case "asap":
          $("span.description", entry).html(ui.createInfoButton(task));
          listid = null;
          draw = function draw__2(asap, _) {
            var list; var __frame = { name: "draw__2", line: 364 }; return __func(_, this, arguments, draw__2, 1, __frame, function __$draw__2() { return (function __$draw__2(__then) { if (((listid !== asap.asaplist) && ((asap.asaplist != null)))) {

                  listid = asap.asaplist;
                  return model.cache.getInformation(__cb(_, __frame, 4, 23, function ___(__0, __1) {
                    list = __1; return _(null, $("span.list", entry).html(ui.createInfoButton(list)));
                  }, true), listid); } else { __then(); } ; })(_); }); }; };



        drawboth = function(task) {
          donebox.prop("checked", (task.completed != null));
          if ((task.active && ((task.completed == null)))) {
            entry.removeClass("inactive"); }
           else {
            entry.addClass("inactive"); } ;

          if ((task.parent != null)) {
            return entry.addClass("hasparent"); }
           else {
            return entry.removeClass("hasparent"); } ; };


        task.onChanged(draw);
        task.onChanged(drawboth);
        draw(task);
        drawboth(task);
        return entry; }); };



    return TaskList;

  })(ui.InfoListManager);

  TaskView = (function(_super) {

    __extends(TaskView, _super);

    function TaskView() {
      return TaskView.__super__.constructor.apply(this, arguments); };


    TaskView.prototype.drawContent = function() {  };

    TaskView.prototype.initContent = function() {
      var active, togglebutton, _this = this;

      this.contentNode.html(require("./template/taskview")());
      this.contentNode.addClass("hideinactive");
      active = true;
      togglebutton = $("button[name=toggleshow]");
      togglebutton.click(function() {
        if (active) {
          active = false;
          togglebutton.html("Show only active");
          _this.contentNode.removeClass("hideinactive"); }
         else {
          active = true;
          togglebutton.html("Show all");
          _this.contentNode.addClass("hideinactive"); } ;

        return false; });

      new ui.DropArea($(".root", this.contentNode), function __1(viewname, _) { var id, _ref; var __frame = { name: "__1", line: 427 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) {

            if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {
              return model.cache.getInformation(__cb(_, __frame, 3, 16, function ___(__0, __1) { child(__1);
                if (!(((((typeof error !== "undefined") && (error !== null))) || (((typeof child === "undefined") || (child === null)))))) {
                  return _(null, child.setParent((function() {  }), null)); } ; __then(); }, true), id); } else { __then(); } ; })(_); }); });



      return new TaskList($(".tasklist", this.contentNode)).setList([this.info.id,]); };


    return TaskView;

  })(InfoView);

  ProjectView = (function(_super) {

    __extends(ProjectView, _super);

    function ProjectView() {
      return ProjectView.__super__.constructor.apply(this, arguments); };


    ProjectView.registerView(/^project:(.*)$/, ProjectView, function __1(_, match) { var __frame = { name: "__1", line: 451 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
        return model.cache.getInformation(__cb(_, __frame, 1, 28, function ___(__0, __2) { var __1 = ("Project: " + (__2.description)); return _(null, __1); }, true), match[1]); }); });


    ProjectView.prototype.drawTitle = function() {
      return this.slot.setTitle(("Project: " + this.info.description)); };


    return ProjectView;

  })(TaskView);

  AsapView = (function(_super) {

    __extends(AsapView, _super);

    function AsapView() {
      return AsapView.__super__.constructor.apply(this, arguments); };


    AsapView.registerView(/^asap:(.*)$/, AsapView, function __1(_, match) { var __frame = { name: "__1", line: 471 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
        return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) { var __1 = ("ToDo: " + (__2.description)); return _(null, __1); }, true), match[1]); }); });


    AsapView.prototype.drawTitle = function() {
      return this.slot.setTitle("To Do"); };


    return AsapView;

  })(InfoView);

  ProjectsView = (function(_super) {

    __extends(ProjectsView, _super);

    ProjectsView.registerView(/^projects$/, ProjectsView, function __1(_) { var __frame = { name: "__1", line: 487 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
        return _(null, "Projects"); }); });


    function ProjectsView(slot) {
      var active, creator, togglebutton, _this = this;

      this.slot = slot;
      this.contentNode = this.slot.getContentNode();
      this.slot.setTitle("Projects");
      this.contentNode.html(require("./template/taskview")());
      this.contentNode.append(creator = $("<div/>"));
      new ui.ProjectCreator(creator);
      this.contentNode.append(creator = $("<div/>"));
      new ui.AsapCreator(creator);
      this.contentNode.append(creator = $("<div/>"));
      new ui.AsapListCreator(creator);
      this.contentNode.addClass("hideinactive hidechildren");
      active = true;
      togglebutton = $("button[name=toggleshow]");
      togglebutton.click(function() {
        if (active) {
          active = false;
          togglebutton.html("Show only active");
          _this.contentNode.removeClass("hideinactive"); }
         else {
          active = true;
          togglebutton.html("Show all");
          _this.contentNode.addClass("hideinactive"); } ;

        return false; });

      this.projectList = new TaskList($(".tasklist", this.contentNode));
      new ui.DropArea($(".root", this.contentNode), function __1(viewname, _) { var child, id, _ref; var __frame = { name: "__1", line: 520 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) {

            if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {
              return model.cache.getInformation(__cb(_, __frame, 3, 18, function ___(__0, __1) { child = __1; return (function __$__1(__then) {
                  if ((child != null)) {
                    return child.setParent(__cb(_, __frame, 5, 19, _, true), null); } else { __then(); } ; })(__then); }, true), id); } else { __then(); } ; })(_); }); });



      model.Project.getAllIDs(catchNull(this.projectList.setList));
      model.Project.onChanged(this.projectList.setList); };


    ProjectsView.prototype["delete"] = function() {  };

    return ProjectsView;

  })(ui.View);

}).call(this);