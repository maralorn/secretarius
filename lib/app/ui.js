/*** Generated by streamline 0.4.6 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb; (function() {
  var AsapCreator, AsapListCreator, AsapListsList, DropArea, Emitter, Flippable, InfoClassListManager, InfoClassPicker, InfoList, InfoListManager, ListManager, ListPicker, NoteCreator, ProjectCreator, ProjectPicker, ReferenceList, Slot, SlotGenerator, TimePicker, Uploader, View, WindowSlotGenerator, createInfoButton, defaultTo, _this = this, __hasProp = {

  }.hasOwnProperty, __extends = function(child, parent) {
    for (var key in parent) { if (__hasProp.call(parent, key)) { child[key] = parent[key]; }; }; function ctor() { this.constructor = child; }; ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child;
  }, __indexOf = ([].indexOf || function(item) { for (var i = 0, l = this.length; (i < l); i++) { if (((i in this) && (this[i] === item))) { return i }; }; return -1; });

  exports.message = function(msg) {
    var lb, msgcontainer, msgnode;
    msgcontainer = $("#msgcontainer");
    (msgnode = $(require("./template/msg")({
      msg: msg
    }))).appendTo(msgcontainer);
    (lb = $("<br>")).appendTo(msgcontainer);
    msgnode.hide();
    msgnode.show(1000);
    setTimeout((function() {
      return msgnode.hide(1000, function() {
        msgnode.remove();
        return lb.remove(); });

    }), 5000);
    return msgnode; };


  exports.View = View = (function() {
    var _views;

    function View() {  };

    _views = [];

    View.registerView = function(regex, cls, label) {
      return _views.push({
        regex: regex,
        cls: cls,
        label: label }); };



    View.getLabel = function View_getLabel__1(_, viewname) { var params, row, _ref, __this = this; var __frame = { name: "View_getLabel__1", line: 41 }; return __func(_, this, arguments, View_getLabel__1, 0, __frame, function __$View_getLabel__1() {

        _ref = __this._find(viewname), row = _ref[0], params = _ref[1]; return (function __$View_getLabel__1(__then) {
          if (((((row != null) ? row.label : void 0)) != null)) {
            return row.label(__cb(_, __frame, 4, 15, _, true), params); } else {

            return _(null, viewname); } ; })(_); }); };



    View.create = function(viewname, slot) {
      var params, row, _ref;
      _ref = this._find(viewname), row = _ref[0], params = _ref[1];
      if ((row != null)) {
        return new row.cls(slot, params); } ; };



    View._find = function(viewname) {
      var params, row, _i, _len;
      for (_i = 0, _len = _views.length; (_i < _len); _i++) {
        row = _views[_i];
        params = row.regex.exec(viewname);
        if ((params != null)) {
          return [row,params,]; } ; };


      return [null,null,]; };


    View.test = function(viewname) {
      return (this._find(viewname)[0] != null); };


    return View;

  })();

  exports.DropArea = DropArea = (function() {

    function DropArea(contentNode, cb) {
      contentNode.bind("dragover", function(ev) {
        return ev.originalEvent.preventDefault(); });

      contentNode.bind("drop", function(ev) {
        ev.originalEvent.preventDefault();
        return cb(ev.originalEvent.dataTransfer.getData("text/plain")); }); };



    return DropArea;

  })();

  exports.Slot = Slot = (function() {

    function Slot(contentNode, titleNode) {
      var _this = this;
      this.contentNode = contentNode;
      this.titleNode = titleNode;
      this.clear = function() {
        return Slot.prototype.clear.apply(_this, arguments); };

      this.setView = function(viewname) {
        return Slot.prototype.setView.apply(_this, arguments); };

      this.emitter = new Emitter(this.getTitleNode());
      this.clear(); };


    Slot.prototype.setView = function(viewname) {
      if (View.test(viewname)) {
        this.clear();
        this.view = View.create(viewname, this);
        return this.emitter.setViewName(viewname); } ; };



    Slot.prototype.setTitle = function(title) {
      return this.getTitleNode().html(title); };


    Slot.prototype.setContent = function(html) {
      return this.getContentNode().html(html); };


    Slot.prototype.getContentNode = function() {
      return this.contentNode; };


    Slot.prototype.getTitleNode = function() {
      return this.titleNode; };


    Slot.prototype.clear = function() {
      var _ref;
      if (((_ref = this.view) != null)) {
        _ref["delete"](); } ;

      this.getContentNode().empty();
      return this.setTitle("Secretarius"); };


    return Slot;

  })();

  exports.Emitter = Emitter = (function() {

    function Emitter(node, slotGenerator) {
      var _ref, _this = this;

      this.node = node;
      this.slotGenerator = slotGenerator;
      if (((_ref = this.slotGenerator) == null)) {
        this.slotGenerator = SlotGenerator.getDefault(); } ;

      this.node.attr("draggable", "true");
      this.node.bind("dragstart", function(ev) {
        ev.originalEvent.dataTransfer.setData("text/plain", _this.getViewName());
        return ev.originalEvent.dataTransfer.setData("text/uri-list", ((("http://" + window.location.host) + "/") + (_this.getViewName()))); });

      this.node.click(function() {
        return _this.slotGenerator.show(_this.getViewName()); }); };



    Emitter.prototype.setViewName = function(viewName) {
      this.viewName = viewName; };


    Emitter.prototype.getViewName = function() {
      return this.viewName; };


    return Emitter;

  })();

  exports.SlotGenerator = SlotGenerator = (function() {
    var _default;

    function SlotGenerator() {  };

    _default = null;

    SlotGenerator.setDefault = function(generator) {
      return _default = generator; };


    SlotGenerator.getDefault = function() {
      return _default; };


    return SlotGenerator;

  })();

  exports.WindowSlotGenerator = WindowSlotGenerator = (function(_super) {

    __extends(WindowSlotGenerator, _super);

    function WindowSlotGenerator() {
      return WindowSlotGenerator.__super__.constructor.apply(this, arguments); };


    WindowSlotGenerator.prototype.show = function(viewname) {
      return window.open((("" + (document.URL.match(/https?:\/\/.*\//)[0])) + viewname), "", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,copyhistory=no"); };


    WindowSlotGenerator.setDefault(new WindowSlotGenerator);

    return WindowSlotGenerator;

  })(SlotGenerator);

  exports.Flippable = Flippable = (function() {

    function Flippable(front, back) {
      var _ref, _this = this;

      this.front = front;
      this.back = back;
      this.toggle = function() {
        return Flippable.prototype.toggle.apply(_this, arguments); };

      this.showFront = function() {
        return Flippable.prototype.showFront.apply(_this, arguments); };

      this.showBack = function() {
        return Flippable.prototype.showBack.apply(_this, arguments); };

      this.flipped = false;
      if (((_ref = this.back) != null)) {
        _ref.addClass("backside"); } ; };



    Flippable.prototype.showBack = function() {
      var _ref, _ref1;
      if (((_ref = this.front) != null)) {
        _ref.addClass("backside"); } ;

      return (((_ref1 = this.back) != null) ? _ref1.removeClass("backside") : void 0); };


    Flippable.prototype.showFront = function() {
      var _ref, _ref1;
      if (((_ref = this.front) != null)) {
        _ref.removeClass("backside"); } ;

      return (((_ref1 = this.back) != null) ? _ref1.addClass("backside") : void 0); };


    Flippable.prototype.toggle = function() {
      if (this.flipped = !this.flipped) {
        return this.showBack(); }
       else {
        return this.showFront(); } ; };



    Flippable.prototype.addToggler = function(toggler) {
      var _this = this;
      return toggler.click(function() {
        _this.toggle();
        return false; }); };



    return Flippable;

  })();

  exports.Uploader = Uploader = (function() {
    var defaults;

    defaults = {
      upload: function() {  },
      name: "File" };


    function Uploader(node, options) {
      var flip, links;
      this.node = node;
      this.options = ((options != null) ? options : { });
      defaultTo(this.options, defaults);
      this.node.html(require("./template/upload")(this.options));
      links = $("button", this.node);
      flip = new Flippable(links.first(), $("form", this.node));
      flip.addToggler(links); };


    return Uploader;

  })();

  exports.TimePicker = TimePicker = (function() {
    var defaults, units;

    units = {
      year: "FullYear",
      month: "Month",
      day: "Date",
      minute: "Minutes",
      hour: "Hours",
      second: "Seconds" };


    defaults = {
      change: function() {  },
      name: "Time" };


    function TimePicker(node, options) {
      var unit, _this = this;

      this.node = node;
      this.options = options;
      this.getDate = function() {
        return TimePicker.prototype.getDate.apply(_this, arguments); };

      this.save = function() {
        return TimePicker.prototype.save.apply(_this, arguments); };

      this.setDate = function(date) {
        _this.date = date;
        return TimePicker.prototype.setDate.apply(_this, arguments); };

      defaultTo(this.options, defaults);
      this.node.html(require("./template/timepicker")(this.options));
      this.node.addClass("timepicker");
      this.outerFlip = new Flippable($(".front", this.node), $(".back", this.node), 0);
      this.innerFlip = new Flippable($(".front > button", this.node), $(".front > span", this.node), 0);
      this.outerFlip.addToggler($("button", this.node));
      this.display = $("span.reltime", this.node);
      for (unit in units) {
        this[unit] = $((("input[name='" + unit) + "']"), this.node); };

      this.setDate(this.options.date);
      $("button[name=delete]", this.node).click(function() {
        _this.options.change(null);
        _this.setDate(null);
        return false; });

      $("button[name=save]", this.node).click(function() {
        _this.save();
        return false; }); };



    TimePicker.prototype.setDate = function(date) {
      var fn, unit, _results;
      this.date = date;
      date = this.date;
      if ((this.date != null)) {
        this.innerFlip.showBack(); }
       else {
        this.innerFlip.showFront();
        date = new Date; } ;

      this.display.attr("x-time", date);
      _results = [];
      for (unit in units) {
        fn = units[unit];
        _results.push(this[unit].val((date[("get" + fn)]() + (((unit === "month") ? 1 : 0))))); };

      return _results; };


    TimePicker.prototype.save = function() {
      var date, fn, unit;
      date = new Date;
      try {
        for (unit in units) {
          fn = units[unit];
          date[("set" + fn)]((this[unit].val() - (((unit === "month") ? 1 : 0)))); };

      } catch (error) {
        date = null; };

      this.options.change(date);
      return this.setDate(date); };


    TimePicker.prototype.getDate = function() {
      return this.date; };


    return TimePicker;

  })();

  exports.ListManager = ListManager = (function() {

    function ListManager(node, creator) {
      var _this = this;
      this.node = node;
      this.creator = creator;
      this.setList = function setList__1(_, list) { var __arguments = arguments; var __frame = { name: "setList__1", line: 400 }; return __func(_, this, arguments, setList__1, 0, __frame, function __$setList__1() {
          return _(null, ListManager.prototype.setList.apply(_this, __arguments)); }); };

      this.elements = { }; };


    ListManager.prototype.setList = function ListManager_prototype_setList__1(_, list) { var element, id, _i, _len, _ref, _results, __this = this; var __frame = { name: "ListManager_prototype_setList__1", line: 406 }; return __func(_, this, arguments, ListManager_prototype_setList__1, 0, __frame, function __$ListManager_prototype_setList__1() {

        _i = 0; _len = list.length; var __3 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$ListManager_prototype_setList__1() { __more = false; if (__3) { _i++; } else { __3 = true; } ; var __2 = (_i < _len); if (__2) {
              id = list[_i];
              if (!(!((id in __this.elements)))) { while (__more) { __loop(); }; __more = true; return; } ;


              return __this.creator(__cb(_, __frame, 7, 18, function ___(__0, __1) { element = __1;
                if (!((id in __this.elements))) {
                  __this.elements[id] = element;
                  if ((id === __this.select)) {
                    element.prop("selected", true); } ;

                  element.appendTo(__this.node); } ; while (__more) { __loop(); }; __more = true; }, true), id); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$ListManager_prototype_setList__1() {


          _ref = __this.elements;
          _results = [];
          for (id in _ref) {
            element = _ref[id];
            if (!((__indexOf.call(list, id) < 0))) {
              continue; } ;

            delete __this.elements[id];
            _results.push(element.remove()); };

          return _(null, _results); }); }); };


    return ListManager;

  })();

  exports.InfoListManager = InfoListManager = (function(_super) {

    __extends(InfoListManager, _super);

    function InfoListManager(node, creator) {
      InfoListManager.__super__.constructor.call(this, node, function __1(_, id) { var info; var __frame = { name: "__1", line: 444 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {

          return model.cache.getInformation(__cb(_, __frame, 2, 15, function ___(__0, __1) { info = __1; return (function __$__1(__then) {
              if ((info != null)) {
                return creator(__cb(_, __frame, 4, 17, _, true), info); } else { __then(); } ; })(_); }, true), id); }); }); };




    return InfoListManager;

  })(ListManager);

  exports.createInfoButton = createInfoButton = function(info, type, del) {
    var domnode, emitter, labelnode, setLabel;
    if ((type == null)) {
      type = false; } ;

    domnode = $(require("./template/infobutton")({
      del: (del != null) }));

    labelnode = $(".label", domnode);
    if ((del != null)) {
      $("button", domnode).click(function(ev) {
        ev.preventDefault();
        ev.stopPropagation();
        return del(info); }); } ;


    info.onChanged(setLabel = function setLabel__1(info, _) { var label; var __frame = { name: "setLabel__1", line: 473 }; return __func(_, this, arguments, setLabel__1, 1, __frame, function __$setLabel__1() {

        return exports.info2label(__cb(_, __frame, 2, 14, function ___(__0, __1) { label = __1;
          if (!type) {
            label = (label.split(":")).slice(1).join(":"); } ;

          return _(null, labelnode.html(label)); }, true), info); }); });

    setLabel(info);
    emitter = new Emitter(domnode);
    emitter.setViewName(exports.info2viewname(info));
    return domnode; };


  exports.InfoList = InfoList = (function(_super) {

    __extends(InfoList, _super);

    function InfoList(node, type, del) {
      if ((type == null)) {
        type = false; } ;

      InfoList.__super__.constructor.call(this, node, function(autocb, reference) {
        return createInfoButton(reference, type, del); }); };



    return InfoList;

  })(InfoListManager);

  exports.ReferenceList = ReferenceList = (function(_super) {

    __extends(ReferenceList, _super);

    function ReferenceList(node, info) {
      new DropArea(node, function __1(viewname, _) { var id, reference, _ref; var __frame = { name: "__1", line: 509 }; return __func(_, this, arguments, __1, 1, __frame, function __$__1() { return (function __$__1(__then) {

            if (((id = (((_ref = /^\w*:(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
              return model.cache.getInformation(__cb(_, __frame, 3, 22, function ___(__0, __1) { reference = __1; return (function __$__1(__then) {
                  if ((reference != null)) {
                    return info.addReference(__cb(_, __frame, 5, 19, _, true), reference); } else { __then(); } ; })(__then); }, true), id); } else { __then(); } ; })(_); }); });



      ReferenceList.__super__.constructor.call(this, node, true, function(reference) {
        return info.removeReference((function() {  }), reference); }); };



    return ReferenceList;

  })(InfoList);

  exports.InfoClassListManager = InfoClassListManager = (function(_super) {

    __extends(InfoClassListManager, _super);

    function InfoClassListManager(_, node, cls, creator) { var __this = this; var __frame = { name: "InfoClassListManager", line: 531 }; return __func(_, this, arguments, InfoClassListManager, 0, __frame, function __$InfoClassListManager() {
        InfoClassListManager.__super__.constructor.call(__this, node, creator);
        cls.onChanged(__this.setList);
        return cls.getAllIDs(__cb(_, __frame, 3, 19, function ___(__0, __1) { __this.setList(__1); _(); }, true)); }); };


    return InfoClassListManager;

  })(InfoListManager);

  exports.AsapListsList = AsapListsList = (function(_super) {

    __extends(AsapListsList, _super);

    function AsapListsList(node) {
      AsapListsList.__super__.constructor.call(this, node, model.AsapList, function(autocb, list) {
        var listnode;
        listnode = $((("<button>" + list.name) + "</button>"));
        list.onChanged(function(list) {
          return listnode.html(list.name); });

        new Emitter(listnode).setViewName(("asaplist:" + list.id));
        return listnode; }); };



    return AsapListsList;

  })(InfoClassListManager);

  exports.InfoClassPicker = InfoClassPicker = (function(_super) {

    __extends(InfoClassPicker, _super);

    function InfoClassPicker(node, cls, defaultoption, cb) {
      this.select = null;
      this.picker = $("<select />");
      node.append(this.picker);
      if ((defaultoption != null)) {
        this.picker.append($(new Option(defaultoption, ""))); } ;

      InfoClassPicker.__super__.constructor.call(this, this.picker, cls, cb); };


    InfoClassPicker.prototype.sel = function(id) {
      this.select = id;
      if ((id in this.elements)) {
        return this.elements[id].prop("selected", true); } ; };



    InfoClassPicker.prototype.getInfo = function InfoClassPicker_prototype_getInfo__1(_) { var __this = this; var __frame = { name: "InfoClassPicker_prototype_getInfo__1", line: 582 }; return __func(_, this, arguments, InfoClassPicker_prototype_getInfo__1, 0, __frame, function __$InfoClassPicker_prototype_getInfo__1() {
        return model.cache.getInformation(__cb(_, __frame, 1, 13, _, true), __this.picker.val()); }); };


    InfoClassPicker.prototype.onChanged = function InfoClassPicker_prototype_onChanged__2(_) { var __this = this; var __frame = { name: "InfoClassPicker_prototype_onChanged__2", line: 586 }; return __func(_, this, arguments, InfoClassPicker_prototype_onChanged__2, 0, __frame, function __$InfoClassPicker_prototype_onChanged__2() {
        return __this.picker.change(__cb(_, __frame, 1, 6, function __$InfoClassPicker_prototype_onChanged__2() {
          return __this.getInfo(__cb(_, __frame, 2, 13, _, true)); }, true)); }); };


    return InfoClassPicker;

  })(InfoClassListManager);

  exports.ProjectPicker = ProjectPicker = (function(_super) {

    __extends(ProjectPicker, _super);

    function ProjectPicker(node) {
      ProjectPicker.__super__.constructor.call(this, node, model.Project, "No Project", function __1(_, project) { var projectnode; var __frame = { name: "__1", line: 600 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {

          projectnode = $(new Option(project.description, project.id));
          project.onChanged(function(project) {
            return projectnode.html(project.description); });

          return _(null, projectnode); }); }); };



    return ProjectPicker;

  })(InfoClassPicker);

  exports.ListPicker = ListPicker = (function(_super) {

    __extends(ListPicker, _super);

    function ListPicker(node) {
      ListPicker.__super__.constructor.call(this, node, model.AsapList, null, function __1(_, list) { var listnode; var __frame = { name: "__1", line: 619 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() {

          listnode = $(new Option(list.name, list.id));
          list.onChanged(function(list) {
            return listnode.html(list.name); });

          return _(null, listnode); }); }); };



    return ListPicker;

  })(InfoClassPicker);

  exports.AsapListCreator = AsapListCreator = (function() {

    function AsapListCreator(node) {
      var list;
      node.html(require("./template/asaplistcreator")());
      list = $("input[name=list]", node);
      $("form[name=list]").submit(function(ev) {
        ev.preventDefault();
        return new model.AsapList().create((function(error) {
          if ((error == null)) {
            return list.val(""); } ;

        }), list.val()); }); };



    return AsapListCreator;

  })();

  exports.NoteCreator = NoteCreator = (function() {

    function NoteCreator(node) {
      var content;
      node.html(require("./template/notecreator")());
      content = $("input[name=note]", node);
      $("form[name=note]", node).submit(function(ev) {
        ev.preventDefault();
        return new model.Note().create((function(error) {
          if ((error == null)) {
            return content.val(""); } ;

        }), content.val()); }); };



    return NoteCreator;

  })();

  exports.AsapCreator = AsapCreator = (function() {

    function AsapCreator(node, list, project, reference) {
      var desc, form, listPicker, projectPicker, _this = this;

      this.list = ((list != null) ? list : null);
      this.project = ((project != null) ? project : null);
      this.reference = ((reference != null) ? reference : null);
      node.append(form = $(require("./template/asapcreator")({
        list: !((this.list != null)),
        project: !((this.project != null)) })));

      desc = $("input[name=asap]");
      projectPicker = new ProjectPicker($(".projectsel", node));
      listPicker = new ListPicker($(".listsel", node));
      form.submit(function() {
        (function __1(_) { var __frame = { name: "__1", line: 689 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(_) {
              var __1 = (_this.project != null); if (__1) { return _(null, _this.project); } ; return projectPicker.getInfo(__cb(_, __frame, 1, 60, _, true)); })(__cb(_, __frame, -688, 7, function ___(__0, __3) { project = __3; return (function __$__1(_) {
                var __2 = (_this.list != null); if (__2) { return _(null, _this.list); } ; return listPicker.getInfo(__cb(_, __frame, 2, 51, _, true)); })(__cb(_, __frame, -688, 7, function ___(__0, __4) { list = __4;
                return new model.Asap().create(__cb(_, __frame, 3, 10, function __$__1() {
                  return _(null, desc.val("")); }, true), desc.val(), list, _this.reference, project); }, true)); }, true)); });
        })();
        return false; }); };



    AsapCreator.prototype.setList = function(list) {
      this.list = list; };


    AsapCreator.prototype.setProject = function(project) {
      this.project = project; };


    AsapCreator.prototype.setReference = function(reference) {
      this.reference = reference; };


    return AsapCreator;

  })();

  exports.ProjectCreator = ProjectCreator = (function() {

    function ProjectCreator(node, parent, reference) {
      var desc, form, parentPicker, _this = this;

      this.node = node;
      this.parent = ((parent != null) ? parent : null);
      this.reference = ((reference != null) ? reference : null);
      node.append(form = $(require("./template/projectcreator")({
        parent: !((this.parent != null)) })));

      desc = $("input[name=project]");
      parentPicker = new ProjectPicker($(".parentpicker", node));
      form.submit(function() {
        (function __1(_) { var __frame = { name: "__1", line: 729 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(_) {
              var __1 = (_this.parent != null); if (__1) { return _(null, _this.parent); } ; return parentPicker.getInfo(__cb(_, __frame, 1, 57, _, true)); })(__cb(_, __frame, -728, 7, function ___(__0, __2) { parent = __2;
              return new model.Project().create(__cb(_, __frame, 2, 10, function __$__1() {
                return _(null, desc.val("")); }, true), desc.val(), _this.reference, parent); }, true)); });
        })();
        return false; }); };



    ProjectCreator.prototype.setParent = function(parent) {
      this.parent = parent; };


    ProjectCreator.prototype.setReference = function(reference) {
      this.reference = reference; };


    return ProjectCreator;

  })();

  exports.defaultTo = defaultTo = function(obj, defaults) {
    var key, value, _results;
    _results = [];
    for (key in defaults) {
      value = defaults[key];
      if ((obj[key] == null)) {
        _results.push(obj[key] = value); }
       else {
        _results.push(void 0); } ; };


    return _results; };


  exports.id2viewname = function exports_id2viewname__1(_, id) { var __frame = { name: "exports_id2viewname__1", line: 764 }; return __func(_, this, arguments, exports_id2viewname__1, 0, __frame, function __$exports_id2viewname__1() {
      return model.cache.getInformation(__cb(_, __frame, 1, 33, function ___(__0, __2) { var __1 = exports.info2viewname(__2); return _(null, __1); }, true), id); }); };


  exports.viewname2info = function exports_viewname2info__2(_, viewname) { var id, _ref; var __frame = { name: "exports_viewname2info__2", line: 768 }; return __func(_, this, arguments, exports_viewname2info__2, 0, __frame, function __$exports_viewname2info__2() { return (function __$exports_viewname2info__2(__then) {

        if (((id = (((_ref = /^\w*:(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
          return model.cache.getInformation(__cb(_, __frame, 3, 13, _, true), id); } else {

          return _(new Error(("No Infoview Name: " + viewname))); } ; })(_); }); };



  exports.info2label = function exports_info2label__3(_, info) { var __frame = { name: "exports_info2label__3", line: 777 }; return __func(_, this, arguments, exports_info2label__3, 0, __frame, function __$exports_info2label__3() {
      return exports.label(__cb(_, __frame, 1, 11, _, true), exports.info2viewname(info)); }); };


  exports.info2viewname = function(info) {
    return ((("" + info.type) + ":") + info.id); };


  exports.id2label = function exports_id2label__4(_, id) { var __frame = { name: "exports_id2label__4", line: 785 }; return __func(_, this, arguments, exports_id2label__4, 0, __frame, function __$exports_id2label__4() {
      return exports.id2viewname(__cb(_, __frame, 1, 4, function __$exports_id2label__4() {
        return exports.label(__cb(_, __frame, 2, 11, _, true), viewname); }, true), id); }); };


  exports.label = function exports_label__5(_, viewname) { var __frame = { name: "exports_label__5", line: 790 }; return __func(_, this, arguments, exports_label__5, 0, __frame, function __$exports_label__5() {
      return View.getLabel(__cb(_, __frame, 1, 11, _, true), viewname); }); };


  exports.inbox = require("./inbox");

  exports.slots = require("./slots");

  exports.info = require("./info");

  exports.main = require("./main");

}).call(this);