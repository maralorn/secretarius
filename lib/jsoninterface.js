// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var iced, __iced_k, __iced_k_noop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  iced = require('./myiced');

  iced.util.pollute(global);

  module.exports = function(app, model) {
    var Parser, afterOnPost, con, listfn, name, parser, pgCode, ref;
    Parser = (function() {

      function Parser() {
        this.parse = __bind(this.parse, this);        this.methods = [];
      }

      Parser.prototype.findGetter = function(filter, object) {
        var getter, name, string;
        string = ("get" + (filter != null ? filter : '')).toLowerCase();
        for (name in object) {
          getter = object[name];
          if (name.toLowerCase() === string) return getter;
        }
      };

      Parser.prototype.registerMethods = function() {
        var list;
        list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.methods = this.methods.concat(list);
      };

      Parser.prototype.findObject = func(function(autocb, req) {
        var cls, id, info, type, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        type = req.params.type;
        cls = model.getClassByType(type);
        id = req.params.id;
        if (type === 'inbox' || type === 'urgent' || type === 'maybe') {
          return __iced_k(model[type]);
        } else {
          (function(__iced_k) {
            if (cls != null) {
              (function(__iced_k) {
                if (model.UUID_REG.test(id)) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/jsoninterface.iced",
                      funcname: "Parser"
                    });
                    model.cache.getInformation(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return info = arguments[0];
                        };
                      })(),
                      lineno: 27
                    }), id);
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(info);
                  });
                } else {
                  return __iced_k(req.method === "POST" ? new cls : cls);
                }
              })(__iced_k);
            } else {
              return __iced_k(null);
            }
          })(__iced_k);
        }
      });

      Parser.prototype.findMethod = function(req, object) {
        switch (req.method) {
          case "GET":
            return this.findGetter(req.query.filter, object);
          case "POST":
            return object.create;
          case "PATCH":
            return object[req.body.method];
        }
      };

      Parser.prototype.parse = function(req, res, next) {
        var abort, args, error, handler, handlerobj, method, object, params, respond, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        if (req.accepts("json") == null) return next();
        debug(req.method, req.url, req.query, req.body);
        respond = function(code, msg) {
          return res.json(code, msg);
        };
        abort = function(error) {
          respond(500, {
            msg: "Internal Error",
            error: error
          });
          return debug(error);
        };
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced",
            funcname: "Parser.parse"
          });
          _this.findObject(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                error = arguments[0];
                return object = arguments[1];
              };
            })(),
            lineno: 58
          }), req);
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len, _ref;
          if (typeof error !== "undefined" && error !== null) return abort(error);
          if (object === null) return next();
          method = _this.findMethod(req, object);
          if (typeof error !== "undefined" && error !== null) return abort(error);
          handler = null;
          _ref = _this.methods;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            handlerobj = _ref[_i];
            if (handlerobj.method === method) handler = handlerobj;
          }
          if (handler == null) return next();
          (function(__iced_k) {
            if (handler.before != null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/jsoninterface.iced",
                  funcname: "Parser.parse"
                });
                handler.before(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      error = arguments[0];
                      return args = arguments[1];
                    };
                  })(),
                  lineno: 69
                }), req);
                __iced_deferrals._fulfill();
              })(function() {
                if (error != null) return abort(error);
                return __iced_k();
              });
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/jsoninterface.iced",
                funcname: "Parser.parse"
              });
              params = [
                __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      error = arguments[0];
                      return result = arguments[1];
                    };
                  })(),
                  lineno: 72
                })
              ];
              if (typeof args !== "undefined" && args !== null) {
                params = params.concat(args);
              }
              method.apply(object, params);
              __iced_deferrals._fulfill();
            })(function() {
              if ((handler.catcher != null) && (typeof error !== "undefined" && error !== null)) {
                error = handler.catcher(error);
              }
              if (error != null) return abort(error);
              (function(__iced_k) {
                if (handler.after != null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/jsoninterface.iced",
                      funcname: "Parser.parse"
                    });
                    handler.after(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          error = arguments[0];
                          return result = arguments[1];
                        };
                      })(),
                      lineno: 79
                    }), result);
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (error != null) return abort(error);
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(function() {
                return respond(200, typeof result !== "undefined" && result !== null ? result : {
                  msg: "success"
                });
              });
            });
          });
        });
      };

      return Parser;

    })();
    parser = new Parser;
    afterOnPost = function(cb, ans) {
      return cb(null, {
        id: ans
      });
    };
    pgCode = function(code) {
      return function(error) {
        if (!(error.msg === 'pgerror' && error.pgerror.code === code)) {
          return error;
        } else {
          return null;
        }
      };
    };
    parser.registerMethods({
      after: func(function(autocb, ans) {
        autocb({
          type: ans
        });
        return;
      }),
      method: model.Information.prototype.getType
    }, {
      before: func(function(autocb, req) {
        autocb([req.body.status]);
        return;
      }),
      method: model.Information.prototype.setStatus
    }, {
      before: ref = func(function(autocb, req) {
        var reference, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return reference = arguments[0];
              };
            })(),
            lineno: 98
          }), req.body.reference);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([reference]);
          return;
        });
      }),
      catcher: pgCode('23505'),
      method: model.Information.prototype.addReference
    }, {
      before: ref,
      method: model.Information.prototype.removeReference
    }, {
      before: function(cb, req) {
        return cb(null, [req.body.delay !== '' ? new Date(req.body.delay) : null]);
      },
      method: model.Information.prototype.setDelay
    }, {
      method: model.Information.getAllIDs
    }, {
      method: model.Information.getAll
    }, {
      before: con = func(function(autocb, req) {
        autocb([req.body.content]);
        return;
      }),
      after: afterOnPost,
      method: model.Note.prototype.create
    }, {
      before: con,
      method: model.Note.prototype.setContent
    }, {
      after: function(cb, ans) {
        return cb(null, ans != null ? {
          first: ans.id
        } : {
          msg: "inbox is empty"
        });
      },
      method: model.inbox.getFirst
    }, {
      after: func(function(autocb, ans) {
        autocb({
          size: ans
        });
        return;
      }),
      method: model.inbox.getSize
    }, {
      after: function(cb, ans) {
        var _ref;
        return cb(null, {
          size: ans.size,
          first: (_ref = ans.first) != null ? _ref.id : void 0
        });
      },
      method: model.inbox.get
    }, {
      method: model.Information.prototype.get
    }, {
      method: model.Task.prototype.done
    }, {
      method: model.Task.prototype.undo
    }, {
      before: func(function(autocb, req) {
        var parent, referencing, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return referencing = arguments[0];
              };
            })(),
            lineno: 137
          }), req.body.referencing);
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return parent = arguments[0];
              };
            })(),
            lineno: 138
          }), req.body.parent);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([req.body.description, referencing, parent]);
          return;
        });
      }),
      after: afterOnPost,
      method: model.Project.prototype.create
    }, {
      before: func(function(autocb, req) {
        autocb([req.body.deadline !== '' ? new Date(req.body.deadline) : null]);
        return;
      }),
      method: model.Task.prototype.setDeadline
    }, {
      before: func(function(autocb, req) {
        autocb([req.body.description]);
        return;
      }),
      method: model.Task.prototype.setDescription
    }, {
      before: func(function(autocb, req) {
        var parent, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return parent = arguments[0];
              };
            })(),
            lineno: 150
          }), req.body.parent);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([parent]);
          return;
        });
      }),
      method: model.Project.prototype.setParent
    }, {
      method: model.Project.prototype.collapse
    }, {
      method: model.Project.prototype.uncollapse
    }, {
      before: func(function(autocb, req) {
        var list, project, referencing, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return list = arguments[0];
              };
            })(),
            lineno: 160
          }), req.body.list);
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return referencing = arguments[0];
              };
            })(),
            lineno: 161
          }), req.body.referencing);
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return project = arguments[0];
              };
            })(),
            lineno: 162
          }), req.body.project);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([req.body.description, list, referencing, project]);
          return;
        });
      }),
      after: afterOnPost,
      method: model.Asap.prototype.create
    }, {
      before: func(function(autocb, req) {
        var project, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return project = arguments[0];
              };
            })(),
            lineno: 168
          }), req.body.project);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([project]);
          return;
        });
      }),
      method: model.Asap.prototype.setProject
    }, {
      before: listfn = func(function(autocb, req) {
        var list, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = autocb;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/jsoninterface.iced"
          });
          model.cache.getInformation(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return list = arguments[0];
              };
            })(),
            lineno: 173
          }), req.body.list);
          __iced_deferrals._fulfill();
        })(function() {
          autocb([list]);
          return;
        });
      }),
      method: model.Asap.prototype.setList
    }, {
      before: name = func(function(autocb, req) {
        autocb([req.body.name]);
        return;
      }),
      method: model.AsapList.prototype.create
    }, {
      before: name,
      method: model.AsapList.prototype.rename
    });
    app.all("/json/:type/:id", parser.parse);
    return app.all("/json/:type", parser.parse);
  };

}).call(this);
