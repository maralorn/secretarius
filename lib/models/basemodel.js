// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var InfoCache, ModelObject, iced, model, __iced_k, __iced_k_noop,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  model = exports;

  iced = require('../myiced');

  iced.util.pollute(typeof window !== "undefined" && window !== null ? window : global);

  model.UUID_REG = /[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/;

  model.getClassByType = function(type) {
    var class_, name;
    for (name in this) {
      class_ = this[name];
      if (name.toLowerCase() === type) return class_;
    }
  };

  model.extend = function(obj) {
    var key, value;
    for (key in obj) {
      value = obj[key];
      model[key] = value;
    }
    return model;
  };

  model.ModelObject = ModelObject = (function() {
    var cbs;

    function ModelObject() {}

    ModelObject.prototype.on = function(event, cb) {
      if (this._cbs == null) this._cbs = {};
      if (this._cbs[event] == null) this._cbs[event] = [];
      if (__indexOf.call(this._cbs[event], cb) < 0) {
        return this._cbs[event].push(cb);
      }
    };

    ModelObject.prototype.emit = function(event, data) {
      var cb, _i, _len, _ref, _ref1, _results;
      if (((_ref = this._cbs) != null ? _ref[event] : void 0) != null) {
        _ref1 = this._cbs[event];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          cb = _ref1[_i];
          _results.push(cb(data));
        }
        return _results;
      }
    };

    ModelObject.prototype.removeCb = function(event, cb) {
      var elem;
      this._cbs[event] = (function() {
        var _i, _len, _ref, _results;
        _ref = this._cbs[event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if (elem !== cb) _results.push(elem);
        }
        return _results;
      }).call(this);
      if (this._cbs[event] === []) delete this._cbs[event];
      return debug(event, "callback removed", this.constructor.name);
    };

    ModelObject.prototype.onChanged = function(cb) {
      return this.on("changed", cb);
    };

    ModelObject.prototype.onDeleted = function(cb) {
      return this.on("deleted", cb);
    };

    ModelObject.prototype.change = function(data) {
      return this.emit("changed", data);
    };

    ModelObject.prototype["delete"] = function() {
      return this.emit("deleted");
    };

    cbs = {};

    ModelObject.on = function(event, cb) {
      var obj;
      if (cbs[this.name] == null) cbs[this.name] = {};
      obj = cbs[this.name];
      if (obj[event] == null) obj[event] = [];
      if (__indexOf.call(obj[event], cb) < 0) return obj[event].push(cb);
    };

    ModelObject.emit = function(event, data) {
      var cb, _i, _len, _ref, _ref1, _results;
      if (((_ref = cbs[this.name]) != null ? _ref[event] : void 0) != null) {
        _ref1 = cbs[this.name][event];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          cb = _ref1[_i];
          _results.push(cb(data));
        }
        return _results;
      }
    };

    ModelObject.removeCb = function(event, cb) {
      var elem;
      cbs[this.name][event] = (function() {
        var _i, _len, _ref, _results;
        _ref = cbs[this.name][event];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          elem = _ref[_i];
          if (elem !== cb) _results.push(elem);
        }
        return _results;
      }).call(this);
      if (cbs[this.name][event] === []) delete cbs[this.name][event];
      return debug(event, "callback removed", this.name);
    };

    ModelObject.onChanged = function(cb) {
      return this.on("changed", cb);
    };

    ModelObject.onDeleted = function(cb) {
      return this.on("deleted", cb);
    };

    ModelObject.change = function(data) {
      return this.emit("changed", data);
    };

    return ModelObject;

  })();

  InfoCache = (function() {

    function InfoCache() {
      this.infos = {};
    }

    InfoCache.prototype.registerInfo = function(info) {
      return this.infos[info.id] = info;
    };

    InfoCache.prototype["delete"] = function(id) {
      if (this.infos[id] != null) {
        this.infos[id]["delete"]();
        return this.unregisterInfo(this.infos[id]);
      }
    };

    InfoCache.prototype.unregisterInfo = function(info) {
      if ((info.id != null) && (this.infos[info.id] != null)) {
        return delete this.infos[info.id];
      }
    };

    InfoCache.prototype.updateInfo = function(values) {
      return this.storeInfo(values, true);
    };

    InfoCache.prototype.storeInfo = function(values, mustExist) {
      var info;
      if (mustExist == null) mustExist = false;
      if (!(((info = this.infos[values.id]) != null) || mustExist)) {
        info = new (model.getClassByType(values.type))(values.id);
        this.registerInfo(info);
      }
      return info != null ? info._store(values) : void 0;
    };

    InfoCache.prototype.getInformation = singlify(func(function(autocb, id) {
      var values, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if ((id != null) && model.UUID_REG.test(id)) {
        (function(__iced_k) {
          if (_this.infos[id] == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/models/basemodel.iced",
                funcname: "InfoCache"
              });
              new model.Information(id).get(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return values = arguments[0];
                  };
                })(),
                lineno: 103
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(_this.storeInfo(values));
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return __iced_k(_this.infos[id]);
        });
      } else {
        return __iced_k(null);
      }
    }));

    return InfoCache;

  })();

  model.cache = new InfoCache;

}).call(this);
