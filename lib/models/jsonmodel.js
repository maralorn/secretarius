// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var Account, Appointment, Asap, AsapList, Circle, Communication, Communicator, Contact, Daemon, File, Inbox, Information, Maybe, Message, Note, PGObject, Place, Presence, Project, Protocol, Resource, Room, Server, SocialEntity, Task, Urgent, UserAccount, getInfos, iced, model, port, updatecb, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  module.exports = model = require("basemodel");

  iced = require('myiced');

  iced.util.pollute(window);

  updatecb = function(event) {
    var data;
    data = event.data.data;
    switch (event.data.name) {
      case 'changed':
        return model.cache.updateInfo(data);
      case 'inbox':
        return model.inbox._store((function() {}), data);
      case 'deleted':
        model.cache["delete"](data.id);
        return model.getClassByType(data.type).deleted(data.id);
      case 'new':
        return model.getClassByType(data.type)["new"](data.id);
    }
  };

  port = new SharedWorker('worker.js').port;

  port.addEventListener('message', updatecb);

  port.start();

  getInfos = function(cb, cls, filter, params) {
    if (params == null) params = {};
    params.filter = filter;
    return new cls()._get((function(error, list) {
      var values, _i, _len;
      if (error == null) {
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          values = list[_i];
          model.cache.storeInfo(values);
        }
      }
      return cb(error, list);
    }), params);
  };

  PGObject = (function(_super) {

    __extends(PGObject, _super);

    function PGObject(id) {
      this.id = id;
    }

    PGObject.prototype._get = function(cb, data, url) {
      return this._call(cb, "get", data, url);
    };

    PGObject.prototype._put = function(cb, data, url) {
      return this._call(cb, "put", data, url);
    };

    PGObject.prototype._delete = function(cb, url) {
      return this._call(cb, "delete", url);
    };

    PGObject.prototype._patch = function(cb, data, url) {
      return this._call(cb, "patch", data, url);
    };

    PGObject.prototype._post = function(cb, data, url) {
      return this._call(cb, "post", data, url);
    };

    PGObject.prototype._call = function(cb, type, data, url) {
      var answer, request, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/models/jsonmodel.iced",
          funcname: "PGObject._call"
        });
        request = {
          url: url != null ? url : _this._url(),
          type: type,
          success: __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return answer = arguments[0];
              };
            })(),
            lineno: 54
          }),
          dataType: "json"
        };
        if (data != null) request.data = data;
        console.log("" + (type.toUpperCase()) + " " + request.url + " (" + (data != null ? JSON.stringify(data) : "") + ")");
        $.ajax(request);
        __iced_deferrals._fulfill();
      })(function() {
        return cb(null, answer);
      });
    };

    return PGObject;

  })(model.ModelObject);

  Information = (function(_super) {
    var ids;

    __extends(Information, _super);

    function Information(id) {
      var tempType;
      this.id = id;
      tempType = this.constructor.name.toLowerCase();
      if (tempType !== "information") this.type = tempType;
    }

    Information.prototype._create = function(cb, args) {
      var ans, error, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/models/jsonmodel.iced",
          funcname: "Information._create"
        });
        _this._post(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              error = arguments[0];
              return ans = arguments[1];
            };
          })(),
          lineno: 67
        }), args);
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof error !== "undefined" && error !== null) {
          cb(error);
          return;
        }
        cb(null, _this.id = ans.id);
        return model.cache.registerInfo(_this);
      });
    };

    Information.prototype.addReference = function(cb, reference) {
      return this._patch(cb, {
        method: "addReference",
        reference: reference.id
      });
    };

    Information.prototype.removeReference = function(cb, reference) {
      return this._patch(cb, {
        method: "removeReference",
        reference: reference.id
      });
    };

    Information.prototype.getType = function(cb) {
      var error, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.type == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/models/jsonmodel.iced",
              funcname: "Information.getType"
            });
            _this._get(cb, {
              filter: "type"
            }, __iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  error = arguments[0];
                  return __slot_1.type = arguments[1].type;
                };
              })(_this),
              lineno: 87
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(error, _this.type);
      });
    };

    Information.prototype.get = function(cb) {
      var error, values, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.values == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/models/jsonmodel.iced",
              funcname: "Information.get"
            });
            _this._get(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  error = arguments[0];
                  return values = arguments[1];
                };
              })(),
              lineno: 91
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof error !== "undefined" && error !== null) {
              cb(error);
              return;
            }
            return __iced_k(_this._store(values));
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(null, _this.values);
      });
    };

    Information.prototype.setStatus = function(cb, status) {
      return this._patch(cb, {
        method: "setStatus",
        status: status
      });
    };

    Information.prototype.setDelay = function(cb, delay) {
      return this._patch(cb, {
        method: "setDelay",
        delay: delay
      });
    };

    Information.prototype.attach = function(cb, file) {
      return this._patch(cb, {
        method: "attach",
        file: file.id
      });
    };

    Information.prototype.detach = function(cb, file) {
      return this._patch(cb, {
        method: "detach",
        file: file.id
      });
    };

    Information.prototype.getReferences = function(cb) {
      return this._get(cb, {
        filter: "references"
      });
    };

    Information.prototype._url = function() {
      return "" + (this.type != null ? this.type : "information") + (this.id != null ? "/" + this.id : "");
    };

    Information.prototype._store = function(values) {
      var key, value;
      this.values = values;
      for (key in values) {
        value = values[key];
        this[key] = value;
      }
      return this.change(values);
    };

    Information.getAll = singlify(func(function(autocb) {
      var all, info, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/models/jsonmodel.iced",
          funcname: "Information"
        });
        getInfos(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return all = arguments[0];
            };
          })(),
          lineno: 128
        }), _this, 'all');
        __iced_deferrals._fulfill();
      })(function() {
        autocb(ids[_this.name] = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = all.length; _i < _len; _i++) {
            info = all[_i];
            _results.push(info.id);
          }
          return _results;
        })());
        return;
      });
    }));

    ids = [];

    Information.getAllIDs = singlify(func(function(autocb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (ids[_this.name] == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/models/jsonmodel.iced",
              funcname: "Information"
            });
            _this.getAll(__iced_deferrals.defer({
              lineno: 134
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        autocb(ids[_this.name]);
        return;
      });
    }));

    Information["new"] = function(id) {
      if (ids[this.name]) {
        ids[this.name].push(id);
        return this.change(ids[this.name]);
      }
    };

    Information.deleted = function(id) {
      var i;
      if (ids[this.name]) {
        ids[this.name] = (function() {
          var _i, _len, _ref, _results;
          _ref = ids[this.name];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            if (i !== id) _results.push(i);
          }
          return _results;
        }).call(this);
        return this.change(ids[this.name]);
      }
    };

    return Information;

  })(PGObject);

  File = (function(_super) {

    __extends(File, _super);

    function File() {
      return File.__super__.constructor.apply(this, arguments);
    }

    File.prototype.create = function(name) {};

    File.prototype.getName = function() {};

    File.prototype["delete"] = function() {};

    return File;

  })(PGObject);

  Note = (function(_super) {

    __extends(Note, _super);

    function Note() {
      return Note.__super__.constructor.apply(this, arguments);
    }

    Note.prototype.create = function(cb, content) {
      return this._create(cb, {
        content: content
      });
    };

    Note.prototype.setContent = function(cb, content) {
      return this._patch(cb, {
        method: "setContent",
        content: content
      });
    };

    return Note;

  })(Information);

  Task = (function(_super) {

    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.prototype.done = function(cb) {
      return this._patch(cb, {
        method: 'done'
      });
    };

    Task.prototype.undo = function(cb) {
      return this._patch(cb, {
        method: 'undo'
      });
    };

    Task.prototype.setParent = function(cb, parent) {
      return this._patch(cb, {
        parent: parent != null ? parent.id : void 0,
        method: 'setParent'
      });
    };

    Task.prototype.setDeadline = function(cb, deadline) {
      return this._patch(cb, {
        method: "setDeadline",
        deadline: deadline
      });
    };

    Task.prototype.setDescription = function(cb, description) {
      return this._patch(cb, {
        method: "setDescription",
        description: description
      });
    };

    return Task;

  })(Information);

  Project = (function(_super) {

    __extends(Project, _super);

    function Project() {
      return Project.__super__.constructor.apply(this, arguments);
    }

    Project.prototype.create = function(cb, description, referencing, parent) {
      if (referencing == null) referencing = null;
      if (parent == null) parent = null;
      return this._create(cb, {
        description: description,
        referencing: referencing != null ? referencing.id : void 0,
        parent: parent != null ? parent.id : void 0
      });
    };

    Project.prototype.collapse = function(cb) {
      return this._patch(cb, {
        method: 'collapse'
      });
    };

    Project.prototype.uncollapse = function(cb) {
      return this._patch(cb, {
        method: 'uncollapse'
      });
    };

    return Project;

  })(Task);

  Asap = (function(_super) {

    __extends(Asap, _super);

    function Asap() {
      return Asap.__super__.constructor.apply(this, arguments);
    }

    Asap.prototype.create = function(cb, description, list, referencing, project) {
      if (referencing == null) referencing = null;
      if (project == null) project = null;
      return this._create(cb, {
        description: description,
        list: list.id,
        referencing: referencing != null ? referencing.id : void 0,
        project: project != null ? project.id : void 0
      });
    };

    Asap.prototype.setList = function(cb, list) {
      return this._patch(cb, {
        list: list.id,
        method: 'setList'
      });
    };

    return Asap;

  })(Task);

  AsapList = (function(_super) {

    __extends(AsapList, _super);

    function AsapList() {
      return AsapList.__super__.constructor.apply(this, arguments);
    }

    AsapList.prototype.create = function(cb, name) {
      return this._create(cb, {
        name: name
      });
    };

    AsapList.prototype.rename = function(cb, name) {
      return this._patch(cb, {
        method: "rename",
        name: name
      });
    };

    return AsapList;

  })(Information);

  SocialEntity = (function(_super) {

    __extends(SocialEntity, _super);

    function SocialEntity() {
      return SocialEntity.__super__.constructor.apply(this, arguments);
    }

    SocialEntity.prototype.create = function() {};

    return SocialEntity;

  })(Information);

  Circle = (function(_super) {

    __extends(Circle, _super);

    function Circle() {
      return Circle.__super__.constructor.apply(this, arguments);
    }

    Circle.prototype.create = function(name) {};

    Circle.getByName = function(name) {};

    Circle.prototype.rename = function(name) {};

    return Circle;

  }).call(this, SocialEntity);

  Contact = (function(_super) {

    __extends(Contact, _super);

    function Contact() {
      return Contact.__super__.constructor.apply(this, arguments);
    }

    Contact.prototype.create = function(nameMap) {};

    Contact.prototype.setValues = function(nameMap) {};

    Contact.prototype.addAccount = function(account, description, priority) {
      if (description == null) description = null;
      if (priority == null) priority = 0;
    };

    Contact.prototype.removeAccount = function(account) {};

    Contact.prototype.addAddress = function(place, description) {
      if (description == null) description = null;
    };

    Contact.prototype.removeAddress = function(place) {};

    Contact.prototype.enterCircle = function(circle) {};

    Contact.prototype.leaveCircle = function(circle) {};

    return Contact;

  })(SocialEntity);

  Place = (function(_super) {

    __extends(Place, _super);

    function Place() {
      return Place.__super__.constructor.apply(this, arguments);
    }

    Place.prototype.create = function(valueMap) {};

    Place.prototype.setValues = function(valueMap) {};

    Place.prototype.setParent = function(place) {};

    Place.prototype.removeParent = function() {};

    return Place;

  })(Information);

  Appointment = (function(_super) {

    __extends(Appointment, _super);

    function Appointment() {
      return Appointment.__super__.constructor.apply(this, arguments);
    }

    Appointment.prototype.create = function(description, date, time, length, referencing) {
      if (time == null) time = null;
      if (length == null) length = null;
      if (referencing == null) referencing = null;
    };

    Appointment.prototype.setValues = function(valueMap) {};

    Appointment.prototype.setPlace = function(place) {};

    Appointment.prototype.addException = function(appointment, exceptionMove) {
      if (exceptionMove == null) exceptionMove = 'no';
    };

    Appointment.prototype.removeException = function(appointment) {};

    Appointment.prototype.addFilter = function(type, value) {};

    Appointment.prototype.removeFilter = function(type, value) {};

    Appointment.prototype.addParticipant = function(participant) {};

    Appointment.prototype.removeParticipant = function(participant) {};

    return Appointment;

  })(Information);

  Protocol = (function(_super) {

    __extends(Protocol, _super);

    function Protocol() {
      return Protocol.__super__.constructor.apply(this, arguments);
    }

    Protocol.find = function(name) {};

    Protocol.prototype["delete"] = function() {};

    return Protocol;

  })(PGObject);

  Server = (function(_super) {

    __extends(Server, _super);

    function Server() {
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.find = function(name, protocol) {};

    Server.prototype["delete"] = function() {};

    return Server;

  })(PGObject);

  Communicator = (function(_super) {

    __extends(Communicator, _super);

    function Communicator() {
      return Communicator.__super__.constructor.apply(this, arguments);
    }

    Communicator.prototype.create = function(username, server) {};

    Communicator.prototype.changeServer = function(server) {};

    Communicator.prototype.setValues = function(valueMap) {};

    return Communicator;

  })(Information);

  Account = (function(_super) {

    __extends(Account, _super);

    function Account() {
      return Account.__super__.constructor.apply(this, arguments);
    }

    Account.prototype.create = function(username, server) {};

    Account.find = function(username, server) {};

    Account.prototype.join = function(room, role) {
      if (role == null) role = null;
    };

    Account.prototype.leave = function(room, role) {
      if (role == null) role = null;
    };

    return Account;

  })(Communicator);

  UserAccount = (function(_super) {

    __extends(UserAccount, _super);

    function UserAccount() {
      return UserAccount.__super__.constructor.apply(this, arguments);
    }

    UserAccount.prototype.setValues = function() {};

    UserAccount.prototype.create = function(account) {};

    UserAccount.prototype.downGrade = function() {};

    UserAccount.getAll = function() {};

    return UserAccount;

  })(Account);

  Room = (function(_super) {

    __extends(Room, _super);

    function Room() {
      return Room.__super__.constructor.apply(this, arguments);
    }

    Room.prototype.create = function(name) {};

    Room.prototype.setMOTD = function(motd) {};

    return Room;

  })(Communicator);

  Communication = (function(_super) {

    __extends(Communication, _super);

    function Communication() {
      return Communication.__super__.constructor.apply(this, arguments);
    }

    Communication.prototype.create = function(from, time) {
      if (time == null) time = new Date();
    };

    Communication.prototype.setSender = function(from) {};

    Communication.prototype.setTime = function(time) {
      if (time == null) time = new Date();
    };

    Communication.prototype.send = function() {};

    Communication.prototype.sent = function() {};

    Communication.prototype.draft = function() {};

    Communication.prototype.addRecipient = function(recipient, mode, resource) {
      if (resource == null) resource = null;
    };

    Communication.prototype.removeRecipient = function(recipient, mode) {};

    Communication.prototype.getToSend = function(from) {};

    return Communication;

  })(Information);

  Message = (function(_super) {

    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.prototype.create = function(from, subject, body, time) {
      if (subject == null) subject = null;
      if (body == null) body = null;
      if (time == null) time = new Date();
    };

    Message.prototype.setValues = function(valueMap) {};

    return Message;

  })(Communication);

  Presence = (function(_super) {

    __extends(Presence, _super);

    function Presence() {
      return Presence.__super__.constructor.apply(this, arguments);
    }

    Presence.prototype.create = function(from, time) {
      if (time == null) time = new Date();
    };

    Presence.prototype.addResource = function(resource) {};

    return Presence;

  })(Communication);

  Resource = (function(_super) {

    __extends(Resource, _super);

    function Resource() {
      return Resource.__super__.constructor.apply(this, arguments);
    }

    Resource.prototype.create = function(name, status, message) {};

    Resource.prototype["delete"] = function() {};

    return Resource;

  })(PGObject);

  Daemon = (function(_super) {

    __extends(Daemon, _super);

    function Daemon() {
      return Daemon.__super__.constructor.apply(this, arguments);
    }

    Daemon.prototype.registrate = function(name, status) {};

    Daemon.prototype.setStatus = function(status) {};

    Daemon.prototype.setMessage = function(message) {};

    Daemon.prototype.deregistrate = function() {};

    Daemon.getAll = function() {};

    return Daemon;

  })(PGObject);

  Maybe = (function(_super) {

    __extends(Maybe, _super);

    function Maybe() {
      return Maybe.__super__.constructor.apply(this, arguments);
    }

    Maybe.prototype.getSize = function() {};

    Maybe.prototype.getList = function() {};

    return Maybe;

  })(PGObject);

  Inbox = (function(_super) {

    __extends(Inbox, _super);

    function Inbox() {
      return Inbox.__super__.constructor.apply(this, arguments);
    }

    Inbox.prototype.getSize = func(function(autocb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/models/jsonmodel.iced",
          funcname: "Inbox"
        });
        _this.get(__iced_deferrals.defer({
          lineno: 333
        }));
        __iced_deferrals._fulfill();
      })(function() {
        autocb(_this.values.size);
        return;
      });
    });

    Inbox.prototype.getFirst = func(function(autocb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/models/jsonmodel.iced",
          funcname: "Inbox"
        });
        _this.get(__iced_deferrals.defer({
          lineno: 337
        }));
        __iced_deferrals._fulfill();
      })(function() {
        autocb(_this.values.first);
        return;
      });
    });

    Inbox.prototype.get = singlify(func(function(autocb) {
      var res, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        if (_this.values == null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/models/jsonmodel.iced",
              funcname: "Inbox"
            });
            _this._get(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return res = arguments[0];
                };
              })(),
              lineno: 342
            }), null, "inbox");
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/models/jsonmodel.iced",
                funcname: "Inbox"
              });
              _this._store(__iced_deferrals.defer({
                lineno: 343
              }), res);
              __iced_deferrals._fulfill();
            })(__iced_k);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        autocb(_this.values);
        return;
      });
    }));

    Inbox.prototype._store = func(function(autocb, values) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.values = values;
      (function(__iced_k) {
        if (_this.values.first != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/models/jsonmodel.iced",
              funcname: "Inbox"
            });
            model.cache.getInformation(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1.first = arguments[0];
                };
              })(_this.values),
              lineno: 347
            }), _this.values.first);
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        autocb(_this.change(_this.values));
        return;
      });
    });

    return Inbox;

  })(PGObject);

  Urgent = (function(_super) {

    __extends(Urgent, _super);

    function Urgent() {
      return Urgent.__super__.constructor.apply(this, arguments);
    }

    Urgent.prototype.getSize = function() {};

    Urgent.prototype.getList = function() {};

    return Urgent;

  })(PGObject);

  model.extend({
    File: File,
    Note: Note,
    Asap: Asap,
    Task: Task,
    Information: Information,
    Project: Project,
    AsapList: AsapList,
    Circle: Circle,
    Contact: Contact,
    Place: Place,
    Appointment: Appointment,
    Protocol: Protocol,
    Server: Server,
    Account: Account,
    Room: Room,
    Message: Message,
    Presence: Presence,
    Resource: Resource,
    inbox: new Inbox,
    maybe: new Maybe,
    urgent: new Urgent
  });

}).call(this);
