// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var KEEPMSGS, TIMEOUT, iced, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  KEEPMSGS = 500;

  TIMEOUT = 119000;

  iced = require('./myiced');

  iced.util.pollute(global);

  module.exports = function(app, model) {
    var NotifyClient, SimpleNotifyClient, Socket, changedclient, deletedclient, inboxclient, newclient, sockets;
    sockets = 0;
    Socket = (function() {

      function Socket(req, res) {
        var empty,
          _this = this;
        this.req = req;
        this.res = res;
        debug(++sockets, 'sockets attached. (++)');
        this.clients = [];
        this.req.socket.setTimeout(Infinity);
        this.res.writeHead(200, {
          "Content-Type": "text/event-stream",
          "Cache-Control": "no-cache",
          "Connection": "keep-alive"
        });
        (empty = function() {
          if (_this.res != null) {
            _this.res.write(":\n");
            return setTimeout(empty, TIMEOUT);
          }
        })();
        this.req.on("close", function() {
          var client, _i, _len, _ref, _results;
          _this.res = null;
          debug(--sockets, 'sockets attached. (--)');
          _ref = _this.clients;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            client = _ref[_i];
            _results.push(client.deregisterSocket(_this));
          }
          return _results;
        });
      }

      Socket.prototype.addClient = function(client) {
        client.registerSocket(this);
        this.clients.push(client);
        return this;
      };

      Socket.prototype.send = function(event) {
        return this.res.write(event);
      };

      Socket.prototype.lastId = function() {
        return this.req.get("Last-Event-Id");
      };

      return Socket;

    })();
    NotifyClient = (function() {

      function NotifyClient(name) {
        this.name = name;
        this.messageCount = 0;
        this.messages = {};
        this.sockets = [];
      }

      NotifyClient.prototype.submit = function(data) {
        var event, socket, _i, _len, _ref;
        this.messageCount++;
        this.messages[this.messageCount] = event = "event: " + this.name + "\nid: " + this.messageCount + "\ndata: " + data + "\n\n";
        _ref = this.sockets;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          socket = _ref[_i];
          socket.send(event);
        }
        if (this.messageCount > KEEPMSGS) {
          return delete (this.messages[this.messageCount - KEEPMSGS] != null);
        }
      };

      NotifyClient.prototype.registerSocket = function(socket) {
        var message;
        if (((message = socket.lastId) != null) && message in this.messages) {
          while (message <= this.messageCount) {
            socket.send(this.messages[message++]);
          }
        }
        return this.sockets.push(socket);
      };

      NotifyClient.prototype.deregisterSocket = function(socket) {
        var sock;
        return this.sockets = (function() {
          var _i, _len, _ref, _results;
          _ref = this.sockets;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sock = _ref[_i];
            if (sock !== socket) _results.push(sock);
          }
          return _results;
        }).call(this);
      };

      return NotifyClient;

    })();
    SimpleNotifyClient = (function(_super) {

      __extends(SimpleNotifyClient, _super);

      function SimpleNotifyClient(event, callback) {
        var _this = this;
        SimpleNotifyClient.__super__.constructor.call(this, event);
        model.listen(event, function(error, msg) {
          var data, error, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          if (error != null) {
            debug(error);
            return;
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/sse.iced"
            });
            callback(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  error = arguments[0];
                  return data = arguments[1];
                };
              })(),
              lineno: 66
            }), msg.payload);
            __iced_deferrals._fulfill();
          })(function() {
            if (error != null) {
              debug(error);
              return;
            }
            return _this.submit(data);
          });
        });
      }

      return SimpleNotifyClient;

    })(NotifyClient);
    changedclient = new SimpleNotifyClient('changed', func(function(autocb, msg) {
      var info, values, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sse.iced"
        });
        model.cache.getInformation(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return info = arguments[0];
            };
          })(),
          lineno: 71
        }), msg);
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/sse.iced"
          });
          info.get(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return values = arguments[0];
              };
            })(),
            lineno: 73
          }));
          __iced_deferrals._fulfill();
        })(function() {
          autocb(JSON.stringify(values));
          return;
        });
      });
    }));
    newclient = new SimpleNotifyClient('new', func(function(autocb, msg) {
      autocb(msg);
      return;
    }));
    deletedclient = new SimpleNotifyClient('deleted', func(function(autocb, msg) {
      autocb(msg);
      return;
    }));
    inboxclient = new SimpleNotifyClient('inbox', func(function(autocb, msg) {
      var answer, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = autocb;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/sse.iced"
        });
        model.inbox.get(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return answer = arguments[0];
            };
          })(),
          lineno: 81
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _ref;
        autocb(JSON.stringify({
          size: answer.size,
          first: (_ref = answer.first) != null ? _ref.id : void 0
        }));
        return;
      });
    }));
    return app.get('/sseupdate', function(req, res) {
      return new Socket(req, res).addClient(changedclient).addClient(inboxclient).addClient(newclient).addClient(deletedclient);
    });
  };

}).call(this);
