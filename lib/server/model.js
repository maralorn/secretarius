/*** Generated by streamline 0.4.7 (fibers) - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) { (function() {
  var crypto, hash, pg, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  pg = require('pg')["native"];

  crypto = require('crypto');

  util = require('libsecretarius').util;

  hash = function(key) {
    return crypto.createHash('md5').update(key).digest('base64');
  };

  module.exports = function(connectionString) {
    var Inbox, Transaction, getClient, model, query, queryMany, queryNone, queryOne, _ref, _ref1, _ref2, _ref3, _ref4;

    model = {};
    getClient = function(cb) {
      return pg.connect(connectionString, function(error, client, done) {
        return cb(error, {
          client: client,
          done: done
        });
      });
    };
    model.listen = fstreamline__.create(function(channel, cb, _) {
      var client;

      client = fstreamline__.invoke(null, getClient, [_], 0).client;
      client.on('notification', cb);
      return client.query("LISTEN " + channel + ";");
    }, 2);
    Transaction = (function() {
      function Transaction(_) {
        var _ref;

        _ref = fstreamline__.invoke(null, getClient, [_], 0), this.client = _ref.client, this.done = _ref.done;
        fstreamline__.invoke(this.client, "query", ['begin', _], 1);
      }

      Transaction.prototype.commit = fstreamline__.create(function(_) {
        fstreamline__.invoke(this.client, "query", ['commit', _], 1);
        return this.done();
      }, 0);

      Transaction.prototype.rollback = fstreamline__.create(function(_) {
        fstreamline__.invoke(this.client, "query", ['rollback', _], 1);
        return this.done();
      }, 0);

      Transaction.prototype.queryMany = fstreamline__.create(function(_, config) {
        config.name = hash(config.text);
        return fstreamline__.invoke(this.client, "query", [config, _], 1).rows;
      }, 0);

      Transaction.prototype.queryOne = fstreamline__.create(function(_, config) {
        var res;

        res = fstreamline__.invoke(this, "queryMany", [_, config], 0);
        if (res[0] == null) {
          throw new Error('queryOne got no result');
        }
        return res[0];
      }, 0);

      Transaction.prototype.queryNone = fstreamline__.create(function(_, config) {
        fstreamline__.invoke(this, "queryMany", [_, config], 0);
        return null;
      }, 0);

      return Transaction;

    })();
    query = fstreamline__.create(function(_, config) {
      var error, res, result, t, transaction;

      transaction = config.transaction;
      t = transaction != null ? transaction :  fstreamline__.construct(Transaction,0)(_);
      try {
        if (config.before != null) {
          fstreamline__.invoke(config.before, "call", [this, _, config, t], 1);
        }
        res = fstreamline__.invoke(t, config.func, [_, {
          text: config.text,
          values: config.values != null ? config.values : []
        }], 0);
        if (config.after != null) {
          result = fstreamline__.invoke(config.after, "call", [this, _, res, t], 1);
          if (result != null) {
            res = result;
          }
        }
        if (transaction == null) {
          fstreamline__.invoke(t, "commit", [_], 0);
        }
      } catch (_error) {
        error = _error;
        if (transaction == null) {
          fstreamline__.invoke(t, "rollback", [_], 0);
        }
        throw error;
      }
      return res;
    }, 0);
    queryNone = fstreamline__.create(function(_, transaction, config) {
      config.transaction = transaction;
      config.func = 'queryNone';
      return (query.fstreamlineFunction || 0)(_, config);
    }, 0);
    queryOne = fstreamline__.create(function(_, transaction, config) {
      config.transaction = transaction;
      config.func = 'queryOne';
      return (query.fstreamlineFunction || 0)(_, config);
    }, 0);
    queryMany = fstreamline__.create(function(_, transaction, config) {
      config.transaction = transaction;
      config.func = 'queryMany';
      return (query.fstreamlineFunction || 0)(_, config);
    }, 0);
    model.Information = (function() {
      function Information(id) {
        var tempType;

        this.id = id;
        tempType = this.constructor.name.toLowerCase();
        if (tempType !== 'information') {
          this.type = tempType;
        }
      }

      Information.prototype.create = fstreamline__.create(function(_, status, referencing, t) {
        var _this = this;

        if (status == null) {
          status = 'default';
        }
        if (referencing == null) {
          referencing = null;
        }
        return (queryOne.fstreamlineFunction || 0)(_, t, {
          text: 'INSERT INTO information (status) VALUES ($1) RETURNING id;',
          values: [status],
          after: fstreamline__.create(function(_, res, t) {
            _this.id = res.id;
            if (referencing != null) {
              fstreamline__.invoke(_this, "addReference", [_, referencing, t], 0);
            }
            return _this.id;
          }, 0)
        });
      }, 0);

      Information.prototype.addReference = fstreamline__.create(function(_, reference, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'INSERT INTO "references" (id, referenceid) VALUES ($1, $2);',
          values: [this.id, reference]
        });
      }, 0);

      Information.prototype.removeReference = fstreamline__.create(function(_, reference, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'DELETE FROM "references" WHERE id=$1 AND referenceid=$2',
          values: [this.id, reference]
        });
      }, 0);

      Information.prototype.getType = fstreamline__.create(function(_, t) {
        return fstreamline__.invoke(this, "get", [_], 0).type;
      }, 0);

      Information.prototype.get = fstreamline__.create(function(_, t) {
        return (queryOne.fstreamlineFunction || 0)(_, t, {
          text: "SELECT getInformation($1) as info;",
          values: [this.id],
          after: fstreamline__.create(function(_, res, t) {
            return JSON.parse(res.info);
          }, 0)
        });
      }, 0);

      Information.prototype.setStatus = fstreamline__.create(function(_, status, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE information SET status=$2 WHERE id=$1;',
          values: [this.id, status]
        });
      }, 0);

      Information.prototype.setDelay = fstreamline__.create(function(_, delay, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: "UPDATE information SET status='inbox', delay=$2 WHERE id=$1;",
          values: [this.id, delay != null ? delay.toISOString() : null]
        });
      }, 0);

      Information.prototype.attach = fstreamline__.create(function(_, file, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'INSERT INTO attachments (id, fileid) VALUES ($1, $2);',
          values: [this.id, file]
        });
      }, 0);

      Information.prototype.detach = fstreamline__.create(function(_, file, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'DELETE FROM attachments WHERE id=$1 AND fileid=$2);',
          values: [this.id, file]
        });
      }, 0);

      Information.prototype._set = fstreamline__.create(function(_, table, map, allowed, t) {
        var answers, future, key, value, _i, _len;

        answers = [];
        for (key in map) {
          value = map[key];
          if ((allowed == null) || __indexOf.call(allowed, key) >= 0) {
            answers.push(queryNone(null, t, {
              text: "UPDATE " + table + " SET $2=$3 WHERE id=$1;",
              values: [this.id, key, value]
            }));
          }
        }
        for (_i = 0, _len = answers.length; _i < _len; _i++) {
          future = answers[_i];
          fstreamline__.invoke(null, future, [_], 0);
        }
        return null;
      }, 0);

      Information.prototype.getReferences = fstreamline__.create(function(_, t) {
        return (queryMany.fstreamlineFunction || 0)(_, t, {
          text: 'SELECT referenceid FROM "references" WHERE id=$1;',
          values: [this.id],
          after: fstreamline__.create(function(_, res) {
            var row, _i, _len, _results;

            _results = [];
            for (_i = 0, _len = res.length; _i < _len; _i++) {
              row = res[_i];
              _results.push(row.referenceid);
            }
            return _results;
          }, 0)
        });
      }, 0);

      Information.prototype.getAttachments = fstreamline__.create(function(_, t) {
        return (queryMany.fstreamlineFunction || 0)(_, t, {
          text: 'SELECT fileid FROM attachments WHERE id=$1;',
          values: [this.id],
          after: fstreamline__.create(function(_, res) {
            var row, _i, _len, _results;

            _results = [];
            for (_i = 0, _len = res.length; _i < _len; _i++) {
              row = res[_i];
              _results.push(row.fileid);
            }
            return _results;
          }, 0)
        });
      }, 0);

      Information.getAllIDs = fstreamline__.create(function(_, t) {
        return (queryOne.fstreamlineFunction || 0)(_, t, {
          text: "select array_to_json(array_agg(id)) as list from " + (this.name.toLowerCase()) + ";",
          after: fstreamline__.create(function(_, res) {
            if (res.list != null) {
              return JSON.parse(res.list);
            } else {
              return [];
            }
          }, 0)
        });
      }, 0);

      Information.getAll = fstreamline__.create(function(_, t) {
        return (queryOne.fstreamlineFunction || 0)(_, t, {
          text: "SELECT array_to_json(array_agg(getInformation(id))) as list FROM " + (this.name.toLowerCase()) + ";",
          after: fstreamline__.create(function(_, res) {
            if (res.list != null) {
              return JSON.parse(res.list);
            } else {
              return [];
            }
          }, 0)
        });
      }, 0);

      /*
      	class File extends PGObject
      
      		create: (cb, name, t) ->
      			@queryOne cb, t,
      				text: 'INSERT INTO file (name) VALUES ($1) RETURNING id;'
      				values: [name]
      				after: func (autocb, res) -> @id = res.id
      			
      		getName: (cb, t) ->
      			@queryOne _, t,
      				text: 'SELECT name FROM file WHERE id=$1;'
      				values: [@id]
      				after: func (auto_, res) -> res.name
      
      		delete: (_, t)->
      			@queryNone _, t,
      				text: 'DELETE FROM file WHERE id=$1'
      				values: [@id]
      */


      return Information;

    })();
    model.Note = (function(_super) {
      __extends(Note, _super);

      function Note() {
        _ref = Note.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Note.prototype.create = fstreamline__.create(function(_, content, status, t) {
        var _this = this;

        if (status == null) {
          status = 'inbox';
        }
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          before: fstreamline__.create(function(_, config, t) {
            fstreamline__.invoke(model.Information.prototype.create, "call", [_this, _, status, null, t], 1);
            return config.values = [_this.id, content];
          }, 0),
          text: 'INSERT INTO note (id, content) VALUES ($1, $2);',
          after: fstreamline__.create(function(_) {
            return _this.id;
          }, 0)
        });
      }, 0);

      Note.prototype.setContent = fstreamline__.create(function(_, content, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE note SET content=$2 WHERE id=$1',
          values: [this.id, content]
        });
      }, 0);

      return Note;

    })(model.Information);
    model.Task = (function(_super) {
      __extends(Task, _super);

      function Task() {
        _ref1 = Task.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Task.prototype.create = fstreamline__.create(function(_, description, referencing, parent, t) {
        var _this = this;

        if (referencing == null) {
          referencing = null;
        }
        if (parent == null) {
          parent = null;
        }
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          before: fstreamline__.create(function(_, config, t) {
            fstreamline__.invoke(model.Information.prototype.create, "call", [this, _, 'default', referencing, t], 1);
            return config.values = [this.id, description, parent];
          }, 0),
          text: 'INSERT INTO task (id, description, parent) VALUES ($1, $2, $3);',
          after: fstreamline__.create(function(_) {
            return _this.id;
          }, 0)
        });
      }, 0);

      Task.prototype.done = fstreamline__.create(function(_, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE task SET completed=CURRENT_TIMESTAMP WHERE id=$1',
          values: [this.id]
        });
      }, 0);

      Task.prototype.undo = fstreamline__.create(function(_, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE task SET completed=NULL WHERE id=$1',
          values: [this.id]
        });
      }, 0);

      Task.prototype.setParent = fstreamline__.create(function(_, parent, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE task SET parent=$2 WHERE id=$1;',
          values: [this.id, parent]
        });
      }, 0);

      Task.prototype.setDeadline = fstreamline__.create(function(_, deadline, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: "UPDATE task SET deadline=$2 WHERE id=$1;",
          values: [this.id, deadline != null ? deadline.toISOString() : null]
        });
      }, 0);

      Task.prototype.setDescription = fstreamline__.create(function(_, description, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'update task set description=$2 where id=$1',
          values: [this.id, description]
        });
      }, 0);

      return Task;

    })(model.Information);
    model.Project = (function(_super) {
      __extends(Project, _super);

      function Project() {
        _ref2 = Project.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Project.prototype.create = fstreamline__.create(function(_, description, referencing, parent, t) {
        var _this = this;

        if (referencing == null) {
          referencing = null;
        }
        if (parent == null) {
          parent = null;
        }
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          before: fstreamline__.create(function(_, config, t) {
            fstreamline__.invoke(model.Task.prototype.create, "call", [_this, _, description, referencing, parent, t], 1);
            return config.values = [_this.id];
          }, 0),
          text: 'INSERT INTO project (id) VALUES ($1);',
          after: fstreamline__.create(function(_) {
            return this.id;
          }, 0)
        });
      }, 0);

      Project.prototype.collapse = fstreamline__.create(function(_, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE project SET collapsed=TRUE WHERE id=$1;',
          values: [this.id]
        });
      }, 0);

      Project.prototype.uncollapse = fstreamline__.create(function(_, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE project SET collapsed=FALSE WHERE id=$1;',
          values: [this.id]
        });
      }, 0);

      return Project;

    })(model.Task);
    model.Asap = (function(_super) {
      __extends(Asap, _super);

      function Asap() {
        _ref3 = Asap.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Asap.prototype.create = fstreamline__.create(function(_, description, list, referencing, project, t) {
        if (referencing == null) {
          referencing = null;
        }
        if (project == null) {
          project = null;
        }
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          before: fstreamline__.create(function(_, config, t) {
            fstreamline__.invoke(model.Task.prototype.create, "call", [this, _, description, referencing, project, t], 1);
            return config.values = [this.id, list];
          }, 0),
          text: 'INSERT INTO asap (id, asaplist) VALUES ($1, $2);',
          after: fstreamline__.create(function(_) {
            return this.id;
          }, 0)
        });
      }, 0);

      Asap.prototype.setList = fstreamline__.create(function(_, list, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE asap SET asaplist=$2 WHERE id=$1;',
          values: [this.id, list]
        });
      }, 0);

      return Asap;

    })(model.Task);
    model.AsapList = (function(_super) {
      __extends(AsapList, _super);

      function AsapList() {
        _ref4 = AsapList.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      AsapList.prototype.create = fstreamline__.create(function(_, name, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          before: fstreamline__.create(function(_, config, t) {
            fstreamline__.invoke(model.Information.prototype.create, "call", [this, _, 'default', null, t], 1);
            return config.values = [this.id, name];
          }, 0),
          text: 'INSERT INTO asaplist (id, name) VALUES ($1, $2);',
          after: fstreamline__.create(function(_) {
            return this.id;
          }, 0)
        });
      }, 0);

      AsapList.prototype.rename = fstreamline__.create(function(_, name, t) {
        return (queryNone.fstreamlineFunction || 0)(_, t, {
          text: 'UPDATE asaplist SET name=$2 WHERE id=$1;',
          values: [this.id, name]
        });
      }, 0);

      /*
      	class SocialEntity extends Information
      
      		create: (_) ->
      			super()
      			queryOne
      				text: 'INSERT INTO social_entity (id) VALUES ($1);'
      				values: [@id]
      			@id
      			
      	class Circle extends SocialEntity
      
      		create: (name) ->
      			super()
      			queryOne
      				text: 'INSERT INTO circle (id, name) VALUES ($1, $2);'
      				values: [@id, name]
      			@id
      
      		@getByName: (name) =>
      			answer = queryOne
      				text: 'SELECT id FROM circle WHERE name=$1;'
      				values: [name]
      			new @ answer.id
      
      		rename: (name) ->
      			queryOne
      				text: 'UPDATE circle SET name=$2 WHERE id=$1;'
      				values: [@id, name]
      
      	class Contact extends SocialEntity
      
      		create: (nameMap) ->
      			super()
      			queryOne
      				text: 'INSERT INTO contact (id) VALUES ($1);'
      				values: [@id]
      			setValues nameMap
      			@id
      
      		setValues: (nameMap) ->
      			@_set 'contact', nameMap, ['name', 'first_name', 'middle_names', 'title', 'prefix', 'suffix', 'nickname', 'birthname', 'birthday']
      
      		addAccount: (account, description=null, priority=0) ->
      
      		removeAccount: (account) ->
      		addAddress: (place, description=null) ->
      
      		removeAddress: (place) ->
      		enterCircle: (circle) ->
      		leaveCircle: (circle) ->
      
      	class Place extends Information
      
      		create: (valueMap) ->
      
      		setValues: (valueMap) ->
      		setParent: (place) ->
      		removeParent: ->
      
      	class Appointment extends Information
      
      		create: (description, date, time=null, length=null, referencing=null) ->
      			super 'default', referencing
      			queryOne
      				text: 'INSERT INTO appointment (id, description, startdate, enddate, time, length) VALUES ($1, $2, $3, $4, $5, $6);'
      				values: [@id, description, date, date, time, length]
      			@id
      
      		setValues: (valueMap) ->
      		
      		setPlace: (place) ->
      
      		addException: (appointment, exceptionMove='no') ->
      		removeException: (appointment) ->
      
      		addFilter: (type, value) ->
      		removeFilter: (type, value) ->
      
      		addParticipant: (participant) ->
      		removeParticipant: (participant) ->
      
      	class Protocol extends PGEntry
      		@find: (name) ->
      		delete: ->
      	
      	class Server extends PGEntry
      		@find: (name, protocol) ->
      		delete: ->
      
      	class Communicator extends Information
      		create: (username, server) ->
      		changeServer: (server) ->
      		setValues: (valueMap) ->
      
      	class Account extends Communicator
      		create: (username, server) ->
      		@find: (username, server) ->
      		join: (room, role=null) ->
      		leave: (room, role=null) ->
      	
      	class UserAccount extends Account
      
      		setValues: ->
      		create: (account) ->
      		downGrade: ->
      		@getAll: ->
      
      	class Room extends Communicator
      		create: (name) ->
      		setMOTD: (motd) ->
      	
      	class Communication extends Information
      		create: (from, time=new Date()) ->
      		setSender: (from) ->
      		setTime: (time=new Date()) ->
      		send: ->
      		sent: ->
      		draft: ->
      		addRecipient: (recipient, mode, resource=null) ->
      		removeRecipient: (recipient, mode) ->
      		getToSend: (from) ->
      
      	class Message extends Communication
      		create: (from, subject=null, body=null, time=new Date()) ->
      		setValues: (valueMap) ->
      
      	class Presence extends Communication
      		create: (from, time=new Date()) ->
      		addResource: (resource) ->
      
      	class Resource extends PGEntry
      		create: (name, status, message) ->
      		delete: ->
      	
      	class Daemon extends PGEntry
      		registrate: (name, status) ->
      		setStatus: (status) ->
      		setMessage: (message) ->
      		deregistrate: ->
      		@getAll: ->
      	
      	class Maybe extends PGObject
      
      		getSize: ->
      		getList: ->
      			queryMany
      				text: 'SELECT * FROM maybe ORDER BY last_edited;'
      				values: []
      */


      return AsapList;

    })(model.Information);
    Inbox = (function() {
      function Inbox() {}

      Inbox.prototype.getSize = fstreamline__.create(function(_, t) {
        return (queryOne.fstreamlineFunction || 0)(_, t, {
          text: 'SELECT count(*) FROM inbox;',
          after: fstreamline__.create(function(_, res) {
            return res.count;
          }, 0)
        });
      }, 0);

      Inbox.prototype.getFirst = fstreamline__.create(function(_, t) {
        return (queryMany.fstreamlineFunction || 0)(_, t, {
          text: 'SELECT id FROM inbox ORDER BY "createdAt" LIMIT 1;',
          after: fstreamline__.create(function(_, res) {
            var _ref5;

            return (_ref5 = res[0]) != null ? _ref5.id : void 0;
          }, 0)
        });
      }, 0);

      Inbox.prototype.get = fstreamline__.create(function(_, t) {
        var first, size;

        size = this.getSize(null, t);
        first = this.getFirst(null, t);
        return {
          size: fstreamline__.invoke(null, size, [_], 0),
          first: fstreamline__.invoke(null, first, [_], 0)
        };
      }, 0);

      return Inbox;

    })();
    /*
    	
    	class Urgent extends PGObject
    
    		getSize: ->
    		getList: ->
    */

    model.inbox = new Inbox;
    return model;
  };

}).call(this);

}, 0).call(this, function(err) {
  if (err) throw err;
}));