/*** Generated by streamline 0.4.7 (fibers) - DO NOT EDIT ***/var fstreamline__ = require("streamline/lib/fibers/runtime"); (fstreamline__.create(function(_) { (function() {
  var util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  util = require('libsecretarius').util;

  module.exports = function(app, model) {
    var Parser, afterOnPost, con, listfn, name, parser, pgCode, ref;

    Parser = (function() {
      function Parser() {
        this.parse = __bind(this.parse, this);        this.methods = [];
      }

      Parser.prototype.findGetter = function(filter, object) {
        var getter, name, string;

        string = ("get" + (filter != null ? filter : '')).toLowerCase();
        for (name in object) {
          getter = object[name];
          if (name.toLowerCase() === string) {
            return getter;
          }
        }
      };

      Parser.prototype.registerMethods = function() {
        var list;

        list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return this.methods = this.methods.concat(list);
      };

      Parser.prototype.findObject = function(req) {
        var cls, id, type;

        type = req.params.type;
        cls = util.findElement(type, model);
        id = req.params.id;
        if (type === 'inbox' || type === 'urgent' || type === 'maybe') {
          return model[type];
        } else if (cls != null) {
          if (util.UUID_REG.test(id)) {
            return new cls(id);
          } else if (req.method === "POST") {
            return new cls;
          } else {
            return cls;
          }
        } else {
          return null;
        }
      };

      Parser.prototype.findMethod = function(req, object) {
        switch (req.method) {
          case "GET":
            return this.findGetter(req.query.filter, object);
          case "POST":
            return object.create;
          case "PATCH":
            return object[req.body.method];
        }
      };

      Parser.prototype.parse = function(req, res, next) {
        var _this = this;

        util.debug(req.method, req.url, req.query, req.body);
        return fstreamline__.create((function(_) {
          var args, error, handler, handlerobj, method, object, result, _i, _len, _ref;

          try {
            object = _this.findObject(req);
            method = _this.findMethod(req, object);
            _ref = _this.methods;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              handlerobj = _ref[_i];
              if (handlerobj.method === method) {
                handler = handlerobj;
              }
            }
            if (!((handler != null) && (method != null) && (object != null))) {
              return next();
            }
            args = handler.before != null ? fstreamline__.invoke(handler, "before", [_, req], 0) : [];
            try {
              result = fstreamline__.invoke(method, "apply_", [_, object, args, 0], 0);
            } catch (_error) {
              error = _error;
              if (handler.catcher != null) {
                handler.catcher(error);
              } else {
                throw error;
              }
            }
            if (handler.after != null) {
              result = fstreamline__.invoke(handler, "after", [_, result], 0);
            }
            return res.json(200, result != null ? result : {
              msg: "success"
            });
          } catch (_error) {
            error = _error;
            console.log(error.stack);
            return res.json(500, {
              msg: "Internal Error",
              error: util.debugOn ? error : 'hidden'
            });
          }
        }), 0)(util.dummyCB);
      };

      return Parser;

    })();
    parser = new Parser;
    afterOnPost = fstreamline__.create(function(_, ans) {
      return {
        id: ans
      };
    }, 0);
    pgCode = function(code) {
      return function(error) {
        if (!((error.pgerror != null) && error.pgerror.code === code)) {
          throw error;
        }
      };
    };
    parser.registerMethods({
      after: fstreamline__.create(function(_, ans) {
        return {
          type: ans
        };
      }, 0),
      method: model.Information.prototype.getType
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.status];
      }, 0),
      method: model.Information.prototype.setStatus
    }, {
      before: ref = fstreamline__.create(function(_, req) {
        return [req.body.reference];
      }, 0),
      catcher: pgCode('23505'),
      method: model.Information.prototype.addReference
    }, {
      before: ref,
      method: model.Information.prototype.removeReference
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.delay !== '' ? new Date(req.body.delay) : null];
      }, 0),
      method: model.Information.prototype.setDelay
    }, {
      method: model.Information.getAllIDs
    }, {
      method: model.Information.getAll
    }, {
      before: con = fstreamline__.create(function(_, req) {
        return [req.body.content, req.body.status];
      }, 0),
      after: afterOnPost,
      method: model.Note.prototype.create
    }, {
      before: con,
      method: model.Note.prototype.setContent
    }, {
      method: model.inbox.get
    }, {
      method: model.Information.prototype.get
    }, {
      method: model.Task.prototype.done
    }, {
      method: model.Task.prototype.undo
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.description, req.body.referencing, req.body.parent];
      }, 0),
      after: afterOnPost,
      method: model.Project.prototype.create
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.deadline !== '' ? new Date(req.body.deadline) : null];
      }, 0),
      method: model.Task.prototype.setDeadline
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.description];
      }, 0),
      method: model.Task.prototype.setDescription
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.parent];
      }, 0),
      method: model.Project.prototype.setParent
    }, {
      method: model.Project.prototype.collapse
    }, {
      method: model.Project.prototype.uncollapse
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.description, req.body.list, req.body.referencing, req.body.project];
      }, 0),
      after: afterOnPost,
      method: model.Asap.prototype.create
    }, {
      before: fstreamline__.create(function(_, req) {
        return [req.body.project];
      }, 0),
      method: model.Asap.prototype.setProject
    }, {
      before: listfn = fstreamline__.create(function(_, req) {
        return [req.body.list];
      }, 0),
      method: model.Asap.prototype.setList
    }, {
      before: name = fstreamline__.create(function(_, req) {
        return [req.body.name];
      }, 0),
      method: model.AsapList.prototype.create
    }, {
      before: name,
      method: model.AsapList.prototype.rename
    });
    app.all("/json/:type/:id", parser.parse);
    return app.all("/json/:type", parser.parse);
  };

}).call(this);

}, 0).call(this, function(err) {
  if (err) throw err;
}));