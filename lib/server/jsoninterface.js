/*** Generated by streamline 0.4.6 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch; (function() {
  var util, __slice = [].slice;


  util = require("libsecretarius").util;

  module.exports = function(app, model) {
    var Parser, afterOnPost, con, listfn, name, parser, pgCode, ref, _this = this;

    Parser = (function() {

      function Parser() {
        var _this = this;
        this.parse = function(req, res, next) {
          return Parser.prototype.parse.apply(_this, arguments); };

        this.methods = []; };


      Parser.prototype.findGetter = function(filter, object) {
        var getter, name, string;
        string = (("get" + (((filter != null) ? filter : "")))).toLowerCase();
        for (name in object) {
          getter = object[name];
          if ((name.toLowerCase() === string)) {
            return getter; } ; }; };




      Parser.prototype.registerMethods = function() {
        var list;
        list = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
        return this.methods = this.methods.concat(list); };


      Parser.prototype.findObject = function(req) {
        var cls, id, type;
        type = req.params.type;
        cls = util.findElement(type, model);
        id = req.params.id;
        if ((((type === "inbox") || (type === "urgent")) || (type === "maybe"))) {
          return model[type]; }
         else if ((cls != null)) {
          if (model.UUID_REG.test(id)) {
            return new cls(id); }
           else if ((req.method === "POST")) {
            return new cls; }
           else {
            return cls; }  ; }

         else {
          return null; }  ; };



      Parser.prototype.findMethod = function(req, object) {
        switch (req.method) {
        case "GET": return this.findGetter(req.query.filter, object);
        case "POST":
          return object.create;
        case "PATCH":
          return object[req.body.method];
        }; };



      Parser.prototype.parse = function(req, res, next) {
        var _this = this;
        console.log("hi");
        util.debug(req.method, req.url, req.query, req.body);
        return (function __1(_) { var args, handler, handlerobj, method, object, result, _i, _len, _ref; var __frame = { name: "__1", line: 72 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {


                  object = _this.findObject(req);
                  if ((object === null)) {
                    return _(null, next()); } ;

                  method = _this.findMethod(req, object);
                  handler = null;
                  _ref = _this.methods;
                  for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
                    handlerobj = _ref[_i];
                    if ((handlerobj.method === method)) {
                      handler = handlerobj; } ; };


                  if ((handler == null)) {
                    return _(null, next()); } ; return (function __$__1(__then) {

                    if ((handler.before != null)) { return (function __$__1(_) {
                        return handler.before(__cb(_, __frame, 20, 21, function ___(__0, __1) { var __2 = __1; return (function __$__1(__then) { if (__2) { var __3 = __1; return _(null, __3); } else { __then(); } ; })(function __$__1() { return _(null, []); }); }, true), req); })(__cb(_, __frame, -71, 7, function ___(__0, __2) { args = __2; __then(); }, true)); } else { __then(); } ; })(function __$__1() { return (function ___(__then) { (function ___(_) { __tryCatch(_, function __$__1() {




                          return (function(cb) { return method.apply(object, [cb,].concat(args)); })(__cb(_, __frame, 25, 14, __then, true)); }); })(function ___(error, __result) { __tryCatch(_, function __$__1() { if (error) {

                            if ((handler.catcher != null)) {
                              handler.catcher(error); }
                             else {
                              return _(error); } ; __then(); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, function __$__1() { return (function __$__1(__then) {


                          if ((handler.after != null)) {
                            return handler.after(__cb(_, __frame, 34, 23, function ___(__0, __3) { result = __3; __then(); }, true), result); } else { __then(); } ; })(function __$__1() {

                          return _(null, res.json(200, ((result != null) ? result : {
                            msg: "success" }))); }); }); }); }); }); })(function ___(error, __result) { __tryCatch(_, function __$__1() { if (error) {


                    res.json(code, {
                      msg: "Internal Error",
                      error: error });

                    return _(null, util.debug(error)); } else { _(null, __result); } ; }); }); })(function ___() { __tryCatch(_, _); }); });

        })(function() {  }); };


      return Parser;

    })();
    parser = new Parser;
    afterOnPost = function afterOnPost__1(_, ans) { var __frame = { name: "afterOnPost__1", line: 125 }; return __func(_, this, arguments, afterOnPost__1, 0, __frame, function __$afterOnPost__1() {
        return _(null, {
          id: ans }); }); };


    pgCode = function(code) {
      return function(error) {
        if (!((((error.code != null)) && (error.pgerror.code === code)))) {
          throw error; } ; }; };



    parser.registerMethods({
      after: function after__2(_, ans) { var __frame = { name: "after__2", line: 138 }; return __func(_, this, arguments, after__2, 0, __frame, function __$after__2() {
          return _(null, {
            type: ans }); }); },


      method: model.Information.prototype.getType
    }, {
      before: function before__3(_, req) { var __frame = { name: "before__3", line: 145 }; return __func(_, this, arguments, before__3, 0, __frame, function __$before__3() {
          return _(null, [req.body.status,]); }); },

      method: model.Information.prototype.setStatus
    }, {
      before: ref = function ref__4(_, req) { var __frame = { name: "ref__4", line: 150 }; return __func(_, this, arguments, ref__4, 0, __frame, function __$ref__4() {
          return _(null, [req.body.reference,]); }); },

      catcher: pgCode("23505"),
      method: model.Information.prototype.addReference
    }, {
      before: ref,
      method: model.Information.prototype.removeReference
    }, {
      before: function before__5(_, req) { var __frame = { name: "before__5", line: 159 }; return __func(_, this, arguments, before__5, 0, __frame, function __$before__5() {
          return _(null, [((req.body.delay !== "") ? new Date(req.body.delay) : null),]); }); },

      method: model.Information.prototype.setDelay
    }, {
      method: model.Information.getAllIDs
    }, {
      method: model.Information.getAll
    }, {
      before: con = function con__6(_, req) { var __frame = { name: "con__6", line: 168 }; return __func(_, this, arguments, con__6, 0, __frame, function __$con__6() {
          return _(null, [req.body.content,]); }); },

      after: afterOnPost,
      method: model.Note.prototype.create
    }, {
      before: con,
      method: model.Note.prototype.setContent
    }, {
      method: model.inbox.get
    }, {
      method: model.Information.prototype.get
    }, {
      method: model.Task.prototype.done
    }, {
      method: model.Task.prototype.undo
    }, {
      before: function before__7(_, req) { var __frame = { name: "before__7", line: 185 }; return __func(_, this, arguments, before__7, 0, __frame, function __$before__7() {
          return _(null, [req.body.description,req.body.referencing,req.body.parent,]); }); },

      after: afterOnPost,
      method: model.Project.prototype.create
    }, {
      before: function before__8(_, req) { var __frame = { name: "before__8", line: 191 }; return __func(_, this, arguments, before__8, 0, __frame, function __$before__8() {
          return _(null, [((req.body.deadline !== "") ? new Date(req.body.deadline) : null),]); }); },

      method: model.Task.prototype.setDeadline
    }, {
      before: function before__9(_, req) { var __frame = { name: "before__9", line: 196 }; return __func(_, this, arguments, before__9, 0, __frame, function __$before__9() {
          return _(null, [req.body.description,]); }); },

      method: model.Task.prototype.setDescription
    }, {
      before: function before__10(_, req) { var __frame = { name: "before__10", line: 201 }; return __func(_, this, arguments, before__10, 0, __frame, function __$before__10() {
          return _(null, [req.body.parent,]); }); },

      method: model.Project.prototype.setParent
    }, {
      method: model.Project.prototype.collapse
    }, {
      method: model.Project.prototype.uncollapse
    }, {
      before: function before__11(_, req) { var __frame = { name: "before__11", line: 210 }; return __func(_, this, arguments, before__11, 0, __frame, function __$before__11() {
          return _(null, [req.body.description,req.body.list,req.body.referencing,req.body.project,]); }); },

      after: afterOnPost,
      method: model.Asap.prototype.create
    }, {
      before: function before__12(_, req) { var __frame = { name: "before__12", line: 216 }; return __func(_, this, arguments, before__12, 0, __frame, function __$before__12() {
          return _(null, [req.body.project,]); }); },

      method: model.Asap.prototype.setProject
    }, {
      before: listfn = function listfn__13(_, req) { var __frame = { name: "listfn__13", line: 221 }; return __func(_, this, arguments, listfn__13, 0, __frame, function __$listfn__13() {
          return _(null, [req.body.list,]); }); },

      method: model.Asap.prototype.setList
    }, {
      before: name = function name__14(_, req) { var __frame = { name: "name__14", line: 226 }; return __func(_, this, arguments, name__14, 0, __frame, function __$name__14() {
          return _(null, [req.body.name,]); }); },

      method: model.AsapList.prototype.create
    }, {
      before: name,
      method: model.AsapList.prototype.rename });

    app.all("/json/:type/:id", parser.parse);
    return app.all("/json/:type", parser.parse); };


}).call(this);