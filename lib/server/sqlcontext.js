/*** Generated by streamline 0.4.6 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename); (function() {
  var __slice = [].slice, __indexOf = ([].indexOf || function(item) {
    for (var i = 0, l = this.length; (i < l); i++) { if (((i in this) && (this[i] === item))) { return i }; }; return -1; });

  module.exports = function(c) {
    var alias, aliases, enums, functions, langs, meaning, printEnum, printFunction, printTable, printTrigger, printView, tables, type, types, views, _i, _len;
    aliases = {
      now: "current_timestamp",
      python: "plpythonu",
      sql: "plpgsql",
      js: "plv8",
      coffee: "plcoffee" };

    for (alias in aliases) {
      meaning = aliases[alias];
      c[alias] = meaning; };

    tables = { };
    enums = { };
    functions = { };
    views = { };
    langs = [];
    types = ["uuid","timestamptz","varchar","boolean","trigger","json",];
    for (_i = 0, _len = types.length; (_i < _len); _i++) {
      type = types[_i];
      c[type.toUpperCase()] = type; };

    c.func = function(func) {
      var fn, fnname, _results;
      _results = [];
      for (fnname in func) {
        fn = func[fnname];
        functions[fnname] = fn;
        c[fnname] = function() {
          var args;
          args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
          return (((("" + fnname) + "(") + (args.join(", "))) + ")"); };

        _results.push(printFunction(fnname, fn)); };

      return _results; };

    c.enumeration = function(enumobj) {
      var elem, enumlist, enumname, _j, _len1, _results;
      _results = [];
      for (enumname in enumobj) {
        enumlist = enumobj[enumname];
        c[enumname] = { };
        for (_j = 0, _len1 = enumlist.length; (_j < _len1); _j++) {
          elem = enumlist[_j];
          c[enumname][elem] = (("'" + elem) + "'"); };

        enums[enumname] = (function() {
          var _k, _len2, _results1;
          _results1 = [];
          for (_k = 0, _len2 = enumlist.length; (_k < _len2); _k++) {
            elem = enumlist[_k];
            _results1.push(c[enumname][elem]); };

          return _results1;
        })();
        c[enumname.toUpperCase()] = enumname;
        _results.push(printEnum(enumname, enums[enumname])); };

      return _results; };

    c.view = function(viewobj) {
      var view, viewname, _results;
      _results = [];
      for (viewname in viewobj) {
        view = viewobj[viewname];
        _results.push(printView(viewname, view)); };

      return _results; };

    c.materializedView = function(viewobj) {
      var field, obj, table, trigger, view, viewname, _j, _len1, _ref, _ref1, _results;
      _results = [];
      for (viewname in viewobj) {
        view = viewobj[viewname];
        printView((("" + viewname) + "_um"), view.query);
        console.log((((("create table \"" + viewname) + "_table\" as select * from \"") + viewname) + "_um\";"));
        obj = { };
        obj[(("" + viewname) + "_refresh_row")] = {
          args: ["id uuid",],
          lang: c.coffee,
          return: (("" + viewname) + "_table"),
          body: (((((((((("row = plv8.execute \"select * from " + viewname) + "_um u where u.id = '#{id}';\"\nrow = if row.length is 1 then row[0] else null\nold = plv8.prepare \"select * from ") + viewname) + "_table t where t.id = '#{id}';\"\nold = if old.length is 1 then old[0] else null\nunless JSON.stringify(row) is JSON.stringify(old) and row is not null\n	plv8.execute \"delete from ") + viewname) + "_table t where t.id = '#{id}';\"\n	plv8.execute \"insert into ") + viewname) + "_table select * from ") + viewname) + "_um u where u.id = '#{id}';\"\nreturn row") };

        obj[(("" + viewname) + "_trigger")] = {
          args: [],
          lang: c.python,
          return: c.TRIGGER,
          body: (("ids = set()\nif 'args' in TD and TD['args'] != None:\n	field = TD['args'][0]\nelse:\n	field = 'id'\nfor state in ['new', 'old']:\n	if state in TD and TD[state] != None:\n		ids.add(TD[state][field])\nids.discard(None)\nplan = SD.setdefault('plan', plpy.prepare('select " + viewname) + "_refresh_row($1)', ['uuid']))\nfor id in ids:\n	plpy.execute(plan, [id])") };

        c.func(obj);
        _ref = view.trigger;
        for (table in _ref) {
          trigger = _ref[table];
          (trigger.fields || (trigger.fields = ["id",]));
          (trigger.events || (trigger.events = ["update","insert","delete",]));
          _ref1 = trigger.fields;
          for (_j = 0, _len1 = _ref1.length; (_j < _len1); _j++) {
            field = _ref1[_j];
            printTrigger(((((("" + viewname) + "_mv_") + table) + "_") + field), {
              events: trigger.events,
              table: table,
              cmd: (((("" + viewname) + "_trigger('") + field) + "')") }); }; };



        _results.push(console.log((((((((((("do $$\nfields = plpy.execute(\"select column_name from information_schema.columns where table_name = '" + viewname) + "_table' and column_name != 'expires';\")\nfieldlist = []\nfor field in fields:\n	fieldlist.append('r.\"'+field['column_name']+'\"')\nfields = ', '.join(fieldlist)\nplpy.execute(\"create or replace view \\\"") + viewname) + "\\\" as select \"+fields+\" from ") + viewname) + "_table r where expires is null or expires >= current_timestamp union select \"+fields+\" from (select (") + viewname) + "_refresh_row(id)).* from ") + viewname) + "_table where expires is not null and expires < current_timestamp) as r;\") $$ language plpythonu;"))); };

      return _results; };

    printTrigger = function(name, trigger) {
      return console.log((((((((((("create trigger " + name) + " after ") + (trigger.events.join(" or "))) + " on \"") + trigger.table) + "\" for each row ") + (((trigger.when != null) ? (("when (" + trigger.when) + ") ") : ""))) + "execute procedure ") + trigger.cmd) + ";")); };

    c.trigger = function(triggers) {
      var name, trigger, _results;
      _results = [];
      for (name in triggers) {
        trigger = triggers[name];
        _results.push(printTrigger(name, trigger)); };

      return _results; };

    c.table = function(tableobj) {
      var content, field, rfield, table, tablename, _ref, _results;
      _results = [];
      for (tablename in tableobj) {
        table = tableobj[tablename];
        c[tablename] = tables[tablename] = table;
        table.children = [];
        if ((table._extends != null)) {
          (table._references || (table._references = { }));
          table._references.id = table._extends.id;
          c[table._extends.id.table].children.push(table); } ;

        if ((table._references != null)) {
          _ref = table._references;
          for (field in _ref) {
            rfield = _ref[field];
            table[field] = {
              type: rfield.type,
              references: rfield,
              primary: true }; }; } ;



        for (field in table) {
          content = table[field];
          content.name = field;
          content.table = tablename; };

        table.types = function() {
          var child, ret, _j, _len1, _ref1;
          if ((table.children.length > 0)) {
            ret = [];
            _ref1 = table.children;
            for (_j = 0, _len1 = _ref1.length; (_j < _len1); _j++) {
              child = _ref1[_j];
              ret = ret.concat(child.types()); }; }

           else {
            ret = tablename; } ;

          return ret; };

        _results.push(printTable(tablename, table)); };

      return _results; };

    printFunction = function(fnname, fn) {
      var _ref;
      if (_ref = fn.lang, (__indexOf.call(langs, _ref) < 0)) {
        console.log((("create extension if not exists " + fn.lang) + ";\n"));
        langs.push(fn.lang); } ;

      return console.log((((((((((("create or replace function " + fnname) + "(") + (((fn.args != null) ? fn.args.join(", ") : ""))) + ") returns ") + (((fn["return"] != null) ? fn["return"] : "void"))) + " as $$\n") + fn.body) + "\n$$ language ") + fn.lang) + ";\n")); };

    printEnum = function(enumname, enumlist) {
      return console.log((((("create type " + enumname) + " as enum (") + (enumlist.join(", "))) + ");\n")); };

    printTable = function(tablename, table) {
      var column, i, line, lines, name, primaries;
      primaries = [];
      lines = [];
      for (name in table) {
        column = table[name];
        if ((column.type == null)) {
          continue; } ;

        line = [];
        line.push((((("\n	\"" + column.name) + "\"") + (((function() {
          var _j, _ref, _results;
          _results = [];
          for (i = _j = 0, _ref = (20 - name.length); ((0 <= _ref) ? (_j <= _ref) : (_j >= _ref)); i = ((0 <= _ref) ? ++_j : --_j)) {
            _results.push(" "); };

          return _results;
        })()).join(""))) + column.type));
        if ((((column.primary != null)) && column.primary)) {
          primaries.push((("\"" + name) + "\"")); } ;

        if ((column.references != null)) {
          line.push(((((" references \"" + column.references.table) + "\"(") + column.references.name) + ") on delete "));
          if ((column.onDelete != null)) {
            line.push(column.onDelete); }
           else {
            line.push("cascade"); } ; } ;


        if ((column["default"] != null)) {
          line.push((" default " + column["default"])); } ;

        if ((((column["null"] != null)) && !column["null"])) {
          line.push(" not null"); } ;

        if ((((column.unique != null)) && column.unique)) {
          line.push(" unique"); } ;

        lines.push(line.join("")); };

      if ((primaries.length > 0)) {
        lines.push((("\n	primary key(" + (primaries.join(", "))) + ")")); } ;

      console.log((((("create table \"" + tablename) + "\"(") + (lines.join())) + "\n);"));
      if ((table._append != null)) {
        console.log(table._append); } ;

      return console.log(""); };

    printView = function(viewname, view) {
      return console.log((((("create or replace view \"" + viewname) + "\" as ") + view) + ";\n")); };

    c.union = function(selects) {
      return selects.join("\n	union "); };

    return c.select = function(view) {
      return ((((("select " + view.columns) + " from ") + view.from) + (((view.where != null) ? (" where " + view.where) : ""))) + (((view.groupBy != null) ? (" group by " + view.groupBy) : ""))); }; };



}).call(this);