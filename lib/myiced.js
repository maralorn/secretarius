// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var Deferrals, ErrorHandler, a, addCatcher, addNull, arrayEqual, cb2throw, continuationCatcher, debug, debugOn, errString, exports, iced, pollute, singlify, throw2cb, throwError, __fd, __iced_deferrals, __iced_k, __iced_k_noop,
    _this = this,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  a = function(cb) {
    return cb();
  };

  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      filename: "src/myiced.iced"
    });
    a(__iced_deferrals.defer({
      lineno: 1
    }));
    __iced_deferrals._fulfill();
  })(function() {
    module.exports = exports = iced;
    ErrorHandler = (function() {

      function ErrorHandler(cb) {
        this.cb = cb;
        this.catchers = [];
      }

      ErrorHandler.prototype.addCatcher = function(catcher) {
        return this.catchers.push(catcher);
      };

      ErrorHandler.prototype.handle = function(error) {
        var catcher, error, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.catchers;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              catcher = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/myiced.iced",
                  funcname: "ErrorHandler.handle"
                });
                catcher(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return error = arguments[0];
                    };
                  })(),
                  lineno: 13
                }), error);
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        })(function() {
          return _this.cb(error);
        });
      };

      return ErrorHandler;

    })();
    exports.throw2cb = throw2cb = function(func) {
      return function() {
        var args, handler, saveHandler;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        saveHandler = this.__errorHandler;
        this.__errorHandler = handler = new ErrorHandler(args[0]);
        args[0] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return handler.cb.apply(null, [null].concat(args));
        };
        args[0].__errorHandler = handler;
        func.apply(this, args);
        return this.__errorHandler = saveHandler;
      };
    };
    continuationCatcher = function(errorHandler, continuation) {
      return function() {
        var args, saveHandler;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args[0] == null) args[0] = {};
        saveHandler = this.__errorHandler;
        this.__errorHandler = args[0].__errorHandler = errorHandler;
        continuation.apply(this, args);
        return this.__errorHandler = saveHandler;
      };
    };
    exports.cb2throw = cb2throw = function() {
      var arg, args, cb, handler, _i, _len;
      cb = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      handler = this.__errorHandler;
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        if (arg != null) {
          console.trace();
          throw 'cb2throw can only take one parameter.';
        }
      }
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (args[0] != null) {
          if (handler != null) {
            return handler.handle(args[0]);
          } else {
            throw args[0];
          }
        } else {
          return cb.apply(this, args.slice(1));
        }
      };
    };
    addNull = function(cb) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return cb.apply(this, [null].concat(args));
      };
    };
    exports.addCatcher = addCatcher = function(catcher) {
      var _ref;
      return (_ref = this.__errorHandler) != null ? _ref.addCatcher(catcher) : void 0;
    };
    exports.util = {};
    exports.util.throwError = throwError = function(error) {
      return this.__errorHandler.handle(error);
    };
    __fd = iced.findDeferral;
    iced.findDeferral = function(args) {
      var _ref;
      if (((_ref = args[0]) != null ? _ref.__errorHandler : void 0) != null) {
        return {
          value: __fd(args),
          errorHandler: args[0].__errorHandler
        };
      } else {
        return __fd(args);
      }
    };
    iced.Deferrals = Deferrals = (function(_super) {

      __extends(Deferrals, _super);

      function Deferrals(k, t) {
        var errorHandler, _ref;
        if (((_ref = t.parent) != null ? _ref.errorHandler : void 0) != null) {
          this.__errorHandler = errorHandler = t.parent.errorHandler;
          t.parent = t.parent.value;
          Deferrals.__super__.constructor.call(this, continuationCatcher(errorHandler, k), t);
        } else {
          Deferrals.__super__.constructor.call(this, k, t);
        }
      }

      Deferrals.prototype.defer = function(options) {
        var cb, errorHandler;
        if (this.__errorHandler != null) {
          errorHandler = this.__errorHandler;
          cb = Deferrals.__super__.defer.call(this, options);
          return function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (args[0] != null) {
              return errorHandler.handle(args[0]);
            } else {
              return cb.apply(this, args.slice(1));
            }
          };
        } else {
          return Deferrals.__super__.defer.call(this, options);
        }
      };

      return Deferrals;

    })(iced.Deferrals);
    if (typeof iced.catchExceptions === "function") iced.catchExceptions();
    exports.util.singlify = singlify = function(func) {
      var calls;
      calls = [];
      return function() {
        var args, call, caller, cb, _i, _len;
        cb = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        for (_i = 0, _len = calls.length; _i < _len; _i++) {
          call = calls[_i];
          if (arrayEqual(args, call.args) && call.context === this) {
            return call.cbs.push(cb);
          }
        }
        calls.push(call = {
          args: args,
          cbs: [cb],
          context: this
        });
        caller = function() {
          var args, cl, _j, _len1, _ref, _results;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          calls = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = calls.length; _j < _len1; _j++) {
              cl = calls[_j];
              if (cl !== call) _results.push(cl);
            }
            return _results;
          })();
          _ref = call.cbs;
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            cb = _ref[_j];
            _results.push(cb.apply(this, args));
          }
          return _results;
        };
        return func.apply(this, [caller].concat(args));
      };
    };
    exports.util.arrayEqual = arrayEqual = function(a, b) {
      var element, index, _i, _len;
      if (a === b) return true;
      if (a.length !== b.length) return false;
      for (index = _i = 0, _len = a.length; _i < _len; index = ++_i) {
        element = a[index];
        if (element !== b[index]) return false;
      }
      return true;
    };
    debugOn = false;
    exports.util.enableDebugMode = function() {
      return debugOn = true;
    };
    errString = function() {
      var b, e, file, func, i, line, s, time, _i, _len, _ref;
      b = Error.prepareStackTrace;
      Error.prepareStackTrace = function(_, stack) {
        return stack;
      };
      e = new Error;
      Error.captureStackTrace(e, this);
      s = e.stack;
      Error.prepareStackTrace = b;
      time = new Date().toString().match(/\d+:\d+:\d+/)[0];
      file = s[2].getFileName().match(/\/(\w*).\w*$/)[1];
      line = s[2].getLineNumber();
      _ref = s.slice(2);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        func = i.getFunctionName();
        if ((func != null) && !/throw2cb/.test(func)) break;
      }
      func = func.replace(/module.exports./, '');
      return "" + time + " " + func + " in " + file + " at " + line;
    };
    exports.debug = debug = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!debugOn) return;
      return console.log.apply(null, [errString()].concat(args));
    };
    return exports.util.pollute = pollute = function(obj) {
      obj.func = throw2cb;
      obj.catchNull = cb2throw;
      obj.addNull = addNull;
      obj.catchCB = addCatcher;
      obj.throwError = throwError;
      obj.debug = debug;
      return obj.singlify = singlify;
    };
  });

}).call(this);
