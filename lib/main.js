// Generated by IcedCoffeeScript 1.4.0c
(function() {
  var argv, code, connectionString, error, iced, id, model, msg, pgmodel, spawn, __iced_deferrals, __iced_k, __iced_k_noop,
    _this = this;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  iced = require('./myiced');

  iced.util.pollute(global);

  argv = require('optimist').usage('secretarius [cmd] <args>').boolean('debug').alias('d', 'debug')["default"]('debug', false).demand(1).argv;

  connectionString = "postgresql:///" + process.env.USER + "-secretarius";

  pgmodel = require('./models/pgmodel');

  model = pgmodel(connectionString);

  spawn = require('child_process').spawn;

  if (argv.debug) iced.util.enableDebugMode();

  switch (argv._[0]) {
    case 'server':
            require('./server')(model);
      __iced_k();;
      break;
    case 'note':
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          filename: "src/main.iced"
        });
        new model.Note().create(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              error = arguments[0];
              return id = arguments[1];
            };
          })(),
          lineno: 24
        }), argv._.slice(1).join(' '));
        __iced_deferrals._fulfill();
      })(function() {
        code = typeof error !== "undefined" && error !== null ? 1 : 0;
        return __iced_k(process.exit(code));
      });
      break;
    case 'status':
      msg = '';
      process.stdin.resume();
      process.stdin.setEncoding('utf8');
            process.stdin.on('data', function(chunk) {
        var entries, error, inbox, mpc, obj, row, size, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        try {
          obj = JSON.parse(chunk.slice(1));
        } catch (err) {

        }
        (function(__iced_k) {
          if (obj != null) {
            mpc = spawn('mpc', ['-f', '%title%']);
            mpc.stdout.on('data', function(data) {
              return msg = data.toString();
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/main.iced"
              });
              model.inbox.getSize(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    error = arguments[0];
                    return size = arguments[1];
                  };
                })(),
                lineno: 39
              }));
              __iced_deferrals._fulfill();
            })(function() {
              inbox = {
                name: 'inbox',
                full_text: error != null ? 'Secretarius error' : "Inbox: " + size
              };
              if (error != null) inbox.color = "#0000ff";
              entries = [inbox];
              row = msg.split('\n')[0];
              if (msg.split('\n').length > 2) {
                entries.push({
                  name: 'mpd',
                  full_text: row
                });
              }
              obj = entries.concat(obj);
              return __iced_k(chunk = "," + (JSON.stringify(obj)) + "\n");
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return process.stdout.write(chunk);
        });
      });
      __iced_k();;
      break;
    default:
      __iced_k();
  }

}).call(this);
