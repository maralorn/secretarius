/*** Generated by streamline 0.4.7 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap,__apply=__rt.__apply,__construct=__rt.__construct;
(function main(_) {
  var __this = this;
  var __frame = {
    name: "main",
    line: 1
  };
  return __func(_, this, arguments, main, 0, __frame, function __$main() {
    return (function __1(_) {
      var AsapListView, AsapListViewElement, AsapView, InboxView, InfoView, KOModelStorage, MainView, NewWindowSlotGenerator, NoteView, ProjectView, ProjectsView, Reference, SlaveSlot, Slot, SlotGenerator, TaskSelector, TimePicker, View, WindowSlot, WindowSlotGenerator, defaultTo, icon, id2label, id2viewname, info2label, info2viewname, ko, label, model, moment, observableList, poll, references, sec, store, truncate, util, viewname2id, viewname2info, win, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, __indexOf, __bind, __hasProp, __extends, __slice;
      __indexOf = ([].indexOf || function(item) {
        for (var i = 0, l = this.length; (i < l); i++) {
          if (((i in this) && (this[i] === item))) {
            return i
          };
        };
        return -1;
      });
      __bind = function(fn, me) {
        return function() {
          return fn.apply(me, arguments);
        };
      };
      __hasProp = {
      }.hasOwnProperty;
      __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key)) {
            child[key] = parent[key];
          };
        };
        function ctor() {
          this.constructor = child;
        };
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      __slice = [].slice;
      require("./vendor/jquery");
      require("./vendor/jquery.autosize");
      moment = require("moment");
      ko = require("knockout");
      ko.mapping = require("./vendor/knockout.mapping");
      sec = require("libsecretarius");
      util = sec.util;
      model = sec();
      defaultTo = function(obj, defaults) {
        var key, value, _results;
        _results = [];
        for (key in defaults) {
          value = defaults[key];
          if ((obj[key] == null)) {
            _results.push(obj[key] = value);
          }
           else {
            _results.push(void 0);
          }
        ;
        };
        return _results;
      };
      viewname2id = function(viewname) {
        var _ref;
        return (((_ref = /^\w*\/(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0);
      };
      id2viewname = function id2viewname__1(_, id) {
        var __frame = {
          name: "id2viewname__1",
          line: 46
        };
        return __func(_, this, arguments, id2viewname__1, 0, __frame, function __$id2viewname__1() {
          return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
            var __1 = info2viewname(__2);
            return _(null, __1);
          }, true), id);
        });
      };
      viewname2info = function viewname2info__2(_, viewname) {
        var id;
        var __frame = {
          name: "viewname2info__2",
          line: 50
        };
        return __func(_, this, arguments, viewname2info__2, 0, __frame, function __$viewname2info__2() {
          return (function __$viewname2info__2(__then) {
            if (((id = viewname2id(viewname)) != null)) {
              return model.cache.getInformation(__cb(_, __frame, 4, 13, _, true), id);
            }
             else {
              return _(new Error(("No Infoview Name: " + viewname)));
            }
          ;
          })(_);
        });
      };
      info2label = function info2label__3(_, info) {
        var __frame = {
          name: "info2label__3",
          line: 60
        };
        return __func(_, this, arguments, info2label__3, 0, __frame, function __$info2label__3() {
          return label(__cb(_, __frame, 1, 11, _, true), info2viewname(info));
        });
      };
      info2viewname = function(info) {
        return ((("" + info.type) + "/") + info.id);
      };
      id2label = function id2label__4(_, id) {
        var __frame = {
          name: "id2label__4",
          line: 68
        };
        return __func(_, this, arguments, id2label__4, 0, __frame, function __$id2label__4() {
          return id2viewname(__cb(_, __frame, 1, 4, function __$id2label__4() {
            return label(__cb(_, __frame, 2, 11, _, true), viewname);
          }, true), id);
        });
      };
      label = function label__5(_, viewname) {
        var __frame = {
          name: "label__5",
          line: 73
        };
        return __func(_, this, arguments, label__5, 0, __frame, function __$label__5() {
          return View.getLabel(__cb(_, __frame, 1, 11, _, true), viewname);
        });
      };
      icon = function(name) {
        return (("<i class='icon-" + name) + "' />");
      };
      return (function __6(_) {
        function KOModelStorage() {
          this.models = {
          };
        };
        KOModelStorage.prototype.getInfo = function KOModelStorage_prototype_getInfo__1(_, id) {
          var __this = this;
          var __frame = {
            name: "KOModelStorage_prototype_getInfo__1",
            line: 86
          };
          return __func(_, this, arguments, KOModelStorage_prototype_getInfo__1, 0, __frame, function __$KOModelStorage_prototype_getInfo__1() {
            return (function __$KOModelStorage_prototype_getInfo__1(__then) {
              if (!((id in __this.models))) {
                return model.cache.getInformation(__cb(_, __frame, 2, 50, function ___(__0, __1) {
                  return __this.createInfoModel(__cb(_, __frame, 2, 26, function ___(__0, __2) {
                    __this.models[id] = __2;
                    __then();
                  }, true), __1);
                }, true), id);
              }
               else {
                __then();
              }
            ;
            })(function __$KOModelStorage_prototype_getInfo__1() {
              return _(null, __this.models[id]);
            });
          });
        };
        KOModelStorage.prototype.getList = function KOModelStorage_prototype_getList__2(_, name) {
          var __this = this;
          var __frame = {
            name: "KOModelStorage_prototype_getList__2",
            line: 93
          };
          return __func(_, this, arguments, KOModelStorage_prototype_getList__2, 0, __frame, function __$KOModelStorage_prototype_getList__2() {
            return (function __$KOModelStorage_prototype_getList__2(__then) {
              if (!((name in __this.models))) {
                return __this.createListModel(__cb(_, __frame, 2, 28, function ___(__0, __1) {
                  __this.models[name] = __1;
                  __then();
                }, true), model[name]);
              }
               else {
                __then();
              }
            ;
            })(function __$KOModelStorage_prototype_getList__2() {
              return _(null, __this.models[name]);
            });
          });
        };
        KOModelStorage.prototype.getObject = function KOModelStorage_prototype_getObject__3(_, name) {
          var __this = this;
          var __frame = {
            name: "KOModelStorage_prototype_getObject__3",
            line: 100
          };
          return __func(_, this, arguments, KOModelStorage_prototype_getObject__3, 0, __frame, function __$KOModelStorage_prototype_getObject__3() {
            return (function __$KOModelStorage_prototype_getObject__3(__then) {
              if (!((name in __this.models))) {
                return __this.createObjectModel(__cb(_, __frame, 2, 28, function ___(__0, __1) {
                  __this.models[name] = __1;
                  __then();
                }, true), model[name]);
              }
               else {
                __then();
              }
            ;
            })(function __$KOModelStorage_prototype_getObject__3() {
              return _(null, __this.models[name]);
            });
          });
        };
        KOModelStorage.prototype.createObjectModel = util.singlify(function __4(_, obj) {
          var koModel;
          var __frame = {
            name: "__4",
            line: 107
          };
          return __func(_, this, arguments, __4, 0, __frame, function __$__4() {
            return obj.get(__cb(_, __frame, 3, 34, function ___(__0, __1) {
              koModel = ko.mapping.fromJS(__1);
              koModel.model = obj;
              obj.onChanged(function(data) {
                return ko.mapping.fromJS(data, koModel);
              });
              return _(null, koModel);
            }, true));
          });
        });
        KOModelStorage.prototype.createListModel = util.singlify(function __5(_, cls) {
          var list;
          var __frame = {
            name: "__5",
            line: 118
          };
          return __func(_, this, arguments, __5, 0, __frame, function __$__5() {
            return cls.getAllIDs(__cb(_, __frame, 3, 32, function ___(__0, __1) {
              list = ko.observableArray(__1);
              cls.onChanged(list);
              return _(null, list);
            }, true));
          });
        });
        KOModelStorage.prototype.createInfoModel = util.singlify(function __6(_, model) {
          var koModel;
          var __frame = {
            name: "__6",
            line: 126
          };
          return __func(_, this, arguments, __6, 0, __frame, function __$__6() {
            koModel = ko.mapping.fromJS(model);
            koModel.model = model;
            model.onChanged(function() {
              return ko.mapping.fromJS(model, koModel);
            });
            return _(null, koModel);
          });
        });
        return _(null, KOModelStorage);
      })(__cb(_, __frame, 138, 19, function ___(__0, __14) {
        KOModelStorage = __14;
        store = new KOModelStorage;
        observableList = function(observedArray, creator) {
          var elements, getElement, list, update;
          elements = {
          };
          list = ko.observableArray([]);
          getElement = function getElement__1(_, id) {
            var __frame = {
              name: "getElement__1",
              line: 148
            };
            return __func(_, this, arguments, getElement__1, 0, __frame, function __$getElement__1() {
              return (function __$getElement__1(__then) {
                if (!((id in elements))) {
                  return creator(__cb(_, __frame, 2, 23, function ___(__0, __1) {
                    elements[id] = __1;
                    __then();
                  }, true), id);
                }
                 else {
                  __then();
                }
              ;
              })(function __$getElement__1() {
                return _(null, elements[id]);
              });
            });
          };
          observedArray.subscribe(update = function update__2(arr, _) {
            var id, _ref;
            var __frame = {
              name: "update__2",
              line: 154
            };
            return __func(_, this, arguments, update__2, 1, __frame, function __$update__2() {
              for (id in elements) {
                if (_ref = !id, (__indexOf.call(arr, _ref) >= 0)) {
                  delete elements[id];
                }
              ;
              };
              return (function __1(_) {
                var _i, _len, _results;
                _results = [];
                _i = 0;
                _len = arr.length;
                var __3 = false;
                return (function ___(__break) {
                  var __more;
                  var __loop = __cb(_, __frame, 0, 0, function __$__1() {
                    __more = false;
                    if (__3) {
                      _i++;
                    }
                     else {
                      __3 = true;
                    }
                  ;
                    var __2 = (_i < _len);
                    if (__2) {
                      id = arr[_i];
                      return getElement(__cb(_, __frame, 6, 24, function ___(__0, __1) {
                        _results.push(__1);
                        while (__more) {
                          __loop();
                        };
                        __more = true;
                      }, true), id);
                    }
                     else {
                      __break();
                    }
                  ;
                  });
                  do {
                    __loop();
                  } while (__more);
                  __more = true;
                })(function __$__1() {
                  return _(null, _results);
                });
              })(__cb(_, __frame, 17, 18, function ___(__0, __3) {
                var __2 = list(__3);
                return _(null, __2);
              }, true));
            });
          });
          update(observedArray(), util.dummyCB);
          return list;
        };
        return (function __7(_) {
          var _views;
          function View() {
          
          };
          _views = [];
          View.registerView = function(regex, cls, label) {
            return _views.push({
              regex: regex,
              cls: cls,
              label: label
            });
          };
          View.getLabel = function View_getLabel__1(_, viewname) {
            var params, row, _ref, __this = this;
            var __frame = {
              name: "View_getLabel__1",
              line: 192
            };
            return __func(_, this, arguments, View_getLabel__1, 0, __frame, function __$View_getLabel__1() {
              _ref = __this._find(viewname), row = _ref[0], params = _ref[1];
              return (function __$View_getLabel__1(__then) {
                if (((((row != null) ? row.label : void 0)) != null)) {
                  return row.label(__cb(_, __frame, 5, 15, _, true), params);
                }
                 else {
                  return _(null, viewname);
                }
              ;
              })(_);
            });
          };
          View.create = function View_create__2(_, viewname, slot) {
            var params, row, _ref, __this = this;
            var __frame = {
              name: "View_create__2",
              line: 203
            };
            return __func(_, this, arguments, View_create__2, 0, __frame, function __$View_create__2() {
              _ref = __this._find(viewname), row = _ref[0], params = _ref[1];
              return (function __$View_create__2(__then) {
                if ((row != null)) {
                  return __construct(row.cls, 0)(__cb(_, __frame, NaN, NaN, _, true), slot, params);
                }
                 else {
                  __then();
                }
              ;
              })(_);
            });
          };
          View._find = function(viewname) {
            var params, row, _i, _len;
            for (_i = 0, _len = _views.length; (_i < _len); _i++) {
              row = _views[_i];
              params = row.regex.exec(viewname);
              if ((params != null)) {
                return [row,params,];
              }
            ;
            };
            return [null,null,];
          };
          View.test = function(viewname) {
            return (this._find(viewname)[0] != null);
          };
          return _(null, View);
        })(__cb(_, __frame, 230, 9, function ___(__0, __15) {
          View = __15;
          return (function __8(_) {
            function Slot(_) {
              var __this = this;
              var __frame = {
                name: "Slot",
                line: 234
              };
              return __func(_, this, arguments, Slot, 0, __frame, function __$Slot() {
                __this.clear = __bind(__this.clear, __this);
                __this.setView = __bind(__this.setView, __this);
                __this.view = ko.observable(null);
                __this.viewname = ko.observable();
                _();
              });
            };
            Slot.prototype.setView = function(viewname) {
              var _this = this;
              if (View.test(viewname)) {
                this.viewname(viewname);
                return util.doAsync(function __1(_) {
                  var __frame = {
                    name: "__1",
                    line: 245
                  };
                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                    return View.create(__cb(_, __frame, 1, 28, function ___(__0, __2) {
                      var __1 = _this.view(__2);
                      return _(null, __1);
                    }, true), viewname, _this);
                  });
                });
              }
            ;
            };
            Slot.prototype.clear = function() {
              return this.view(null);
            };
            return _(null, Slot);
          })(__cb(_, __frame, 256, 9, function ___(__0, __16) {
            Slot = __16;
            SlaveSlot = (function(_super) {
              __extends(SlaveSlot, _super);
              function SlaveSlot() {
                _ref = SlaveSlot.__super__.constructor.apply(this, arguments);
                return _ref;
              };
              SlaveSlot.prototype.setView = (function() {
              
              });
              SlaveSlot.prototype.forceView = function() {
                var args;
                args = ((1 <= arguments.length) ? __slice.call(arguments, 0) : []);
                return Slot.prototype.setView.apply(this, args);
              };
              return SlaveSlot;
            })(Slot);
            return (function __9(_) {
              var _default;
              function SlotGenerator() {
              
              };
              _default = null;
              SlotGenerator.setDefault = function(generator) {
                return _default = generator;
              };
              SlotGenerator.getDefault = function() {
                return _default;
              };
              return _(null, SlotGenerator);
            })(__cb(_, __frame, 296, 18, function ___(__0, __17) {
              SlotGenerator = __17;
              WindowSlotGenerator = (function(_super) {
                __extends(WindowSlotGenerator, _super);
                function WindowSlotGenerator() {
                  _ref1 = WindowSlotGenerator.__super__.constructor.apply(this, arguments);
                  return _ref1;
                };
                WindowSlotGenerator.prototype.show = function(viewname) {
                  return win.setView(viewname);
                };
                WindowSlotGenerator.setDefault(new WindowSlotGenerator);
                return WindowSlotGenerator;
              })(SlotGenerator);
              NewWindowSlotGenerator = (function(_super) {
                __extends(NewWindowSlotGenerator, _super);
                function NewWindowSlotGenerator() {
                  _ref2 = NewWindowSlotGenerator.__super__.constructor.apply(this, arguments);
                  return _ref2;
                };
                NewWindowSlotGenerator.prototype.show = function(viewname) {
                  return window.open(((("" + window.location.origin) + "#") + viewname), "", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,copyhistory=no");
                };
                return NewWindowSlotGenerator;
              })(SlotGenerator);
              poll = function(func, interval) {
                var clock, pollobj, stopped, _this = this;
                if ((interval == null)) {
                  interval = 1000;
                }
              ;
                stopped = false;
                (clock = function() {
                  setTimeout((function() {
                    if (!stopped) {
                      return clock(util.dummyCB);
                    }
                  ;
                  }), (interval - ((new Date().getTime() % interval))));
                  return func();
                })(util.dummyCB);
                return pollobj = {
                  stop: function() {
                    return stopped = true;
                  }
                };
              };
              truncate = function(str, length) {
                if ((length == null)) {
                  length = 20;
                }
              ;
                if ((str.length > (length - 1))) {
                  return (("" + str.slice(0, (length - 2))) + "…");
                }
                 else {
                  return str;
                }
              ;
              };
              WindowSlot = (function(_super) {
                var menu;
                __extends(WindowSlot, _super);
                menu = ko.observableArray(["","inbox","projects",]);
                function WindowSlot(_) {
                  var inbox, __this = this, __arguments = arguments;
                  var __frame = {
                    name: "WindowSlot",
                    line: 374
                  };
                  return __func(_, this, arguments, WindowSlot, 0, __frame, function __$WindowSlot() {
                    __this.deleteMsg = __bind(__this.deleteMsg, __this);
                    __this.setView = __bind(__this.setView, __this);
                    return __apply(__cb(_, __frame, 5, 6, function __$WindowSlot() {
                      __this.msg = ko.observableArray();
                      __this.menu = observableList(menu, function __1(_, viewname) {
                        var __frame = {
                          name: "__1",
                          line: 381
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          return label(__cb(_, __frame, 3, 17, function ___(__0, __2) {
                            var __1 = {
                              url: viewname,
                              label: __2
                            };
                            return _(null, __1);
                          }, true), viewname);
                        });
                      });
                      __this.showlists = ko.observable(false);
                      return store.getList(__cb(_, __frame, 14, 38, function ___(__0, __3) {
                        __this.asaplists = observableList(__3, function __2(_, id) {
                          var __frame = {
                            name: "__2",
                            line: 388
                          };
                          return __func(_, this, arguments, __2, 0, __frame, function __$__2() {
                            return store.getInfo(__cb(_, __frame, 3, 17, function ___(__0, __2) {
                              var __1 = {
                                url: ("asaplist/" + id),
                                label: __2.name
                              };
                              return _(null, __1);
                            }, true), id);
                          });
                        });
                        return store.getObject(__cb(_, __frame, 20, 14, function ___(__0, __4) {
                          inbox = __4;
                          __this.clock = ko.computed(function() {
                            return ((("" + (icon("inbox"))) + " ") + (inbox.size()));
                          });
                          _();
                        }, true), "inbox");
                      }, true), "AsapList");
                    }, true), WindowSlot.__super__.constructor, __this, __arguments, 0);
                  });
                };
                WindowSlot.prototype.setView = function(viewname) {
                  if (View.test(viewname)) {
                    return WindowSlot.__super__.setView.call(this, window.location.hash = viewname);
                  }
                ;
                };
                WindowSlot.prototype.showMessage = function(msg, timeout) {
                  var obs, _this = this;
                  if ((timeout == null)) {
                    timeout = 5000;
                  }
                ;
                  this.msg.push(obs = ko.observable(msg));
                  if ((timeout > 0)) {
                    setTimeout((function() {
                      return _this.msg.shift();
                    }), timeout);
                  }
                ;
                  return obs;
                };
                WindowSlot.prototype.deleteMsg = function(msg) {
                  return this.msg.remove(function(elem) {
                    return (elem() === msg);
                  });
                };
                WindowSlot.prototype.relTime = function(time) {
                  return moment(time).calendar();
                };
                return WindowSlot;
              })(Slot);
              InboxView = (function(_super) {
                __extends(InboxView, _super);
                InboxView.registerView(/^inbox$/, InboxView, function __1(_) {
                  var __frame = {
                    name: "__1",
                    line: 439
                  };
                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                    return _(null, icon("inbox"));
                  });
                });
                function InboxView(_, slot) {
                  var inbox, update, _this, __this = this;
                  var __frame = {
                    name: "InboxView",
                    line: 443
                  };
                  return __func(_, this, arguments, InboxView, 0, __frame, function __$InboxView() {
                    _this = __this;
                    __this.slot = slot;
                    return store.getObject(__cb(_, __frame, 5, 14, function ___(__0, __2) {
                      inbox = __2;
                      __this.template = "inbox";
                      __this.title = ko.computed(function() {
                        return (("Inbox (" + (inbox.size())) + ")");
                      });
                      __this.icon = "inbox";
                      return __construct(SlaveSlot, 0)(__cb(_, __frame, NaN, NaN, function ___(__0, __3) {
                        __this.innerSlot = __3;
                        __this.full = ko.computed(function() {
                          return (inbox.size() > 0);
                        }).extend({
                          throttle: 500
                        });
                        update = function update__1(id, _) {
                          var __frame = {
                            name: "update__1",
                            line: 460
                          };
                          return __func(_, this, arguments, update__1, 1, __frame, function __$update__1() {
                            return id2viewname(__cb(_, __frame, 1, 41, function ___(__0, __2) {
                              var __1 = _this.innerSlot.forceView(__2);
                              return _(null, __1);
                            }, true), id);
                          });
                        };
                        inbox.first.subscribe(update);
                        update(inbox.first());
                        _();
                      }, true));
                    }, true), "inbox");
                  });
                };
                return InboxView;
              })(View);
              return (function __10(_) {
                function TimePicker(name, value, change) {
                  var i, _i, _j;
                  this.name = name;
                  this.value = value;
                  this.change = change;
                  this.set = __bind(this.set, this);
                  this.remove = __bind(this.remove, this);
                  this.options = [];
                  this.addOption(1, "d", "[Tomorrow]");
                  for (i = _i = 2; (_i <= 6); i = ++_i) {
                    this.addOption(i, "d", "dddd");
                  };
                  this.addOption(7, "d", "[In 1 Week]");
                  this.addOption(14, "d", "[In 2 Weeks]");
                  this.addOption(21, "d", "[In 3 Weeks]");
                  for (i = _j = 1; (_j <= 3); i = ++_j) {
                    this.addOption(i, "M", "MMMM", "month");
                  };
                  this.addOption(6, "M", "MMMM", "month");
                  this.addOption(9, "M", "MMMM", "month");
                  this.addOption(365, "d", "[In 1 Year]");
                  this.addOption(1, "y", "YYYY", "year");
                  this.addOption(2, "y", "YYYY", "year");
                  this.selectedDate = ko.observable(this.options[0]);
                };
                TimePicker.prototype.remove = function() {
                  return this.change(null);
                };
                TimePicker.prototype.set = function() {
                  return this.change(this.selectedDate().date.toDate());
                };
                TimePicker.prototype.addOption = function(distance, unit, label, crop) {
                  var option;
                  if ((crop == null)) {
                    crop = "day";
                  }
                ;
                  this.options.push(option = {
                    date: moment().add(distance, unit).startOf(crop)
                  });
                  return option.label = option.date.format(label);
                };
                return _(null, TimePicker);
              })(__cb(_, __frame, 520, 15, function ___(__0, __18) {
                TimePicker = __18;
                InfoView = (function(_super) {
                  __extends(InfoView, _super);
                  function InfoView(_, slot, match) {
                    var _this, __this = this;
                    var __frame = {
                      name: "InfoView",
                      line: 526
                    };
                    return __func(_, this, arguments, InfoView, 0, __frame, function __$InfoView() {
                      _this = __this;
                      __this.slot = slot;
                      __this.setDelay = __bind(__this.setDelay, __this);
                      __this.setStatus = __bind(__this.setStatus, __this);
                      __this.addNote = __bind(__this.addNote, __this);
                      __this.removeReference = __bind(__this.removeReference, __this);
                      __this.addReference = __bind(__this.addReference, __this);
                      __this.id = match[1];
                      return store.getInfo(__cb(_, __frame, 10, 18, function ___(__0, __2) {
                        __this.info = __2;
                        __this.type = __this.info.model.type;
                        __this.template = "info";
                        __this.icon = "info-sign";
                        __this.dirty = false;
                        return __this.init(__cb(_, __frame, 15, 6, function __$InfoView() {
                          __this.states = [{
                            state: "delete",
                            label: "&#xf00d;",
                            tooltip: "Delete",
                            active: ko.computed(function() {
                              return (_this.info.status() === "delete");
                            })
                          },{
                            state: "maybe",
                            label: "&#xf059;",
                            tooltip: "Maybe another time",
                            active: ko.computed(function() {
                              return (_this.info.status() === "maybe");
                            })
                          },{
                            state: "default",
                            label: "&#xf058;",
                            tooltip: "Normal",
                            active: ko.computed(function() {
                              return (_this.info.status() === "default");
                            })
                          },{
                            state: "inbox",
                            label: "&#xf01c;",
                            tooltip: "Put in Inbox",
                            active: ko.computed(function() {
                              return (_this.info.status() === "inbox");
                            })
                          },{
                            state: "urgent",
                            label: "&#xf0a2;",
                            tooltip: "This is urgent!",
                            active: ko.computed(function() {
                              return (_this.info.status() === "urgent");
                            })
                          },];
                          __this.references = observableList(__this.info.references, function __1(_, id) {
                            var __frame = {
                              name: "__1",
                              line: 580
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.cache.getInformation(__cb(_, __frame, 1, 30, function ___(__0, __2) {
                                return __construct(references[__2.type], 0)(__cb(_, __frame, NaN, NaN, _, true), id);
                              }, true), id);
                            });
                          });
                          __this.delayPicker = new TimePicker("delay", __this.info.delay, __this.setDelay);
                          _();
                        }, true));
                      }, true), __this.id);
                    });
                  };
                  InfoView.prototype.addReference = function(viewname) {
                    var _this = this;
                    return (function __1(_) {
                      var __frame = {
                        name: "__1",
                        line: 589
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                        return viewname2info(__cb(_, __frame, 1, 48, function ___(__0, __2) {
                          return _this.info.model.addReference(__cb(_, __frame, 1, 15, _, true), __2);
                        }, true), viewname);
                      });
                    })(util.dummyCB);
                  };
                  InfoView.prototype.removeReference = function(reference) {
                    return this.info.model.removeReference(util.dummyCB, reference.info.model);
                  };
                  InfoView.prototype.addNote = function() {
                    var _this = this;
                    return util.doAsync(function __1(_) {
                      var note;
                      var __frame = {
                        name: "__1",
                        line: 601
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                        note = new model.Note;
                        return note.create(__cb(_, __frame, 4, 8, function __$__1() {
                          return _this.info.model.addReference(__cb(_, __frame, 5, 15, _, true), note);
                        }, true), "", "default");
                      });
                    });
                  };
                  InfoView.prototype.setStatus = function(menuElement) {
                    return this.info.model.setStatus(util.dummyCB, menuElement.state);
                  };
                  InfoView.prototype.setDelay = function(date) {
                    return this.info.model.setDelay(util.dummyCB, date);
                  };
                  InfoView.prototype.save = (function() {
                  
                  });
                  return InfoView;
                })(View);
                return (function __11(_) {
                  function Reference(_, id) {
                    var __this = this;
                    var __frame = {
                      name: "Reference",
                      line: 625
                    };
                    return __func(_, this, arguments, Reference, 0, __frame, function __$Reference() {
                      __this.id = id;
                      return store.getInfo(__cb(_, __frame, 2, 18, function ___(__0, __1) {
                        __this.info = __1;
                        __this.hover = ko.observable(false);
                        __this.type = __this.info.model.type;
                        __this.viewname = info2viewname(__this.info.model);
                        __this.dirty = false;
                        return __this.init(__cb(_, __frame, 7, 6, _, true));
                      }, true), __this.id);
                    });
                  };
                  Reference.prototype.save = (function() {
                  
                  });
                  return _(null, Reference);
                })(__cb(_, __frame, 638, 14, function ___(__0, __19) {
                  Reference = __19;
                  references = {
                  };
                  NoteView = (function(_super) {
                    __extends(NoteView, _super);
                    function NoteView() {
                      _ref3 = NoteView.__super__.constructor.apply(this, arguments);
                      return _ref3;
                    };
                    NoteView.registerView(/^note\/(.*)$/, NoteView, function __1(_, match) {
                      var __frame = {
                        name: "__1",
                        line: 651
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                        return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
                          var __1 = ("Note: " + (__2.content));
                          return _(null, __1);
                        }, true), match[1]);
                      });
                    });
                    NoteView.prototype.init = function NoteView_prototype_init__2(_) {
                      var timeout, _this, __this = this;
                      var __frame = {
                        name: "NoteView_prototype_init__2",
                        line: 655
                      };
                      return __func(_, this, arguments, NoteView_prototype_init__2, 0, __frame, function __$NoteView_prototype_init__2() {
                        _this = __this;
                        __this.title = ko.computed(function() {
                          return ("Note: " + (truncate(_this.info.content())));
                        });
                        __this.icon = "pushpin";
                        __this.content = ko.observable(__this.info.content());
                        timeout = null;
                        __this.dirty = ko.computed(function() {
                          return !((_this.content() === _this.info.content()));
                        });
                        __this.content.subscribe(function() {
                          if ((timeout != null)) {
                            clearTimeout(timeout);
                          }
                        ;
                          return timeout = setTimeout((function() {
                            if (_this.dirty()) {
                              return _this.save();
                            }
                          ;
                          }), 5000);
                        });
                        return _(null, __this.info.content.subscribe(function(content) {
                          return _this.content(content);
                        }));
                      });
                    };
                    NoteView.prototype.save = function() {
                      var _this = this;
                      return util.doAsync(function __1(_) {
                        var save;
                        var __frame = {
                          name: "__1",
                          line: 686
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          save = win.showMessage("Saving …");
                          return _this.info.model.setContent(__cb(_, __frame, 4, 8, function __$__1() {
                            return setTimeout(__cb(_, __frame, 5, 8, function __$__1() {
                              return _(null, save("Save successful!"));
                            }, true), 1000);
                          }, true), _this.content());
                        });
                      });
                    };
                    return NoteView;
                  })(InfoView);
                  references.note = (function(_super) {
                    __extends(note, _super);
                    function note() {
                      _ref4 = note.__super__.constructor.apply(this, arguments);
                      return _ref4;
                    };
                    note.prototype.init = NoteView.prototype.init;
                    note.prototype.save = NoteView.prototype.save;
                    return note;
                  })(Reference);
                  return (function __12(_) {
                    function TaskSelector() {
                      this.delayed = ko.observable(true);
                      this.completed = ko.observable(false);
                      this.blocked = ko.observable(true);
                    };
                    TaskSelector.prototype.toggle = function() {
                      return this(!this());
                    };
                    return _(null, TaskSelector);
                  })(__cb(_, __frame, 728, 17, function ___(__0, __20) {
                    TaskSelector = __20;
                    AsapListView = (function(_super) {
                      __extends(AsapListView, _super);
                      function AsapListView() {
                        this.setFocus = __bind(this.setFocus, this);
                        _ref5 = AsapListView.__super__.constructor.apply(this, arguments);
                        return _ref5;
                      };
                      AsapListView.registerView(/^asaplist\/(.*)$/, AsapListView, function __1(_, match) {
                        var __frame = {
                          name: "__1",
                          line: 739
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          return model.cache.getInformation(__cb(_, __frame, 1, 30, function ___(__0, __2) {
                            var __1 = ("ToDo List: " + (__2.name));
                            return _(null, __1);
                          }, true), match[1]);
                        });
                      });
                      AsapListView.prototype.init = function AsapListView_prototype_init__2(_) {
                        var unfilteredList, _this, __this = this;
                        var __frame = {
                          name: "AsapListView_prototype_init__2",
                          line: 743
                        };
                        return __func(_, this, arguments, AsapListView_prototype_init__2, 0, __frame, function __$AsapListView_prototype_init__2() {
                          _this = __this;
                          util.doAsync(function __1(_) {
                            var __frame = {
                              name: "__1",
                              line: 747
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.Asap.getAllIDs(__cb(_, __frame, 1, 15, _, true));
                            });
                          });
                          __this.selector = new TaskSelector;
                          __this.icon = "tasks";
                          __this.title = __this.info.name;
                          __this.focus = ko.observable(false);
                          return __construct(SlaveSlot, 0)(__cb(_, __frame, NaN, NaN, function ___(__0, __3) {
                            __this.innerSlot = __3;
                            unfilteredList = observableList(__this.info.asaps, function __2(_, id) {
                              var __frame = {
                                name: "__2",
                                line: 755
                              };
                              return __func(_, this, arguments, __2, 0, __frame, function __$__2() {
                                return __construct(AsapListViewElement, 0)(__cb(_, __frame, NaN, NaN, _, true), id);
                              });
                            });
                            return _(null, __this.list = ko.computed(function() {
                              var asap, _i, _len, _ref6, _results;
                              _ref6 = unfilteredList();
                              _results = [];
                              for (_i = 0, _len = _ref6.length; (_i < _len); _i++) {
                                asap = _ref6[_i];
                                if ((((!asap.done() || _this.selector.completed())) && ((asap.active() || _this.selector.delayed())))) {
                                  _results.push(asap);
                                }
                              ;
                              };
                              return _results;
                            }).extend({
                              throttle: 1
                            }));
                          }, true));
                        });
                      };
                      AsapListView.prototype.setFocus = function(data) {
                        var _this = this;
                        return util.doAsync(function __1(_) {
                          var __frame = {
                            name: "__1",
                            line: 778
                          };
                          return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                            return id2viewname(__cb(_, __frame, 1, 41, function ___(__0, __2) {
                              var __1 = _this.innerSlot.forceView(__2);
                              return _(null, __1);
                            }, true), ko.utils.unwrapObservable(data.id));
                          });
                        });
                      };
                      return AsapListView;
                    })(InfoView);
                    return (function __13(_) {
                      function AsapListViewElement(_, id) {
                        var _this, __this = this;
                        var __frame = {
                          name: "AsapListViewElement",
                          line: 788
                        };
                        return __func(_, this, arguments, AsapListViewElement, 0, __frame, function __$AsapListViewElement() {
                          _this = __this;
                          __this.id = id;
                          __this.toggleDone = __bind(__this.toggleDone, __this);
                          return store.getInfo(__cb(_, __frame, 5, 18, function ___(__0, __1) {
                            __this.asap = __1;
                            __this.done = ko.computed((function() {
                              return (_this.asap.completed() != null);
                            }));
                            __this.active = __this.asap.active;
                            __this.description = __this.asap.description;
                            __this.project = ko.computed((function() {
                              var prj;
                              prj = ko.observable(null);
                              if ((_this.asap.parent() != null)) {
                                util.doAsync(function __1(_) {
                                  var __frame = {
                                    name: "__1",
                                    line: 804
                                  };
                                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                                    return store.getInfo(__cb(_, __frame, 1, 23, function ___(__0, __2) {
                                      var __1 = prj(__2);
                                      return _(null, __1);
                                    }, true), _this.asap.parent());
                                  });
                                });
                              }
                            ;
                              return prj;
                            }));
                            _();
                          }, true), __this.id);
                        });
                      };
                      AsapListViewElement.prototype.toggleDone = function() {
                        if (this.done()) {
                          return this.asap.model.undo(util.dummyCB);
                        }
                         else {
                          return this.asap.model.done(util.dummyCB);
                        }
                      ;
                      };
                      return _(null, AsapListViewElement);
                    })(__cb(_, __frame, 821, 24, function ___(__0, __21) {
                      AsapListViewElement = __21;
                      ProjectView = (function(_super) {
                        __extends(ProjectView, _super);
                        function ProjectView() {
                          _ref6 = ProjectView.__super__.constructor.apply(this, arguments);
                          return _ref6;
                        };
                        ProjectView.registerView(/^project\/(.*)$/, ProjectView, function __1(_, match) {
                          var __frame = {
                            name: "__1",
                            line: 832
                          };
                          return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                            return model.cache.getInformation(__cb(_, __frame, 1, 28, function ___(__0, __2) {
                              var __1 = ("Project: " + (__2.description));
                              return _(null, __1);
                            }, true), match[1]);
                          });
                        });
                        ProjectView.prototype.init = function ProjectView_prototype_init__2(_) {
                          var __this = this;
                          var __frame = {
                            name: "ProjectView_prototype_init__2",
                            line: 836
                          };
                          return __func(_, this, arguments, ProjectView_prototype_init__2, 0, __frame, function __$ProjectView_prototype_init__2() {
                            __this.title = __this.info.description;
                            return _(null, __this.icon = "sitemap");
                          });
                        };
                        return ProjectView;
                      })(InfoView);
                      AsapView = (function(_super) {
                        __extends(AsapView, _super);
                        function AsapView() {
                          this.toggleDone = __bind(this.toggleDone, this);
                          this.setDeadline = __bind(this.setDeadline, this);
                          _ref7 = AsapView.__super__.constructor.apply(this, arguments);
                          return _ref7;
                        };
                        AsapView.registerView(/^asap\/(.*)$/, AsapView, function __1(_, match) {
                          var __frame = {
                            name: "__1",
                            line: 854
                          };
                          return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                            return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
                              var __1 = ("ToDo: " + (__2.description));
                              return _(null, __1);
                            }, true), match[1]);
                          });
                        });
                        AsapView.prototype.init = function AsapView_prototype_init__2(_) {
                          var timeout, _this, __this = this;
                          var __frame = {
                            name: "AsapView_prototype_init__2",
                            line: 858
                          };
                          return __func(_, this, arguments, AsapView_prototype_init__2, 0, __frame, function __$AsapView_prototype_init__2() {
                            _this = __this;
                            __this.title = __this.info.description;
                            __this.icon = "edit";
                            __this.deadlinePicker = new TimePicker("deadline", __this.info.deadline, __this.setDeadline);
                            __this.done = ko.computed((function() {
                              return (_this.info.completed() != null);
                            }));
                            __this.description = ko.observable(__this.info.description());
                            timeout = null;
                            __this.dirty = ko.computed(function() {
                              return !((_this.description() === _this.info.description()));
                            });
                            __this.description.subscribe(function() {
                              if ((timeout != null)) {
                                clearTimeout(timeout);
                              }
                            ;
                              return timeout = setTimeout((function() {
                                if (_this.dirty()) {
                                  return _this.save();
                                }
                              ;
                              }), 5000);
                            });
                            __this.info.description.subscribe(function(description) {
                              return _this.description(description);
                            });
                            return _(null, __this.project = ko.computed((function() {
                              var prj;
                              prj = ko.observable(null);
                              if ((_this.info.parent() != null)) {
                                util.doAsync(function __1(_) {
                                  var __frame = {
                                    name: "__1",
                                    line: 891
                                  };
                                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                                    return store.getInfo(__cb(_, __frame, 1, 23, function ___(__0, __2) {
                                      var __1 = prj(__2);
                                      return _(null, __1);
                                    }, true), _this.info.parent());
                                  });
                                });
                              }
                            ;
                              return prj;
                            })));
                          });
                        };
                        AsapView.prototype.save = function() {
                          var _this = this;
                          return util.doAsync(function __1(_) {
                            var save;
                            var __frame = {
                              name: "__1",
                              line: 902
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              save = win.showMessage("Saving …");
                              return _this.info.model.setDescription(__cb(_, __frame, 4, 8, function __$__1() {
                                return setTimeout(__cb(_, __frame, 5, 8, function __$__1() {
                                  return _(null, save("Save successful!"));
                                }, true), 1000);
                              }, true), _this.description());
                            });
                          });
                        };
                        AsapView.prototype.setDeadline = function(date) {
                          return this.info.model.setDeadline(util.dummyCB, date);
                        };
                        AsapView.prototype.toggleDone = function() {
                          if (this.done()) {
                            return this.info.model.undo(util.dummyCB);
                          }
                           else {
                            return this.info.model.done(util.dummyCB);
                          }
                        ;
                        };
                        return AsapView;
                      })(InfoView);
                      ProjectsView = (function(_super) {
                        __extends(ProjectsView, _super);
                        ProjectsView.registerView(/^projects$/, ProjectsView, function __1(_) {
                          var __frame = {
                            name: "__1",
                            line: 931
                          };
                          return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                            return _(null, icon("sitemap"));
                          });
                        });
                        function ProjectsView(_, slot) {
                          var __this = this;
                          var __frame = {
                            name: "ProjectsView",
                            line: 935
                          };
                          return __func(_, this, arguments, ProjectsView, 0, __frame, function __$ProjectsView() {
                            __this.slot = slot;
                            __this.template = "projects";
                            __this.title = "Projects";
                            __this.icon = "sitemap";
                            _();
                          });
                        };
                        return ProjectsView;
                      })(View);
                      MainView = (function(_super) {
                        __extends(MainView, _super);
                        MainView.registerView(/^$/, MainView, function __1(_) {
                          var __frame = {
                            name: "__1",
                            line: 949
                          };
                          return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                            return _(null, icon("pencil"));
                          });
                        });
                        function MainView(_, slot) {
                          var __this = this;
                          var __frame = {
                            name: "MainView",
                            line: 953
                          };
                          return __func(_, this, arguments, MainView, 0, __frame, function __$MainView() {
                            __this.slot = slot;
                            __this.title = "Secretarius";
                            __this.template = "main";
                            __this.icon = "pencil";
                            _();
                          });
                        };
                        return MainView;
                      })(View);
                      return __construct(WindowSlot, 0)(__cb(_, __frame, NaN, NaN, function ___(__0, __22) {
                        win = __22;
                        if (View.test(document.location.hash.slice(1))) {
                          win.setView(document.location.hash.slice(1));
                        }
                         else {
                          win.setView("");
                        }
                      ;
                        ko.bindingHandlers.drop = {
                          init: function(element, valueAccessor) {
                            var $element;
                            $element = $(element);
                            $element.bind("dragover", function(ev) {
                              return ev.originalEvent.preventDefault();
                            });
                            return $element.bind("drop", function(ev) {
                              ev.originalEvent.preventDefault();
                              return valueAccessor()(ev.originalEvent.dataTransfer.getData("text/plain"));
                            });
                          }
                        };
                        ko.bindingHandlers.emitter = {
                          init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            return ko.bindingHandlers.drag.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                          },
                          update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            return ko.bindingHandlers.attr.update(element, (function() {
                              return {
                                href: ("#" + (ko.utils.unwrapObservable(valueAccessor())))
                              };
                            }), allBindingsAccessor, viewModel, bindingContext);
                          }
                        };
                        ko.bindingHandlers.mouse = {
                          init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var handler, obs, timeout, to;
                            obs = valueAccessor();
                            if (((to = allBindingsAccessor().mouseTimeout) != null)) {
                              timeout = null;
                              handler = {
                                mouseenter: function() {
                                  if ((timeout != null)) {
                                    clearTimeout(timeout);
                                  }
                                ;
                                  return obs(true);
                                },
                                mouseleave: function() {
                                  if ((timeout != null)) {
                                    clearTimeout(timeout);
                                  }
                                ;
                                  return timeout = setTimeout((function() {
                                    return obs(false);
                                  }), to);
                                }
                              };
                            }
                             else {
                              handler = {
                                mouseenter: function() {
                                  return obs(true);
                                },
                                mouseleave: function() {
                                  return obs(false);
                                }
                              };
                            }
                          ;
                            return ko.bindingHandlers.event.init(element, (function() {
                              return handler;
                            }), allBindingsAccessor, viewModel, bindingContext);
                          }
                        };
                        ko.bindingHandlers.drag = {
                          init: function(element, valueAccessor) {
                            var $element, _this = this;
                            $element = $(element);
                            $element.attr("draggable", "true");
                            return $element.bind("dragstart", function(ev) {
                              ev.originalEvent.dataTransfer.setData("text/plain", ko.utils.unwrapObservable(valueAccessor()));
                              return ev.originalEvent.dataTransfer.setData("text/uri-list", ((("" + window.location.origin) + "/#") + (ko.utils.unwrapObservable(valueAccessor()))));
                            });
                          }
                        };
                        ko.virtualElements.allowedBindings.fadeVisible = true;
                        ko.bindingHandlers.fadeVisible = {
                          init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var child, _results;
                            child = ko.virtualElements.firstChild(element);
                            _results = [];
                            while ((child != null)) {
                              if ((child.nodeType === 1)) {
                                $(child).toggle(ko.utils.unwrapObservable(valueAccessor()));
                              }
                            ;
                              _results.push(child = ko.virtualElements.nextSibling(child));
                            };
                            return _results;
                          },
                          update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            var child, show, _results;
                            if (!(show = ko.utils.unwrapObservable(valueAccessor()))) {
                              child = ko.virtualElements.firstChild(element);
                              while ((child != null)) {
                                if ((child.nodeType === 1)) {
                                  $(child).stop(true, true).fadeOut(500);
                                }
                              ;
                                child = ko.virtualElements.nextSibling(child);
                              };
                            }
                          ;
                            if (show) {
                              child = ko.virtualElements.firstChild(element);
                              _results = [];
                              while ((child != null)) {
                                if ((child.nodeType === 1)) {
                                  $(child).stop(true, true).fadeIn(500);
                                }
                              ;
                                _results.push(child = ko.virtualElements.nextSibling(child));
                              };
                              return _results;
                            }
                          ;
                          }
                        };
                        ko.bindingHandlers.autosize = {
                          init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            $(element).autosize();
                            allBindingsAccessor().valueUpdate = "afterkeydown";
                            return ko.bindingHandlers.value.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                          },
                          update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            setTimeout((function() {
                              return $(element).trigger("autosize");
                            }), 0);
                            return ko.bindingHandlers.value.update(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
                          }
                        };
                        ko.bindingHandlers.slidingList = {
                          makeValueAccessor: function(valueAccessor) {
                            return function() {
                              return {
                                data: valueAccessor(),
                                beforeRemove: function(elem) {
                                  if ((elem.nodeType === 1)) {
                                    return $(elem).slideUp(500, function() {
                                      return $(elem).remove();
                                    });
                                  }
                                ;
                                },
                                afterAdd: function(elem) {
                                  if ((elem.nodeType === 1)) {
                                    return $(elem).hide().slideDown(500);
                                  }
                                ;
                                }
                              };
                            };
                          },
                          init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            return ko.bindingHandlers.foreach.init(element, ko.bindingHandlers.slidingList.makeValueAccessor(valueAccessor));
                          },
                          update: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
                            return ko.bindingHandlers.foreach.update(element, ko.bindingHandlers.slidingList.makeValueAccessor(valueAccessor), allBindingsAccessor, viewModel, bindingContext);
                          }
                        };
                        $(document).on("click", "a[href=\"\"]", function() {
                          return false;
                        });
                        $(document).on("click", "a[href^=\"#\"]", function() {
                          SlotGenerator.getDefault().show($(this).attr("href").slice(1));
                          return false;
                        });
                        setInterval((function() {
                          return $("time").html(function() {
                            return win.relTime($(this).attr("datetime"));
                          });
                        }), 1000);
                        $(function() {
                          return ko.applyBindings(win, document.documentElement);
                        });
                        _();
                      }, true));
                    }, true));
                  }, true));
                }, true));
              }, true));
            }, true));
          }, true));
        }, true));
      }, true));
    })(__cb(_, __frame, 1155, 0, _, true));
  });
}).call(this, __trap);