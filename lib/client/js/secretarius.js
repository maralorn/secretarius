/*** Generated by streamline 0.4.7 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap;
(function main(_) {
  var __this = this;
  var __frame = {
    name: "main",
    line: 1
  };
  return __func(_, this, arguments, main, 0, __frame, function __$main() {
    return (function __1(_) {
      var AsapCreator, AsapListCreator, AsapListView, AsapListsList, AsapView, Flippable, InboxView, InfoClassListManager, InfoClassPicker, InfoList, InfoListManager, InfoView, ListManager, ListPicker, NewWindowSlotGenerator, NoteCreator, NoteView, ProjectCreator, ProjectPicker, ProjectView, ProjectsView, ReferenceList, Slot, SlotGenerator, TaskList, TaskView, TimePicker, Uploader, View, ViewModel, WindowSlot, WindowSlotGenerator, createInfoButton, defaultTo, id2label, id2viewname, info, info2label, info2viewname, key, ko, label, model, sec, util, value, viewname2info, win, __hasProp, __extends, _this, __indexOf;
      __hasProp = {
      }.hasOwnProperty;
      __extends = function(child, parent) {
        for (var key in parent) {
          if (__hasProp.call(parent, key)) {
            child[key] = parent[key];
          };
        };
        function ctor() {
          this.constructor = child;
        };
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      };
      _this = __this;
      __indexOf = ([].indexOf || function(item) {
        for (var i = 0, l = this.length; (i < l); i++) {
          if (((i in this) && (this[i] === item))) {
            return i
          };
        };
        return -1;
      });
      require("./vendor/jquery");
      require("./vendor/jquery.autosize");
      require("./vendor/date.extensions");
      ko = require("./vendor/knockout");
      sec = require("libsecretarius");
      util = sec.util;
      model = sec();
      defaultTo = function(obj, defaults) {
        var key, value, _results;
        _results = [];
        for (key in defaults) {
          value = defaults[key];
          if ((obj[key] == null)) {
            _results.push(obj[key] = value);
          }
           else {
            _results.push(void 0);
          }
        ;
        };
        return _results;
      };
      id2viewname = function id2viewname__1(_, id) {
        var __frame = {
          name: "id2viewname__1",
          line: 36
        };
        return __func(_, this, arguments, id2viewname__1, 0, __frame, function __$id2viewname__1() {
          return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
            var __1 = info2viewname(__2);
            return _(null, __1);
          }, true), id);
        });
      };
      viewname2info = function viewname2info__2(_, viewname) {
        var id, _ref;
        var __frame = {
          name: "viewname2info__2",
          line: 40
        };
        return __func(_, this, arguments, viewname2info__2, 0, __frame, function __$viewname2info__2() {
          return (function __$viewname2info__2(__then) {
            if (((id = (((_ref = /^\w*\/(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
              return model.cache.getInformation(__cb(_, __frame, 3, 13, _, true), id);
            }
             else {
              return _(new Error(("No Infoview Name: " + viewname)));
            }
          ;
          })(_);
        });
      };
      info2label = function info2label__3(_, info) {
        var __frame = {
          name: "info2label__3",
          line: 49
        };
        return __func(_, this, arguments, info2label__3, 0, __frame, function __$info2label__3() {
          return label(__cb(_, __frame, 1, 11, _, true), info2viewname(info));
        });
      };
      info2viewname = function(info) {
        return ((("" + info.type) + "/") + info.id);
      };
      id2label = function id2label__4(_, id) {
        var __frame = {
          name: "id2label__4",
          line: 57
        };
        return __func(_, this, arguments, id2label__4, 0, __frame, function __$id2label__4() {
          return id2viewname(__cb(_, __frame, 1, 4, function __$id2label__4() {
            return label(__cb(_, __frame, 2, 11, _, true), viewname);
          }, true), id);
        });
      };
      label = function label__5(_, viewname) {
        var __frame = {
          name: "label__5",
          line: 62
        };
        return __func(_, this, arguments, label__5, 0, __frame, function __$label__5() {
          return View.getLabel(__cb(_, __frame, 1, 11, _, true), viewname);
        });
      };
      return (function __6(_) {
        function ViewModel() {
          this.__connections = [];
          this.__elements = [];
          this.__stopped = false;
        };
        ViewModel.prototype.connect = function(obj, event, callback) {
          var cb, _this = this;
          cb = function(data) {
            return (function __1(_) {
              var __frame = {
                name: "__1",
                line: 78
              };
              return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                return callback(__cb(_, __frame, 1, 17, _, true), data);
              });
            })(util.dummyCB);
          };
          cb.event = event;
          cb.obj = obj;
          this.__connections.push(cb);
          return obj.on(event, cb);
        };
        ViewModel.prototype.stop = function() {
          var cb, elem, _i, _j, _len, _len1, _ref, _ref1;
          this.__stopped = true;
          _ref = this.__connections;
          for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
            cb = _ref[_i];
            cb.obj.removeCB(cb.event, cb);
          };
          _ref1 = this.__elements;
          for (_j = 0, _len1 = _ref1.length; (_j < _len1); _j++) {
            elem = _ref1[_j];
            elem.stop();
          };
          return this.__elements = [];
        };
        ViewModel.prototype.add = function(elem) {
          return this.__elements.push(elem);
        };
        ViewModel.prototype["delete"] = function(elem) {
          var e;
          this.__elements = (function() {
            var _i, _len, _ref, _results;
            _ref = this.__elements;
            _results = [];
            for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
              e = _ref[_i];
              if ((elem !== e)) {
                _results.push(e);
              }
            ;
            };
            return _results;
          }).call(this);
          return elem.stop();
        };
        ViewModel.prototype.poll = function(func, interval) {
          var clock, _this = this;
          if ((interval == null)) {
            interval = 1000;
          }
        ;
          return (clock = function() {
            setTimeout((function() {
              if (!_this.__stopped) {
                return clock(util.dummyCB);
              }
            ;
            }), (interval - ((new Date().getTime() % interval))));
            return func();
          })(util.dummyCB);
        };
        return _(null, ViewModel);
      })(__cb(_, __frame, 142, 14, function ___(__0, __15) {
        ViewModel = __15;
        View = (function(_super) {
          var _views;
          __extends(View, _super);
          function View() {
            return View.__super__.constructor.apply(this, arguments);
          };
          _views = [];
          View.registerView = function(regex, cls, label) {
            return _views.push({
              regex: regex,
              cls: cls,
              label: label
            });
          };
          View.getLabel = function View_getLabel__1(_, viewname) {
            var params, row, _ref, __this = this;
            var __frame = {
              name: "View_getLabel__1",
              line: 164
            };
            return __func(_, this, arguments, View_getLabel__1, 0, __frame, function __$View_getLabel__1() {
              _ref = __this._find(viewname), row = _ref[0], params = _ref[1];
              return (function __$View_getLabel__1(__then) {
                if (((((row != null) ? row.label : void 0)) != null)) {
                  return row.label(__cb(_, __frame, 4, 15, _, true), params);
                }
                 else {
                  return _(null, viewname);
                }
              ;
              })(_);
            });
          };
          View.create = function(viewname, slot) {
            var params, row, _ref;
            _ref = this._find(viewname), row = _ref[0], params = _ref[1];
            if ((row != null)) {
              return new row.cls(slot, params);
            }
          ;
          };
          View._find = function(viewname) {
            var params, row, _i, _len;
            for (_i = 0, _len = _views.length; (_i < _len); _i++) {
              row = _views[_i];
              params = row.regex.exec(viewname);
              if ((params != null)) {
                return [row,params,];
              }
            ;
            };
            return [null,null,];
          };
          View.test = function(viewname) {
            return (this._find(viewname)[0] != null);
          };
          return View;
        })(ViewModel);
        Slot = (function(_super) {
          __extends(Slot, _super);
          function Slot() {
            Slot.__super__.constructor.apply(this, arguments);
            this.used = ko.observable(false);
          };
          Slot.prototype.setView = function(viewname) {
            if (View.test(viewname)) {
              this.clear();
              this.view = View.create(viewname, this);
              return this.used(true);
            }
          ;
          };
          Slot.prototype.clear = function() {
            var _ref;
            this.used(false);
            return (((_ref = this.view) != null) ? _ref.stop() : void 0);
          };
          return Slot;
        })(ViewModel);
        return (function __7(_) {
          var _default;
          function SlotGenerator() {
          
          };
          _default = null;
          SlotGenerator.setDefault = function(generator) {
            return _default = generator;
          };
          SlotGenerator.getDefault = function() {
            return _default;
          };
          return _(null, SlotGenerator);
        })(__cb(_, __frame, 245, 18, function ___(__0, __16) {
          SlotGenerator = __16;
          WindowSlotGenerator = (function(_super) {
            __extends(WindowSlotGenerator, _super);
            function WindowSlotGenerator() {
              return WindowSlotGenerator.__super__.constructor.apply(this, arguments);
            };
            WindowSlotGenerator.prototype.show = function WindowSlotGenerator_prototype_show__1(_, viewname) {
              var __frame = {
                name: "WindowSlotGenerator_prototype_show__1",
                line: 256
              };
              return __func(_, this, arguments, WindowSlotGenerator_prototype_show__1, 0, __frame, function __$WindowSlotGenerator_prototype_show__1() {
                return win.setView(__cb(_, __frame, 1, 13, _, true), viewname);
              });
            };
            WindowSlotGenerator.setDefault(new WindowSlotGenerator);
            return WindowSlotGenerator;
          })(SlotGenerator);
          NewWindowSlotGenerator = (function(_super) {
            __extends(NewWindowSlotGenerator, _super);
            function NewWindowSlotGenerator() {
              return NewWindowSlotGenerator.__super__.constructor.apply(this, arguments);
            };
            NewWindowSlotGenerator.prototype.show = function(viewname) {
              return window.open(((("" + window.location.origin) + "#") + viewname), "", "toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,copyhistory=no");
            };
            return NewWindowSlotGenerator;
          })(SlotGenerator);
          WindowSlot = (function(_super) {
            var menu;
            __extends(WindowSlot, _super);
            menu = ["","inbox","projects",];
            function WindowSlot() {
              var _this = this;
              WindowSlot.__super__.constructor.apply(this, arguments);
              this.msg = ko.observableArray();
              this.menu = ko.observableArray();
              (function __1(_) {
                var viewname, _i, _len, _results;
                var __frame = {
                  name: "__1",
                  line: 294
                };
                return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                  _results = [];
                  _i = 0;
                  _len = menu.length;
                  var __3 = false;
                  return (function ___(__break) {
                    var __more;
                    var __loop = __cb(_, __frame, 0, 0, function __$__1() {
                      __more = false;
                      if (__3) {
                        _i++;
                      }
                       else {
                        __3 = true;
                      }
                    ;
                      var __2 = (_i < _len);
                      if (__2) {
                        viewname = menu[_i];
                        return label(__cb(_, __frame, 7, 19, function ___(__0, __1) {
                          _results.push(_this.menu.push({
                            url: viewname,
                            label: __1
                          }));
                          while (__more) {
                            __loop();
                          };
                          __more = true;
                        }, true), viewname);
                      }
                       else {
                        __break();
                      }
                    ;
                    });
                    do {
                      __loop();
                    } while (__more);
                    __more = true;
                  })(function __$__1() {
                    return _(null, _results);
                  });
                });
              })(util.dummyCB);
              this.clock = ko.observable("");
              this.poll(function __2(_) {
                var __this = this;
                var __frame = {
                  name: "__2",
                  line: 307
                };
                return __func(_, this, arguments, __2, 0, __frame, function __$__2() {
                  return (model.inbox.getSize(__cb(_, __frame, 1, 75, function ___(__0, __2) {
                    var __1 = __this.clock(((("" + (new Date().toLocaleString())) + " Inbox:") + __2));
                    return _(null, __1);
                  }, true)));
                });
              });
            };
            WindowSlot.prototype.setView = function WindowSlot_prototype_setView__1(_, viewname) {
              var __this = this;
              var __frame = {
                name: "WindowSlot_prototype_setView__1",
                line: 312
              };
              return __func(_, this, arguments, WindowSlot_prototype_setView__1, 0, __frame, function __$WindowSlot_prototype_setView__1() {
                return WindowSlot.__super__.setView.call(__this, __cb(_, __frame, 1, 13, _, true), window.location.hash = viewname);
              });
            };
            WindowSlot.prototype.showMessage = function WindowSlot_prototype_showMessage__2(_, msg, timeout) {
              var _this, __this = this;
              var __frame = {
                name: "WindowSlot_prototype_showMessage__2",
                line: 316
              };
              return __func(_, this, arguments, WindowSlot_prototype_showMessage__2, 0, __frame, function __$WindowSlot_prototype_showMessage__2() {
                _this = __this;
                if ((timeout == null)) {
                  timeout = 5000;
                }
              ;
                __this.msg.push(msg);
                return _(null, setTimeout((function() {
                  return _this.msg.shift();
                }), timeout));
              });
            };
            return WindowSlot;
          })(Slot);
          ListManager = (function(_super) {
            __extends(ListManager, _super);
            function ListManager(creator) {
              var _this = this;
              this.creator = creator;
              this.setList = function() {
                return ListManager.prototype.setList.apply(_this, arguments);
              };
              this.list = ko.observableArray();
            };
            ListManager.prototype.setList = function ListManager_prototype_setList__1(_, list) {
              var id, ids, item, newelem, _i, _len, _ref, _this, __this = this;
              var __frame = {
                name: "ListManager_prototype_setList__1",
                line: 344
              };
              return __func(_, this, arguments, ListManager_prototype_setList__1, 0, __frame, function __$ListManager_prototype_setList__1() {
                _this = __this;
                return (function __1(_) {
                  var _i, _len, _ref, _results;
                  _ref = __this.list();
                  _results = [];
                  for (_i = 0, _len = _ref.length; (_i < _len); _i++) {
                    item = _ref[_i];
                    _results.push(item.id);
                  };
                  return _(null, _results);
                })(__cb(_, __frame, 12, 12, function ___(__0, __2) {
                  ids = __2;
                  _i = 0;
                  _len = list.length;
                  var __6 = false;
                  return (function ___(__break) {
                    var __more;
                    var __loop = __cb(_, __frame, 0, 0, function __$ListManager_prototype_setList__1() {
                      __more = false;
                      if (__6) {
                        _i++;
                      }
                       else {
                        __6 = true;
                      }
                    ;
                      var __5 = (_i < _len);
                      if (__5) {
                        id = list[_i];
                        if (!(_ref = !id, (__indexOf.call(ids, _ref) >= 0))) {
                          while (__more) {
                            __loop();
                          };
                          __more = true;
                          return;
                        }
                      ;
                        return __this.creator(__cb(_, __frame, 18, 34, function ___(__0, __3) {
                          __this.list.push((newelem = __3));
                          __this.add(newelem);
                          while (__more) {
                            __loop();
                          };
                          __more = true;
                        }, true), id);
                      }
                       else {
                        __break();
                      }
                    ;
                    });
                    do {
                      __loop();
                    } while (__more);
                    __more = true;
                  })(function __$ListManager_prototype_setList__1() {
                    __this.list.remove(function(item) {
                      var del, _ref1;
                      if (!(del = (_ref1 = item.id, (__indexOf.call(list, _ref1) >= 0)))) {
                        _this["delete"](item);
                      }
                    ;
                      return del;
                    });
                    return _(null, __this.list.sort(function(lhs, rhs) {
                      var diff;
                      diff = (list.indexOf(rhs.id) - list.indexOf(lhs.id));
                      if ((diff < 0)) {
                        return -1;
                      }
                       else if ((diff > 0)) {
                        return 1;
                      }
                       else {
                        return 0;
                      }
                      
                    ;
                    }));
                  });
                }, true));
              });
            };
            "class DropArea\n	constructor: (contentNode, cb) ->\n		contentNode.bind 'dragover', (ev) -> do ev.originalEvent.preventDefault\n		contentNode.bind 'drop', (ev) ->\n			do ev.originalEvent.preventDefault\n			cb ev.originalEvent.dataTransfer.getData 'text/plain'\n\nclass Emitter\n	constructor: (@node, @slotGenerator) ->\n		@slotGenerator ?= do SlotGenerator.getDefault\n		@node.attr 'draggable', 'true'\n		@node.bind 'dragstart', (ev) =>\n			ev.originalEvent.dataTransfer.setData 'text/plain', do @getViewName\n			ev.originalEvent.dataTransfer.setData 'text/uri-list', \"http://#{window.location.origin}##{@getViewName()}\"\n		@node.click =>\n			@slotGenerator.show do @getViewName\n	\n	setViewName: (@viewName) ->\n\n	getViewName: ->\n		@viewName";
            return ListManager;
          })(ViewModel);
          return (function __8(_) {
            function Flippable(front, back) {
              var _ref, _this = this;
              this.front = front;
              this.back = back;
              this.toggle = function() {
                return Flippable.prototype.toggle.apply(_this, arguments);
              };
              this.showFront = function() {
                return Flippable.prototype.showFront.apply(_this, arguments);
              };
              this.showBack = function() {
                return Flippable.prototype.showBack.apply(_this, arguments);
              };
              this.flipped = false;
              if (((_ref = this.back) != null)) {
                _ref.addClass("backside");
              }
            ;
            };
            Flippable.prototype.showBack = function() {
              var _ref, _ref1;
              if (((_ref = this.front) != null)) {
                _ref.addClass("backside");
              }
            ;
              return (((_ref1 = this.back) != null) ? _ref1.removeClass("backside") : void 0);
            };
            Flippable.prototype.showFront = function() {
              var _ref, _ref1;
              if (((_ref = this.front) != null)) {
                _ref.removeClass("backside");
              }
            ;
              return (((_ref1 = this.back) != null) ? _ref1.addClass("backside") : void 0);
            };
            Flippable.prototype.toggle = function() {
              if (this.flipped = !this.flipped) {
                return this.showBack();
              }
               else {
                return this.showFront();
              }
            ;
            };
            Flippable.prototype.addToggler = function(toggler) {
              var _this = this;
              return toggler.click(function() {
                _this.toggle();
                return false;
              });
            };
            return _(null, Flippable);
          })(__cb(_, __frame, 528, 34, function ___(__0, __17) {
            exports.Flippable = Flippable = __17;
            return (function __9(_) {
              var defaults;
              function Uploader(node, options) {
                var flip, links;
                this.node = node;
                this.options = ((options != null) ? options : {
                });
                defaultTo(this.options, defaults);
                links = $("button", this.node);
                flip = new Flippable(links.first(), $("form", this.node));
                flip.addToggler(links);
              };
              defaults = {
                upload: function() {
                
                },
                name: "File"
              };
              return _(null, Uploader);
            })(__cb(_, __frame, 550, 32, function ___(__0, __18) {
              exports.Uploader = Uploader = __18;
              return (function __10(_) {
                var defaults, units;
                function TimePicker(node, options) {
                  var unit, _this = this;
                  this.node = node;
                  this.options = options;
                  this.getDate = function() {
                    return TimePicker.prototype.getDate.apply(_this, arguments);
                  };
                  this.save = function() {
                    return TimePicker.prototype.save.apply(_this, arguments);
                  };
                  this.setDate = function(date) {
                    _this.date = date;
                    return TimePicker.prototype.setDate.apply(_this, arguments);
                  };
                  defaultTo(this.options, defaults);
                  this.node.addClass("timepicker");
                  this.outerFlip = new Flippable($(".front", this.node), $(".back", this.node), 0);
                  this.innerFlip = new Flippable($(".front > button", this.node), $(".front > span", this.node), 0);
                  this.outerFlip.addToggler($("button", this.node));
                  this.display = $("span.reltime", this.node);
                  for (unit in units) {
                    this[unit] = $((("input[name='" + unit) + "']"), this.node);
                  };
                  this.setDate(this.options.date);
                  $("button[name=delete]", this.node).click(function() {
                    _this.options.change(null);
                    _this.setDate(null);
                    return false;
                  });
                  $("button[name=save]", this.node).click(function() {
                    _this.save();
                    return false;
                  });
                };
                units = {
                  year: "FullYear",
                  month: "Month",
                  day: "Date",
                  minute: "Minutes",
                  hour: "Hours",
                  second: "Seconds"
                };
                defaults = {
                  change: function() {
                  
                  },
                  name: "Time"
                };
                TimePicker.prototype.setDate = function(date) {
                  var fn, unit, _results;
                  this.date = date;
                  date = this.date;
                  if ((this.date != null)) {
                    this.innerFlip.showBack();
                  }
                   else {
                    this.innerFlip.showFront();
                    date = new Date;
                  }
                ;
                  this.display.attr("x-time", date);
                  _results = [];
                  for (unit in units) {
                    fn = units[unit];
                    _results.push(this[unit].val((date[("get" + fn)]() + (((unit === "month") ? 1 : 0)))));
                  };
                  return _results;
                };
                TimePicker.prototype.save = function() {
                  var date, fn, unit;
                  date = new Date;
                  try {
                    for (unit in units) {
                      fn = units[unit];
                      date[("set" + fn)]((this[unit].val() - (((unit === "month") ? 1 : 0))));
                    };
                  } catch (error) {
                    date = null;
                  };
                  this.options.change(date);
                  return this.setDate(date);
                };
                TimePicker.prototype.getDate = function() {
                  return this.date;
                };
                return _(null, TimePicker);
              })(__cb(_, __frame, 645, 36, function ___(__0, __19) {
                exports.TimePicker = TimePicker = __19;
                exports.InfoListManager = InfoListManager = (function(_super) {
                  __extends(InfoListManager, _super);
                  function InfoListManager(_, node, creator) {
                    var __this = this;
                    var __frame = {
                      name: "InfoListManager",
                      line: 652
                    };
                    return __func(_, this, arguments, InfoListManager, 0, __frame, function __$InfoListManager() {
                      return InfoListManager.__super__.constructor.call(__this, __cb(_, __frame, 1, 6, _, true), node, function __1(_, id) {
                        var info;
                        var __frame = {
                          name: "__1",
                          line: 653
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          return model.cache.getInformation(__cb(_, __frame, 2, 15, function ___(__0, __1) {
                            info = __1;
                            return (function __$__1(__then) {
                              if ((info != null)) {
                                return creator(__cb(_, __frame, 4, 17, _, true), info);
                              }
                               else {
                                __then();
                              }
                            ;
                            })(_);
                          }, true), id);
                        });
                      });
                    });
                  };
                  return InfoListManager;
                })(ListManager);
                exports.createInfoButton = createInfoButton = function(info, type, del) {
                  var emitter, labelnode, setLabel;
                  if ((type == null)) {
                    type = false;
                  }
                ;
                  labelnode = $(".label", domnode);
                  if ((del != null)) {
                    $("button", domnode).click(function(ev) {
                      ev.preventDefault();
                      ev.stopPropagation();
                      return del(info);
                    });
                  }
                ;
                  info.onChanged(setLabel = function setLabel__1(info, _) {
                    var __frame = {
                      name: "setLabel__1",
                      line: 679
                    };
                    return __func(_, this, arguments, setLabel__1, 1, __frame, function __$setLabel__1() {
                      return exports.info2label(__cb(_, __frame, 1, 14, function ___(__0, __1) {
                        label = __1;
                        if (!type) {
                          label = (label.split(":")).slice(1).join(":");
                        }
                      ;
                        return _(null, labelnode.html(label));
                      }, true), info);
                    });
                  });
                  setLabel(info);
                  emitter = new Emitter(domnode);
                  emitter.setViewName(exports.info2viewname(info));
                  return domnode;
                };
                exports.InfoList = InfoList = (function(_super) {
                  __extends(InfoList, _super);
                  function InfoList(_, node, type, del) {
                    var __this = this;
                    var __frame = {
                      name: "InfoList",
                      line: 696
                    };
                    return __func(_, this, arguments, InfoList, 0, __frame, function __$InfoList() {
                      if ((type == null)) {
                        type = false;
                      }
                    ;
                      return InfoList.__super__.constructor.call(__this, __cb(_, __frame, 4, 6, _, true), node, function __1(_, reference) {
                        var __frame = {
                          name: "__1",
                          line: 700
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          return _(null, createInfoButton(reference, type, del));
                        });
                      });
                    });
                  };
                  return InfoList;
                })(InfoListManager);
                exports.ReferenceList = ReferenceList = (function(_super) {
                  __extends(ReferenceList, _super);
                  function ReferenceList(_, node, info) {
                    var __this = this;
                    var __frame = {
                      name: "ReferenceList",
                      line: 713
                    };
                    return __func(_, this, arguments, ReferenceList, 0, __frame, function __$ReferenceList() {
                      new DropArea(node, function __1(viewname, _) {
                        var id, reference, _ref;
                        var __frame = {
                          name: "__1",
                          line: 714
                        };
                        return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                          return (function __$__1(__then) {
                            if (((id = (((_ref = /^\w*:(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
                              return model.cache.getInformation(__cb(_, __frame, 3, 22, function ___(__0, __1) {
                                reference = __1;
                                return (function __$__1(__then) {
                                  if ((reference != null)) {
                                    return info.addReference(__cb(_, __frame, 5, 19, _, true), reference);
                                  }
                                   else {
                                    __then();
                                  }
                                ;
                                })(__then);
                              }, true), id);
                            }
                             else {
                              __then();
                            }
                          ;
                          })(_);
                        });
                      });
                      return ReferenceList.__super__.constructor.call(__this, __cb(_, __frame, 10, 6, _, true), node, true, function(reference) {
                        return info.removeReference((function() {
                        
                        }), reference);
                      });
                    });
                  };
                  return ReferenceList;
                })(InfoList);
                exports.InfoClassListManager = InfoClassListManager = (function(_super) {
                  __extends(InfoClassListManager, _super);
                  function InfoClassListManager(_, node, cls, creator) {
                    var __this = this;
                    var __frame = {
                      name: "InfoClassListManager",
                      line: 736
                    };
                    return __func(_, this, arguments, InfoClassListManager, 0, __frame, function __$InfoClassListManager() {
                      return InfoClassListManager.__super__.constructor.call(__this, __cb(_, __frame, 1, 6, function __$InfoClassListManager() {
                        cls.onChanged(__this.setList);
                        return cls.getAllIDs(__cb(_, __frame, 3, 19, function ___(__0, __1) {
                          __this.setList(__1);
                          _();
                        }, true));
                      }, true), node, creator);
                    });
                  };
                  return InfoClassListManager;
                })(InfoListManager);
                exports.AsapListsList = AsapListsList = (function(_super) {
                  __extends(AsapListsList, _super);
                  function AsapListsList(_, node) {
                    var __this = this;
                    var __frame = {
                      name: "AsapListsList",
                      line: 750
                    };
                    return __func(_, this, arguments, AsapListsList, 0, __frame, function __$AsapListsList() {
                      return AsapListsList.__super__.constructor.call(__this, __cb(_, __frame, 1, 6, _, true), node, model.AsapList, function __1(_, list) {
                        var listnode;
                        var __frame = {
                          name: "__1",
                          line: 751
                        };
                        return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                          listnode = $((("<button>" + list.name) + "</button>"));
                          list.onChanged(function(list) {
                            return listnode.html(list.name);
                          });
                          new Emitter(listnode).setViewName(("asaplist:" + list.id));
                          return _(null, listnode);
                        });
                      });
                    });
                  };
                  return AsapListsList;
                })(InfoClassListManager);
                exports.InfoClassPicker = InfoClassPicker = (function(_super) {
                  __extends(InfoClassPicker, _super);
                  function InfoClassPicker(node, cls, defaultoption, cb) {
                    this.select = null;
                    this.picker = $("<select />");
                    node.append(this.picker);
                    if ((defaultoption != null)) {
                      this.picker.append($(new Option(defaultoption, "")));
                    }
                  ;
                    InfoClassPicker.__super__.constructor.call(this, this.picker, cls, cb);
                  };
                  InfoClassPicker.prototype.sel = function(id) {
                    this.select = id;
                    if ((id in this.elements)) {
                      return this.elements[id].prop("selected", true);
                    }
                  ;
                  };
                  InfoClassPicker.prototype.getInfo = function InfoClassPicker_prototype_getInfo__1(_) {
                    var __this = this;
                    var __frame = {
                      name: "InfoClassPicker_prototype_getInfo__1",
                      line: 787
                    };
                    return __func(_, this, arguments, InfoClassPicker_prototype_getInfo__1, 0, __frame, function __$InfoClassPicker_prototype_getInfo__1() {
                      return model.cache.getInformation(__cb(_, __frame, 1, 13, _, true), __this.picker.val());
                    });
                  };
                  InfoClassPicker.prototype.onChanged = function InfoClassPicker_prototype_onChanged__2(_) {
                    var __this = this;
                    var __frame = {
                      name: "InfoClassPicker_prototype_onChanged__2",
                      line: 791
                    };
                    return __func(_, this, arguments, InfoClassPicker_prototype_onChanged__2, 0, __frame, function __$InfoClassPicker_prototype_onChanged__2() {
                      return __this.picker.change(__cb(_, __frame, 1, 6, function __$InfoClassPicker_prototype_onChanged__2() {
                        return __this.getInfo(__cb(_, __frame, 2, 13, _, true));
                      }, true));
                    });
                  };
                  return InfoClassPicker;
                })(InfoClassListManager);
                exports.ProjectPicker = ProjectPicker = (function(_super) {
                  __extends(ProjectPicker, _super);
                  function ProjectPicker(node) {
                    ProjectPicker.__super__.constructor.call(this, node, model.Project, "No Project", function __1(_, project) {
                      var projectnode;
                      var __frame = {
                        name: "__1",
                        line: 805
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                        projectnode = $(new Option(project.description, project.id));
                        project.onChanged(function(project) {
                          return projectnode.html(project.description);
                        });
                        return _(null, projectnode);
                      });
                    });
                  };
                  return ProjectPicker;
                })(InfoClassPicker);
                exports.ListPicker = ListPicker = (function(_super) {
                  __extends(ListPicker, _super);
                  function ListPicker(node) {
                    ListPicker.__super__.constructor.call(this, node, model.AsapList, null, function __1(_, list) {
                      var listnode;
                      var __frame = {
                        name: "__1",
                        line: 824
                      };
                      return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                        listnode = $(new Option(list.name, list.id));
                        list.onChanged(function(list) {
                          return listnode.html(list.name);
                        });
                        return _(null, listnode);
                      });
                    });
                  };
                  return ListPicker;
                })(InfoClassPicker);
                return (function __11(_) {
                  function AsapListCreator(node) {
                    var list;
                    list = $("input[name=list]", node);
                    $("form[name=list]").submit(function(ev) {
                      ev.preventDefault();
                      return new model.AsapList().create((function(error) {
                        if ((error == null)) {
                          return list.val("");
                        }
                      ;
                      }), list.val());
                    });
                  };
                  return _(null, AsapListCreator);
                })(__cb(_, __frame, 854, 46, function ___(__0, __20) {
                  exports.AsapListCreator = AsapListCreator = __20;
                  return (function __12(_) {
                    function NoteCreator(node) {
                      var content;
                      content = $("input[name=note]", node);
                      $("form[name=note]", node).submit(function(ev) {
                        ev.preventDefault();
                        return new model.Note().create((function(error) {
                          if ((error == null)) {
                            return content.val("");
                          }
                        ;
                        }), content.val());
                      });
                    };
                    return _(null, NoteCreator);
                  })(__cb(_, __frame, 873, 38, function ___(__0, __21) {
                    exports.NoteCreator = NoteCreator = __21;
                    return (function __13(_) {
                      function AsapCreator(node, list, project, reference) {
                        var desc, listPicker, projectPicker, _this = this;
                        this.list = ((list != null) ? list : null);
                        this.project = ((project != null) ? project : null);
                        this.reference = ((reference != null) ? reference : null);
                        desc = $("input[name=asap]");
                        projectPicker = new ProjectPicker($(".projectsel", node));
                        listPicker = new ListPicker($(".listsel", node));
                        form.submit(function() {
                          (function __1(_) {
                            var __frame = {
                              name: "__1",
                              line: 888
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return (function __$__1(_) {
                                var __1 = (_this.project != null);
                                if (__1) {
                                  return _(null, _this.project);
                                }
                              ;
                                return projectPicker.getInfo(__cb(_, __frame, 1, 60, _, true));
                              })(__cb(_, __frame, -887, 7, function ___(__0, __3) {
                                project = __3;
                                return (function __$__1(_) {
                                  var __2 = (_this.list != null);
                                  if (__2) {
                                    return _(null, _this.list);
                                  }
                                ;
                                  return listPicker.getInfo(__cb(_, __frame, 2, 51, _, true));
                                })(__cb(_, __frame, -887, 7, function ___(__0, __4) {
                                  list = __4;
                                  return new model.Asap().create(__cb(_, __frame, 3, 10, function __$__1() {
                                    return _(null, desc.val(""));
                                  }, true), desc.val(), list, _this.reference, project);
                                }, true));
                              }, true));
                            });
                          })();
                          return false;
                        });
                      };
                      AsapCreator.prototype.setList = function(list) {
                        this.list = list;
                      };
                      AsapCreator.prototype.setProject = function(project) {
                        this.project = project;
                      };
                      AsapCreator.prototype.setReference = function(reference) {
                        this.reference = reference;
                      };
                      return _(null, AsapCreator);
                    })(__cb(_, __frame, 911, 38, function ___(__0, __22) {
                      exports.AsapCreator = AsapCreator = __22;
                      return (function __14(_) {
                        function ProjectCreator(node, parent, reference) {
                          var desc, parentPicker, _this = this;
                          this.node = node;
                          this.parent = ((parent != null) ? parent : null);
                          this.reference = ((reference != null) ? reference : null);
                          desc = $("input[name=project]");
                          parentPicker = new ProjectPicker($(".parentpicker", node));
                          form.submit(function() {
                            (function __1(_) {
                              var __frame = {
                                name: "__1",
                                line: 925
                              };
                              return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                                return (function __$__1(_) {
                                  var __1 = (_this.parent != null);
                                  if (__1) {
                                    return _(null, _this.parent);
                                  }
                                ;
                                  return parentPicker.getInfo(__cb(_, __frame, 1, 57, _, true));
                                })(__cb(_, __frame, -924, 7, function ___(__0, __2) {
                                  parent = __2;
                                  return new model.Project().create(__cb(_, __frame, 2, 10, function __$__1() {
                                    return _(null, desc.val(""));
                                  }, true), desc.val(), _this.reference, parent);
                                }, true));
                              });
                            })();
                            return false;
                          });
                        };
                        ProjectCreator.prototype.setParent = function(parent) {
                          this.parent = parent;
                        };
                        ProjectCreator.prototype.setReference = function(reference) {
                          this.reference = reference;
                        };
                        return _(null, ProjectCreator);
                      })(__cb(_, __frame, 943, 44, function ___(__0, __23) {
                        exports.ProjectCreator = ProjectCreator = __23;
                        InboxView = (function(_super) {
                          __extends(InboxView, _super);
                          InboxView.registerView(/^inbox$/, InboxView, function __1(_) {
                            var __frame = {
                              name: "__1",
                              line: 950
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return _(null, "Inbox");
                            });
                          });
                          function InboxView(_, slot) {
                            var innerFlip, outerFlip, _this, __this = this;
                            var __frame = {
                              name: "InboxView",
                              line: 954
                            };
                            return __func(_, this, arguments, InboxView, 0, __frame, function __$InboxView() {
                              _this = __this;
                              __this.slot = slot;
                              __this.draw = function(values) {
                                return InboxView.prototype.draw.apply(_this, arguments);
                              };
                              __this.size = __this.first = null;
                              __this.context = __this.slot.getContentNode();
                              __this.innerslot = new Slot($(".inboxinfo", __this.slot.getContentNode()).first(), $("h1", __this.slot.getContentNode()).first());
                              model.inbox.onChanged(__this.draw);
                              model.inbox.get(function(err, values) {
                                if ((err == null)) {
                                  return _this.draw(values);
                                }
                              ;
                              });
                              innerFlip = new Flippable($(".newasap", __this.context), $(".newproject", __this.context), 0);
                              outerFlip = new Flippable($(".front", __this.context), $(".back", __this.context), 500);
                              outerFlip.addToggler($(".front > button", __this.context));
                              outerFlip.addToggler($(".back > button", __this.context));
                              $("button[name=asap]", __this.context).click(innerFlip.showFront);
                              $("button[name=project]", __this.context).click(innerFlip.showBack);
                              __this.asapCreator = new AsapCreator($(".newasap", __this.context));
                              __this.projectCreator = new ProjectCreator($(".newproject", __this.context));
                              _();
                            });
                          };
                          InboxView.prototype["delete"] = function() {
                            return model.inbox.removeCb("changed", this.draw);
                          };
                          InboxView.prototype.draw = function(values) {
                            if ((this.size !== values.size)) {
                              this.slot.setTitle((("Inbox (" + (this.size = values.size)) + ")"));
                            }
                          ;
                            if ((this.first !== values.first)) {
                              this.first = values.first;
                              this.asapCreator.setReference(this.first);
                              this.projectCreator.setReference(this.first);
                              if ((this.first != null)) {
                                return this.innerslot.setView(((("" + this.first.type) + ":") + this.first.id));
                              }
                               else {
                                return this.innerslot.clear();
                              }
                            ;
                            }
                          ;
                          };
                          return InboxView;
                        })(View);
                        InfoView = (function(_super) {
                          __extends(InfoView, _super);
                          function InfoView(_, slot, match) {
                            var info, _this, __this = this;
                            var __frame = {
                              name: "InfoView",
                              line: 1008
                            };
                            return __func(_, this, arguments, InfoView, 0, __frame, function __$InfoView() {
                              _this = __this;
                              __this.slot = slot;
                              __this.clean = function(force) {
                                return InfoView.prototype.clean.apply(_this, arguments);
                              };
                              __this.dirty = function() {
                                return InfoView.prototype.dirty.apply(_this, arguments);
                              };
                              __this.draw = function() {
                                return InfoView.prototype.draw.apply(_this, arguments);
                              };
                              __this["delete"] = function() {
                                return InfoView.prototype.delete.apply(_this, arguments);
                              };
                              __this.context = __this.slot.getContentNode();
                              __this.id = match[1];
                              __this.contentNode = $(".infocontent", __this.context);
                              return model.cache.getInformation(__cb(_, __frame, 19, 18, function ___(__0, __1) {
                                __this.info = __1;
                                __this.info.onChanged(__this.draw);
                                __this.info.onDeleted(__this.delcb = function() {
                                  return _this.slot.setView("")();
                                });
                                info = __this.info;
                                $(".setStatus > button", __this.context).click(function(ev) {
                                  var status;
                                  ev.preventDefault();
                                  status = $(this).attr("name");
                                  if (!(((status === "delete") && !confirm("Really delete?")))) {
                                    return info.setStatus((function() {
                                    
                                    }), status);
                                  }
                                ;
                                });
                                (__this.savebutton = $("button[name=save]", __this.context)).hide();
                                __this.delayPicker = new TimePicker($(".delay"), {
                                  name: "Delay",
                                  change: function(date) {
                                    return info.setDelay((function() {
                                    
                                    }), date);
                                  }
                                });
                                __this.savebutton.click(function(ev) {
                                  ev.preventDefault();
                                  return _this.clean(true);
                                });
                                new Uploader($(".upload", __this.context));
                                __this.refManager = new ReferenceList($(".references", __this.context), __this.info);
                                __this.initContent();
                                __this.draw();
                                new Flippable($(".options", __this.context), null).addToggler($("button[name=options]", __this.context));
                                _();
                              }, true), __this.id);
                            });
                          };
                          InfoView.prototype["delete"] = function() {
                            this.info.removeCb("changed", this.draw);
                            return this.info.removeCb("deleted", this.delcb);
                          };
                          InfoView.prototype.draw = function() {
                            this.drawTitle();
                            this.drawFrame();
                            return this.drawContent();
                          };
                          InfoView.prototype.dirty = function() {
                            this.dirtStamp = (new Date().getTime)();
                            this.savebutton.show(400);
                            return setTimeout(this.clean, 5000);
                          };
                          InfoView.prototype.clean = function(force) {
                            if ((((this.dirtStamp != null)) && (((((new Date().getTime)() - this.dirtStamp) >= 5000) || force)))) {
                              this.save();
                              this.dirtStamp = null;
                              return this.savebutton.hide(1000);
                            }
                          ;
                          };
                          InfoView.prototype.drawFrame = function() {
                            $(".setStatus > button", this.context).removeClass("active");
                            $(((".setStatus > button[name=" + this.info.status) + "]"), this.context).addClass("active");
                            $("span.created_at", this.context).attr("x-time", this.info.createdAt);
                            $("span.last_edited", this.context).attr("x-time", this.info.lastEdited);
                            this.delayPicker.setDate(((this.info.delay != null) ? new Date(this.info.delay) : null));
                            return this.refManager.setList(this.info.references);
                          };
                          return InfoView;
                        })(View);
                        NoteView = (function(_super) {
                          __extends(NoteView, _super);
                          function NoteView() {
                            return NoteView.__super__.constructor.apply(this, arguments);
                          };
                          NoteView.registerView(/^note:(.*)$/, NoteView, function __1(_, match) {
                            var __frame = {
                              name: "__1",
                              line: 1105
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
                                var __1 = ("Note: " + (__2.content));
                                return _(null, __1);
                              }, true), match[1]);
                            });
                          });
                          NoteView.prototype.drawTitle = function() {
                            return this.slot.setTitle("Note");
                          };
                          NoteView.prototype.drawContent = function NoteView_prototype_drawContent__2(_) {
                            var __this = this;
                            var __frame = {
                              name: "NoteView_prototype_drawContent__2",
                              line: 1113
                            };
                            return __func(_, this, arguments, NoteView_prototype_drawContent__2, 0, __frame, function __$NoteView_prototype_drawContent__2() {
                              __this.area.val(__this.info.content);
                              return setTimeout(__cb(_, __frame, 2, 6, function __$NoteView_prototype_drawContent__2() {
                                return _(null, __this.area.trigger("autosize"));
                              }, true), 1);
                            });
                          };
                          NoteView.prototype.initContent = function() {
                            var _this = this;
                            this.area = $("textarea", this.contentNode);
                            this.area.autosize({
                              append: "\n"
                            });
                            this.area.keyup(this.dirty);
                            return this.area.change(function() {
                              _this.dirty();
                              return _this.clean(true);
                            });
                          };
                          NoteView.prototype.save = function NoteView_prototype_save__3(_) {
                            var msg, __this = this;
                            var __frame = {
                              name: "NoteView_prototype_save__3",
                              line: 1132
                            };
                            return __func(_, this, arguments, NoteView_prototype_save__3, 0, __frame, function __$NoteView_prototype_save__3() {
                              return (function __$NoteView_prototype_save__3(__then) {
                                if ((__this.info.content !== __this.area.val())) {
                                  msg = message("Saving…");
                                  return __this.info.setContent(__cb(_, __frame, 4, 8, function __$NoteView_prototype_save__3() {
                                    if (((typeof error !== "undefined") && (error !== null))) {
                                      return _(null, msg.html("Save failed!"));
                                    }
                                     else {
                                      return _(null, msg.html("Saved!"));
                                    }
                                  ;
                                    __then();
                                  }, true), __this.area.val());
                                }
                                 else {
                                  __then();
                                }
                              ;
                              })(_);
                            });
                          };
                          return NoteView;
                        })(InfoView);
                        AsapListView = (function(_super) {
                          __extends(AsapListView, _super);
                          function AsapListView() {
                            return AsapListView.__super__.constructor.apply(this, arguments);
                          };
                          AsapListView.registerView(/^asaplist:(.*)$/, AsapListView, function __1(_, match) {
                            var __frame = {
                              name: "__1",
                              line: 1157
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.cache.getInformation(__cb(_, __frame, 1, 30, function ___(__0, __2) {
                                var __1 = ("ToDo List: " + (__2.name));
                                return _(null, __1);
                              }, true), match[1]);
                            });
                          });
                          AsapListView.prototype.drawTitle = function() {
                            return this.slot.setTitle(this.info.name);
                          };
                          AsapListView.prototype.drawContent = function AsapListView_prototype_drawContent__2(_) {
                            var __this = this;
                            var __frame = {
                              name: "AsapListView_prototype_drawContent__2",
                              line: 1165
                            };
                            return __func(_, this, arguments, AsapListView_prototype_drawContent__2, 0, __frame, function __$AsapListView_prototype_drawContent__2() {
                              __this.newname.val(__this.info.name);
                              return model.Asap.getAllIDs(__cb(_, __frame, 2, 6, function __$AsapListView_prototype_drawContent__2() {
                                return _(null, __this.list.setList(__this.info.asaps));
                              }, true));
                            });
                          };
                          AsapListView.prototype.initContent = function() {
                            var active, togglebutton, _this = this;
                            this.contentNode.addClass("hideinactive");
                            active = true;
                            togglebutton = $("button[name=toggleshow]");
                            togglebutton.click(function() {
                              if (active) {
                                active = false;
                                togglebutton.html("Show only active");
                                _this.contentNode.removeClass("hideinactive");
                              }
                               else {
                                active = true;
                                togglebutton.html("Show all");
                                _this.contentNode.addClass("hideinactive");
                              }
                            ;
                              return false;
                            });
                            this.newname = $("input[name=newname]", this.contentNode);
                            $("form", this.contentNode).submit(function(ev) {
                              ev.preventDefault();
                              return _this.info.rename((function() {
                              
                              }), _this.newname.val());
                            });
                            new AsapCreator($(".newtodo", this.contentNode), this.info);
                            return this.list = new InfoListManager($("tbody", this.contentNode), function(autocb, asap) {
                              var create, deadlinePicker, delayPicker, delparent, descFlippable, descform, descinput, desclabel, donebox, last, listPicker, project, refManager, set;
                              refManager = new ReferenceList($(".refs", entry), asap);
                              delayPicker = new TimePicker($(".delay", entry), {
                                name: "",
                                change: function(date) {
                                  return asap.setDelay((function() {
                                  
                                  }), date);
                                }
                              });
                              deadlinePicker = new TimePicker($(".deadline", entry), {
                                name: "",
                                change: function(date) {
                                  return asap.setDeadline((function() {
                                  
                                  }), date);
                                }
                              });
                              listPicker = new ListPicker($("td.listsel", entry));
                              listPicker.onChanged(function(list) {
                                return asap.setList((function() {
                                
                                }), list);
                              });
                              donebox = $("input[type=checkbox]", entry);
                              donebox.click(function() {
                                if (donebox.is(":checked")) {
                                  return asap.done((function() {
                                  
                                  }));
                                }
                                 else {
                                  return asap.undo((function() {
                                  
                                  }));
                                }
                              ;
                              });
                              desclabel = $(".desc > span", entry);
                              descform = $(".desc > form", entry);
                              descinput = $(".desc > form > input", entry);
                              descform.submit(function(ev) {
                                return (function __1(_) {
                                  var __frame = {
                                    name: "__1",
                                    line: 1226
                                  };
                                  return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                                    ev.preventDefault();
                                    return asap.setDescription(__cb(_, __frame, 2, 12, function __$__1() {
                                      return _(null, descFlippable.showFront());
                                    }, true), descinput.val());
                                  });
                                })();
                              });
                              descFlippable = new Flippable(desclabel, descform, 0);
                              descFlippable.addToggler(desclabel);
                              last = $(".last", entry);
                              create = $(".create", entry);
                              project = $(".project", entry);
                              new DropArea(project, function __1(viewname, _) {
                                var id, parent, _ref;
                                var __frame = {
                                  name: "__1",
                                  line: 1237
                                };
                                return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                  return (function __$__1(__then) {
                                    if (((id = (((_ref = /project:(.*)$/.exec(viewname)) != null) ? _ref[1] : void 0)) != null)) {
                                      return model.cache.getInformation(__cb(_, __frame, 3, 21, function ___(__0, __1) {
                                        parent = __1;
                                        if ((parent != null)) {
                                          return _(null, asap.setParent((function() {
                                          
                                          }), parent));
                                        }
                                      ;
                                        __then();
                                      }, true), id);
                                    }
                                     else {
                                      __then();
                                    }
                                  ;
                                  })(_);
                                });
                              });
                              $("td > button[name=delete]", entry).click(function() {
                                if (confirm("Really delete?")) {
                                  return asap.setStatus((function() {
                                  
                                  }), "delete");
                                }
                              ;
                              });
                              delparent = function() {
                                return asap.setParent((function() {
                                
                                }), null);
                              };
                              asap.onChanged(set = function set__2(asap, _) {
                                var parent;
                                var __frame = {
                                  name: "set__2",
                                  line: 1254
                                };
                                return __func(_, this, arguments, set__2, 1, __frame, function __$set__2() {
                                  if ((((asap.completed != null)) || !asap.active)) {
                                    entry.addClass("inactive");
                                  }
                                   else {
                                    entry.removeClass("inactive");
                                  }
                                ;
                                  if ((((asap.completed == null)) && asap.overdue)) {
                                    $(".deadline", entry).addClass("overdue");
                                  }
                                   else {
                                    $(".deadline", entry).removeClass("overdue");
                                  }
                                ;
                                  donebox.prop("checked", (asap.completed != null));
                                  desclabel.html(asap.description);
                                  descinput.val(asap.description);
                                  if ((asap.references != null)) {
                                    refManager.setList(asap.references);
                                  }
                                ;
                                  return model.cache.getInformation(__cb(_, __frame, 18, 19, function ___(__0, __1) {
                                    parent = __1;
                                    project.html(((parent != null) ? createInfoButton(parent, false, delparent) : ""));
                                    delayPicker.setDate(((asap.delay != null) ? new Date(asap.delay) : null));
                                    deadlinePicker.setDate(((asap.deadline != null) ? new Date(asap.deadline) : null));
                                    last.attr("x-time", asap.lastEdited);
                                    create.attr("x-time", asap.createdAt);
                                    return _(null, listPicker.sel(asap.asaplist));
                                  }, true), asap.parent);
                                });
                              });
                              set(asap);
                              return entry;
                            });
                          };
                          return AsapListView;
                        })(InfoView);
                        TaskList = (function(_super) {
                          __extends(TaskList, _super);
                          function TaskList(node) {
                            TaskList.__super__.constructor.call(this, node, function(autocb, task) {
                              var childrenList, collapsebutton, descFlippable, descform, descinput, desclabel, donebox, draw, drawboth, listid;
                              $("button[name=delete]", entry).click(function() {
                                if (confirm("Really delete?")) {
                                  return task.setStatus((function() {
                                  
                                  }), "delete");
                                }
                              ;
                              });
                              donebox = $("input[name=completed]", entry);
                              donebox.click(function() {
                                if (donebox.prop("checked")) {
                                  return task.done((function() {
                                  
                                  }));
                                }
                                 else {
                                  return task.undo((function() {
                                  
                                  }));
                                }
                              ;
                              });
                              switch (task.type) {
                              case "project":
                                collapsebutton = $("button.collapse", entry);
                                collapsebutton.click(function(ev) {
                                  ev.preventDefault();
                                  if (task.collapsed) {
                                    return task.uncollapse((function() {
                                    
                                    }));
                                  }
                                   else {
                                    return task.collapse((function() {
                                    
                                    }));
                                  }
                                ;
                                });
                                childrenList = new TaskList($(".children", entry));
                                desclabel = $("form > span.name", entry);
                                descinput = $("form > input", entry);
                                descform = $("form", entry);
                                descform.submit(function(ev) {
                                  (function __1(_) {
                                    var __frame = {
                                      name: "__1",
                                      line: 1325
                                    };
                                    return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                                      return (function __$__1(__then) {
                                        if (descFlippable.flipped) {
                                          return task.setDescription(__cb(_, __frame, 2, 18, __then, true), descinput.val());
                                        }
                                         else {
                                          __then();
                                        }
                                      ;
                                      })(function __$__1() {
                                        return _(null, descFlippable.toggle());
                                      });
                                    });
                                  })();
                                  return false;
                                });
                                descFlippable = new Flippable(desclabel, descinput);
                                draw = function(project) {
                                  collapsebutton.html((project.collapsed ? ">" : "v"));
                                  childrenList.setList(((project.collapsed || ((project.children == null))) ? [] : project.children));
                                  desclabel.html(project.description);
                                  return descinput.val(project.description);
                                };
                                new DropArea($(".projecthandle", entry), function __1(viewname, _) {
                                  var child, id, _ref;
                                  var __frame = {
                                    name: "__1",
                                    line: 1340
                                  };
                                  return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                    return (function __$__1(__then) {
                                      if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {
                                        return model.cache.getInformation(__cb(_, __frame, 3, 24, function ___(__0, __1) {
                                          child = __1;
                                          return (function __$__1(__then) {
                                            if ((child != null)) {
                                              return child.setParent(__cb(_, __frame, 5, 25, _, true), task);
                                            }
                                             else {
                                              __then();
                                            }
                                          ;
                                          })(__then);
                                        }, true), id);
                                      }
                                       else {
                                        __then();
                                      }
                                    ;
                                    })(_);
                                  });
                                });
                                new Emitter(desclabel).setViewName(("project:" + task.id));
                                break;
                              case "asap":
                                $("span.description", entry).html(createInfoButton(task));
                                listid = null;
                                draw = function draw__2(asap, _) {
                                  var list;
                                  var __frame = {
                                    name: "draw__2",
                                    line: 1354
                                  };
                                  return __func(_, this, arguments, draw__2, 1, __frame, function __$draw__2() {
                                    return (function __$draw__2(__then) {
                                      if (((listid !== asap.asaplist) && ((asap.asaplist != null)))) {
                                        listid = asap.asaplist;
                                        return model.cache.getInformation(__cb(_, __frame, 4, 23, function ___(__0, __1) {
                                          list = __1;
                                          return _(null, $("span.list", entry).html(createInfoButton(list)));
                                        }, true), listid);
                                      }
                                       else {
                                        __then();
                                      }
                                    ;
                                    })(_);
                                  });
                                };
                              };
                              drawboth = function(task) {
                                donebox.prop("checked", (task.completed != null));
                                if ((task.active && ((task.completed == null)))) {
                                  entry.removeClass("inactive");
                                }
                                 else {
                                  entry.addClass("inactive");
                                }
                              ;
                                if ((task.parent != null)) {
                                  return entry.addClass("hasparent");
                                }
                                 else {
                                  return entry.removeClass("hasparent");
                                }
                              ;
                              };
                              task.onChanged(draw);
                              task.onChanged(drawboth);
                              draw(task);
                              drawboth(task);
                              return entry;
                            });
                          };
                          return TaskList;
                        })(InfoListManager);
                        TaskView = (function(_super) {
                          __extends(TaskView, _super);
                          function TaskView() {
                            return TaskView.__super__.constructor.apply(this, arguments);
                          };
                          TaskView.prototype.drawContent = function() {
                          
                          };
                          TaskView.prototype.initContent = function() {
                            var active, togglebutton, _this = this;
                            this.contentNode.addClass("hideinactive");
                            active = true;
                            togglebutton = $("button[name=toggleshow]");
                            togglebutton.click(function() {
                              if (active) {
                                active = false;
                                togglebutton.html("Show only active");
                                _this.contentNode.removeClass("hideinactive");
                              }
                               else {
                                active = true;
                                togglebutton.html("Show all");
                                _this.contentNode.addClass("hideinactive");
                              }
                            ;
                              return false;
                            });
                            new DropArea($(".root", this.contentNode), function __1(viewname, _) {
                              var id, _ref;
                              var __frame = {
                                name: "__1",
                                line: 1416
                              };
                              return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                return (function __$__1(__then) {
                                  if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {
                                    return model.cache.getInformation(__cb(_, __frame, 3, 16, function ___(__0, __1) {
                                      child(__1);
                                      if (!(((((typeof error !== "undefined") && (error !== null))) || (((typeof child === "undefined") || (child === null)))))) {
                                        return _(null, child.setParent((function() {
                                        
                                        }), null));
                                      }
                                    ;
                                      __then();
                                    }, true), id);
                                  }
                                   else {
                                    __then();
                                  }
                                ;
                                })(_);
                              });
                            });
                            return new TaskList($(".tasklist", this.contentNode)).setList([this.info.id,]);
                          };
                          return TaskView;
                        })(InfoView);
                        ProjectView = (function(_super) {
                          __extends(ProjectView, _super);
                          function ProjectView() {
                            return ProjectView.__super__.constructor.apply(this, arguments);
                          };
                          ProjectView.registerView(/^project:(.*)$/, ProjectView, function __1(_, match) {
                            var __frame = {
                              name: "__1",
                              line: 1440
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.cache.getInformation(__cb(_, __frame, 1, 28, function ___(__0, __2) {
                                var __1 = ("Project: " + (__2.description));
                                return _(null, __1);
                              }, true), match[1]);
                            });
                          });
                          ProjectView.prototype.drawTitle = function() {
                            return this.slot.setTitle(("Project: " + this.info.description));
                          };
                          return ProjectView;
                        })(TaskView);
                        AsapView = (function(_super) {
                          __extends(AsapView, _super);
                          function AsapView() {
                            return AsapView.__super__.constructor.apply(this, arguments);
                          };
                          AsapView.registerView(/^asap:(.*)$/, AsapView, function __1(_, match) {
                            var __frame = {
                              name: "__1",
                              line: 1460
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return model.cache.getInformation(__cb(_, __frame, 1, 25, function ___(__0, __2) {
                                var __1 = ("ToDo: " + (__2.description));
                                return _(null, __1);
                              }, true), match[1]);
                            });
                          });
                          AsapView.prototype.drawTitle = function() {
                            return this.slot.setTitle("To Do");
                          };
                          return AsapView;
                        })(InfoView);
                        ProjectsView = (function(_super) {
                          __extends(ProjectsView, _super);
                          ProjectsView.registerView(/^projects$/, ProjectsView, function __1(_) {
                            var __frame = {
                              name: "__1",
                              line: 1476
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return _(null, "Projects");
                            });
                          });
                          function ProjectsView(slot) {
                            var active, creator, togglebutton, _this = this;
                            this.slot = slot;
                            this.contentNode = this.slot.getContentNode();
                            this.slot.setTitle("Projects");
                            this.contentNode.append(creator = $("<div/>"));
                            new ProjectCreator(creator);
                            this.contentNode.append(creator = $("<div/>"));
                            new AsapCreator(creator);
                            this.contentNode.append(creator = $("<div/>"));
                            new AsapListCreator(creator);
                            this.contentNode.addClass("hideinactive hidechildren");
                            active = true;
                            togglebutton = $("button[name=toggleshow]");
                            togglebutton.click(function() {
                              if (active) {
                                active = false;
                                togglebutton.html("Show only active");
                                _this.contentNode.removeClass("hideinactive");
                              }
                               else {
                                active = true;
                                togglebutton.html("Show all");
                                _this.contentNode.addClass("hideinactive");
                              }
                            ;
                              return false;
                            });
                            this.projectList = new TaskList($(".tasklist", this.contentNode));
                            new DropArea($(".root", this.contentNode), function __1(viewname, _) {
                              var child, id, _ref;
                              var __frame = {
                                name: "__1",
                                line: 1508
                              };
                              return __func(_, this, arguments, __1, 1, __frame, function __$__1() {
                                return (function __$__1(__then) {
                                  if (((id = (((_ref = /(asap|project):(.*)$/.exec(viewname)) != null) ? _ref[2] : void 0)) != null)) {
                                    return model.cache.getInformation(__cb(_, __frame, 3, 18, function ___(__0, __1) {
                                      child = __1;
                                      return (function __$__1(__then) {
                                        if ((child != null)) {
                                          return child.setParent(__cb(_, __frame, 5, 19, _, true), null);
                                        }
                                         else {
                                          __then();
                                        }
                                      ;
                                      })(__then);
                                    }, true), id);
                                  }
                                   else {
                                    __then();
                                  }
                                ;
                                })(_);
                              });
                            });
                            model.Project.getAllIDs(catchNull(this.projectList.setList));
                            model.Project.onChanged(this.projectList.setList);
                          };
                          ProjectsView.prototype["delete"] = function() {
                          
                          };
                          return ProjectsView;
                        })(View);
                        InboxView = (function(_super) {
                          __extends(InboxView, _super);
                          InboxView.registerView(/^$/, InboxView, function __1(_) {
                            var __frame = {
                              name: "__1",
                              line: 1531
                            };
                            return __func(_, this, arguments, __1, 0, __frame, function __$__1() {
                              return _(null, "Secretarius");
                            });
                          });
                          function InboxView(slot) {
                            this.slot = slot;
                            new NoteCreator($(".newnote", this.contentNode));
                            new AsapListsList($(".lists", this.contentNode));
                            new AsapListCreator($(".newlist", this.contentNode));
                          };
                          InboxView.prototype["delete"] = function() {
                          
                          };
                          return InboxView;
                        })(View);
                        return model.cache.getInformation(__cb(_, __frame, 1547, 9, function ___(__0, __24) {
                          info = __24;
                          for (key in info) {
                            if (!__hasProp.call(info, key)) {
                              continue;
                            }
                          ;
                            value = info[key];
                            console.log(((("" + key) + ":") + value));
                          };
                          win = new WindowSlot;
                          win.setView(document.location.hash);
                          $(function() {
                            return ko.applyBindings(win);
                          });
                          _();
                        }, true), "4dd53cb0-8bc1-11e2-ae7d-8c705ab2d594");
                      }, true));
                    }, true));
                  }, true));
                }, true));
              }, true));
            }, true));
          }, true));
        }, true));
      }, true));
    })(__cb(_, __frame, 1563, 0, _, true));
  });
}).call(this, __trap);